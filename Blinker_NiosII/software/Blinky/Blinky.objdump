
Blinky.elf:     file format elf32-littlenios2
Blinky.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005ad0 memsz 0x00005ad0 flags r-x
    LOAD off    0x00006af0 vaddr 0x00045af0 paddr 0x0004755c align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008fc8 vaddr 0x00048fc8 paddr 0x00048fc8 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000058d8  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  00045a94  00045a94  00006a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00045af0  0004755c  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00048fc8  00048fc8  00008fc8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00049118  00049118  0000855c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000990  00000000  00000000  00008580  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016295  00000000  00000000  00008f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f42  00000000  00000000  0001f1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000068df  00000000  00000000  000250e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001638  00000000  00000000  0002b9c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002321  00000000  00000000  0002d000  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004721  00000000  00000000  0002f321  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00033a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00033a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003641a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003641d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036427  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036428  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00036429  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003642d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036431  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00036435  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003644b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00036456  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001b  00000000  00000000  00036461  2**0
                  CONTENTS, READONLY
 29 .jdi          00003f86  00000000  00000000  0003647c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000678b5  00000000  00000000  0003a402  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
00045a94 l    d  .rodata	00000000 .rodata
00045af0 l    d  .rwdata	00000000 .rwdata
00048fc8 l    d  .bss	00000000 .bss
00049118 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Blinky_bsp//obj/HAL/src/crt0.o
000401f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000405dc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00045af0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000421d8 l     F .text	00000008 __fp_lock
000421e0 l     F .text	00000008 __fp_unlock
000421f4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00043250 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043378 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000433a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000434ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000435a8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004368c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043870 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004754c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043b24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043c74 l     F .text	00000038 alt_dev_reg
000464c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043f50 l     F .text	00000204 altera_avalon_jtag_uart_irq
00044154 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044a28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044ec0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00045018 l     F .text	00000050 alt_get_errno
00045068 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00043144 g     F .text	00000054 _isatty_r
000437b8 g     F .text	00000078 alt_main
00040730 g     F .text	000000b8 _puts_r
00049018 g     O .bss	00000100 alt_irq
00043198 g     F .text	0000005c _lseek_r
0004755c g       *ABS*	00000000 __flash_rwdata_start
00049118 g       *ABS*	00000000 __alt_heap_start
00042ec4 g     F .text	0000005c __sseek
0004253c g     F .text	00000010 __sinit
00042394 g     F .text	00000078 __sfmoreglue
00043850 g     F .text	00000020 __malloc_unlock
00041700 g     F .text	0000015c memmove
00042524 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000430ec g     F .text	00000058 _fstat_r
00048fd4 g     O .bss	00000004 errno
00042e40 g     F .text	00000008 __seofread
00048fdc g     O .bss	00000004 alt_argv
0004f524 g       *ABS*	00000000 _gp
00043af4 g     F .text	00000030 usleep
00046344 g     O .rwdata	00000180 alt_fd_list
00045478 g     F .text	00000090 alt_find_dev
000415c8 g     F .text	00000138 memcpy
000421e8 g     F .text	0000000c _cleanup_r
00044fa0 g     F .text	00000078 alt_io_redirect
00045a94 g       *ABS*	00000000 __DTOR_END__
000407e8 g     F .text	00000014 puts
00044350 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000406f8 g     F .text	00000008 .hidden __udivsi3
000434fc g     F .text	000000ac isatty
00048fd0 g     O .bss	00000004 __malloc_top_pad
00040894 g     F .text	000004a4 __sfvwrite_r
00041dfc g     F .text	00000054 _sbrk_r
00045a94 g     O .rodata	0000000b segment_mapping
000431f4 g     F .text	0000005c _read_r
00047544 g     O .rwdata	00000004 alt_max_fd
00042fd8 g     F .text	00000100 _fclose_r
000421a8 g     F .text	00000030 fflush
00048fcc g     O .bss	00000004 __malloc_max_sbrked_mem
000436dc g     F .text	000000dc lseek
00047524 g     O .rwdata	00000004 _global_impure_ptr
000401f8 g     F .text	00000034 set_led
0004185c g     F .text	000005a0 _realloc_r
00049118 g       *ABS*	00000000 __bss_end
00044dd0 g     F .text	000000f0 alt_iic_isr_register
00045354 g     F .text	00000104 alt_tick
00040368 g     F .text	0000017c display_number
0004255c g     F .text	00000018 __fp_lock_all
00044d84 g     F .text	0000004c alt_ic_irq_enabled
000452bc g     F .text	00000098 alt_alarm_stop
00048fe4 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000d0 alt_irq_handler
0004631c g     O .rwdata	00000028 alt_dev_null
00044a0c g     F .text	0000001c alt_dcache_flush_all
00040288 g     F .text	000000e0 display_all_0_to_9_test_segment_mapping
0004755c g       *ABS*	00000000 __ram_rwdata_end
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
0004753c g     O .rwdata	00000008 alt_dev_list
00043b74 g     F .text	00000100 write
00045af0 g       *ABS*	00000000 __ram_rodata_end
000433f4 g     F .text	000000b8 fstat
00040700 g     F .text	00000008 .hidden __umodsi3
00049118 g       *ABS*	00000000 end
00043e8c g     F .text	000000c4 altera_avalon_jtag_uart_init
00045a94 g       *ABS*	00000000 __CTOR_LIST__
00070d40 g       *ABS*	00000000 __alt_stack_pointer
0004455c g     F .text	00000218 altera_avalon_jtag_uart_write
0004254c g     F .text	00000004 __sfp_lock_acquire
000414e0 g     F .text	000000e8 memchr
000426b0 g     F .text	000002f0 _free_r
000458cc g     F .text	00000194 __call_exitprocs
0004752c g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	0000003c _start
00048fe8 g     O .bss	00000004 _alt_tick_rate
00048fec g     O .bss	00000004 _alt_nticks
000438c0 g     F .text	00000104 read
00043ce0 g     F .text	00000048 alt_sys_init
000457b8 g     F .text	00000114 __register_exitproc
000441fc g     F .text	00000068 altera_avalon_jtag_uart_close
00040708 g     F .text	00000028 .hidden __mulsi3
00045af0 g       *ABS*	00000000 __ram_rwdata_start
00045a94 g       *ABS*	00000000 __ram_rodata_start
00048ff0 g     O .bss	00000028 __malloc_current_mallinfo
00043d28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0004561c g     F .text	000000d4 alt_get_fd
000448b4 g     F .text	00000158 alt_busy_sleep
0004022c g     F .text	0000005c turn_off_all
00042f84 g     F .text	00000054 _close_r
0004573c g     F .text	0000007c memcmp
00043de8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049118 g       *ABS*	00000000 __alt_stack_base
00043e38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041e50 g     F .text	00000130 __swsetup_r
0004240c g     F .text	00000118 __sfp
00045f14 g     O .rwdata	00000408 __malloc_av_
00042558 g     F .text	00000004 __sinit_lock_release
00042dec g     F .text	00000054 __sread
00045508 g     F .text	00000114 alt_find_file
00044a78 g     F .text	000000a4 alt_dev_llist_insert
00043830 g     F .text	00000020 __malloc_lock
00043a44 g     F .text	000000b0 sbrk
00041f80 g     F .text	00000228 _fflush_r
00048fc8 g       *ABS*	00000000 __bss_start
00042cc8 g     F .text	00000124 memset
000405b4 g     F .text	00000028 main
00048fe0 g     O .bss	00000004 alt_envp
00048fc8 g     O .bss	00000004 __malloc_max_total_mem
00043d88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040538 g     F .text	0000007c buttons
00042f20 g     F .text	00000008 __sclose
00070d40 g       *ABS*	00000000 __alt_heap_limit
000430d8 g     F .text	00000014 fclose
00040d38 g     F .text	000007a8 _malloc_r
00047548 g     O .rwdata	00000004 alt_errno
000429a0 g     F .text	000000b8 _fwalk
00040648 g     F .text	00000054 .hidden __divsi3
0004258c g     F .text	00000124 _malloc_trim_r
00045a94 g       *ABS*	00000000 __CTOR_END__
00045a94 g       *ABS*	00000000 __flash_rodata_start
00045a94 g       *ABS*	00000000 __DTOR_LIST__
00043cac g     F .text	00000034 alt_irq_init
000439c4 g     F .text	00000080 alt_release_fd
000456f0 g     F .text	00000014 atexit
00042f28 g     F .text	0000005c _write_r
00047528 g     O .rwdata	00000004 _impure_ptr
00048fd8 g     O .bss	00000004 alt_argc
00044b78 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000404e4 g     F .text	00000054 counter_0_to_9999_and_display_on_7seg
00042574 g     F .text	00000018 __fp_unlock_all
00047534 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044bf0 g     F .text	00000050 alt_ic_isr_register
0004755c g       *ABS*	00000000 _edata
00049118 g       *ABS*	00000000 _end
000401bc g       *ABS*	00000000 __ram_exceptions_end
00044264 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00044ce0 g     F .text	000000a4 alt_ic_irq_disable
00042e48 g     F .text	0000007c __swrite
00047530 g     O .rwdata	00000004 __malloc_trim_threshold
00045458 g     F .text	00000020 altera_nios2_qsys_irq_init
00045704 g     F .text	00000038 exit
00042a58 g     F .text	000000b8 _fwalk_reent
0004069c g     F .text	0000005c .hidden __modsi3
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00042550 g     F .text	00000004 __sfp_lock_release
00045a60 g     F .text	00000034 _exit
00044774 g     F .text	00000140 alt_alarm_start
00042b10 g     F .text	000001b8 __smakebuf_r
000407fc g     F .text	00000098 strlen
0004515c g     F .text	00000160 open
00044bd4 g     F .text	0000001c alt_icache_flush_all
00047550 g     O .rwdata	00000004 alt_priority_mask
00044c40 g     F .text	000000a0 alt_ic_irq_enable
00047554 g     O .rwdata	00000008 alt_alarm_list
00044b1c g     F .text	0000005c _do_ctors
000432a0 g     F .text	000000d8 close
0004360c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00042554 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406f14 	ori	at,at,444
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	10a40604 	addi	r2,r2,-28648
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	10a40604 	addi	r2,r2,-28648
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffcf3dc>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffcf3d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401bc:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401c0:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
   401c4:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401c8:	d6bd4914 	ori	gp,gp,62756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401cc:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401d0:	10a3f214 	ori	r2,r2,36808

    movhi r3, %hi(__bss_end)
   401d4:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401d8:	18e44614 	ori	r3,r3,37144

    beq r2, r3, 1f
   401dc:	10c00326 	beq	r2,r3,401ec <_start+0x30>

0:
    stw zero, (r2)
   401e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e8:	10fffd36 	bltu	r2,r3,401e0 <__alt_data_end+0xfffcf4a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401ec:	004360c0 	call	4360c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f0:	00437b80 	call	437b8 <alt_main>

000401f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f4:	003fff06 	br	401f4 <__alt_data_end+0xfffcf4b4>

000401f8 <set_led>:
#include <stdio.h>
#include "stdint.h" // for uint8_t ... etc
#include "system.h"
#include <unistd.h> // for usleep

void set_led(unsigned char led_pattern){
   401f8:	defffe04 	addi	sp,sp,-8
   401fc:	df000115 	stw	fp,4(sp)
   40200:	df000104 	addi	fp,sp,4
   40204:	2005883a 	mov	r2,r4
   40208:	e0bfff05 	stb	r2,-4(fp)
	IOWR(LED_BASE,0, led_pattern);
   4020c:	e0ffff03 	ldbu	r3,-4(fp)
   40210:	00800234 	movhi	r2,8
   40214:	10842404 	addi	r2,r2,4240
   40218:	10c00035 	stwio	r3,0(r2)
}
   4021c:	e037883a 	mov	sp,fp
   40220:	df000017 	ldw	fp,0(sp)
   40224:	dec00104 	addi	sp,sp,4
   40228:	f800283a 	ret

0004022c <turn_off_all>:
    0b10010000, // 9:
    0b00000110  // E:
};

void turn_off_all()
{
   4022c:	deffff04 	addi	sp,sp,-4
   40230:	df000015 	stw	fp,0(sp)
   40234:	d839883a 	mov	fp,sp
	IOWR(SEVEN_SEG_1_BASE,0,0xFF);
   40238:	00c03fc4 	movi	r3,255
   4023c:	00800234 	movhi	r2,8
   40240:	10841c04 	addi	r2,r2,4208
   40244:	10c00035 	stwio	r3,0(r2)
	IOWR(SEVEN_SEG_2_BASE,0,0xFF);
   40248:	00c03fc4 	movi	r3,255
   4024c:	00800234 	movhi	r2,8
   40250:	10841004 	addi	r2,r2,4160
   40254:	10c00035 	stwio	r3,0(r2)
	IOWR(SEVEN_SEG_3_BASE,0,0xFF);
   40258:	00c03fc4 	movi	r3,255
   4025c:	00800234 	movhi	r2,8
   40260:	10841404 	addi	r2,r2,4176
   40264:	10c00035 	stwio	r3,0(r2)
	IOWR(SEVEN_SEG_4_BASE,0,0xFF);
   40268:	00c03fc4 	movi	r3,255
   4026c:	00800234 	movhi	r2,8
   40270:	10841804 	addi	r2,r2,4192
   40274:	10c00035 	stwio	r3,0(r2)
}
   40278:	e037883a 	mov	sp,fp
   4027c:	df000017 	ldw	fp,0(sp)
   40280:	dec00104 	addi	sp,sp,4
   40284:	f800283a 	ret

00040288 <display_all_0_to_9_test_segment_mapping>:


void display_all_0_to_9_test_segment_mapping(){ // Test function to test all segments and their pin assignation
   40288:	defffd04 	addi	sp,sp,-12
   4028c:	dfc00215 	stw	ra,8(sp)
   40290:	df000115 	stw	fp,4(sp)
   40294:	df000104 	addi	fp,sp,4
	int i;
	for(i=0; i <= 10 ; i++)
   40298:	e03fff15 	stw	zero,-4(fp)
   4029c:	00002a06 	br	40348 <display_all_0_to_9_test_segment_mapping+0xc0>
	{
		IOWR(SEVEN_SEG_1_BASE,0,segment_mapping[i]);
   402a0:	00800134 	movhi	r2,4
   402a4:	1096a504 	addi	r2,r2,23188
   402a8:	e0ffff17 	ldw	r3,-4(fp)
   402ac:	10c5883a 	add	r2,r2,r3
   402b0:	10800003 	ldbu	r2,0(r2)
   402b4:	10c03fcc 	andi	r3,r2,255
   402b8:	00800234 	movhi	r2,8
   402bc:	10841c04 	addi	r2,r2,4208
   402c0:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_2_BASE,0,segment_mapping[i]);
   402c4:	00800134 	movhi	r2,4
   402c8:	1096a504 	addi	r2,r2,23188
   402cc:	e0ffff17 	ldw	r3,-4(fp)
   402d0:	10c5883a 	add	r2,r2,r3
   402d4:	10800003 	ldbu	r2,0(r2)
   402d8:	10c03fcc 	andi	r3,r2,255
   402dc:	00800234 	movhi	r2,8
   402e0:	10841004 	addi	r2,r2,4160
   402e4:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_3_BASE,0,segment_mapping[i]);
   402e8:	00800134 	movhi	r2,4
   402ec:	1096a504 	addi	r2,r2,23188
   402f0:	e0ffff17 	ldw	r3,-4(fp)
   402f4:	10c5883a 	add	r2,r2,r3
   402f8:	10800003 	ldbu	r2,0(r2)
   402fc:	10c03fcc 	andi	r3,r2,255
   40300:	00800234 	movhi	r2,8
   40304:	10841404 	addi	r2,r2,4176
   40308:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_4_BASE,0,segment_mapping[i]);
   4030c:	00800134 	movhi	r2,4
   40310:	1096a504 	addi	r2,r2,23188
   40314:	e0ffff17 	ldw	r3,-4(fp)
   40318:	10c5883a 	add	r2,r2,r3
   4031c:	10800003 	ldbu	r2,0(r2)
   40320:	10c03fcc 	andi	r3,r2,255
   40324:	00800234 	movhi	r2,8
   40328:	10841804 	addi	r2,r2,4192
   4032c:	10c00035 	stwio	r3,0(r2)
		usleep(500000);
   40330:	01000234 	movhi	r4,8
   40334:	21284804 	addi	r4,r4,-24288
   40338:	0043af40 	call	43af4 <usleep>
}


void display_all_0_to_9_test_segment_mapping(){ // Test function to test all segments and their pin assignation
	int i;
	for(i=0; i <= 10 ; i++)
   4033c:	e0bfff17 	ldw	r2,-4(fp)
   40340:	10800044 	addi	r2,r2,1
   40344:	e0bfff15 	stw	r2,-4(fp)
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	108002d0 	cmplti	r2,r2,11
   40350:	103fd31e 	bne	r2,zero,402a0 <__alt_data_end+0xfffcf560>
		IOWR(SEVEN_SEG_2_BASE,0,segment_mapping[i]);
		IOWR(SEVEN_SEG_3_BASE,0,segment_mapping[i]);
		IOWR(SEVEN_SEG_4_BASE,0,segment_mapping[i]);
		usleep(500000);
	}
}
   40354:	e037883a 	mov	sp,fp
   40358:	dfc00117 	ldw	ra,4(sp)
   4035c:	df000017 	ldw	fp,0(sp)
   40360:	dec00204 	addi	sp,sp,8
   40364:	f800283a 	ret

00040368 <display_number>:


void display_number(int number) // Function that takes a number in argument and displays it on 4 : 7 segs. must be less then 9999.
{
   40368:	defffb04 	addi	sp,sp,-20
   4036c:	dfc00415 	stw	ra,16(sp)
   40370:	df000315 	stw	fp,12(sp)
   40374:	df000304 	addi	fp,sp,12
   40378:	e13fff15 	stw	r4,-4(fp)
	int _number = number;
   4037c:	e0bfff17 	ldw	r2,-4(fp)
   40380:	e0bffd15 	stw	r2,-12(fp)
	if(_number >= 10000) // If the number is too big for 4*7seg
   40384:	e0bffd17 	ldw	r2,-12(fp)
   40388:	1089c410 	cmplti	r2,r2,10000
   4038c:	1000031e 	bne	r2,zero,4039c <display_number+0x34>
	{
		_number = 10;
   40390:	00800284 	movi	r2,10
   40394:	e0bffd15 	stw	r2,-12(fp)
   40398:	00004d06 	br	404d0 <display_number+0x168>

	}else{
		// calculate M, C, D and U
		uint8_t M = (number/1000);
   4039c:	e0bfff17 	ldw	r2,-4(fp)
   403a0:	1009883a 	mov	r4,r2
   403a4:	0140fa04 	movi	r5,1000
   403a8:	00406480 	call	40648 <__divsi3>
   403ac:	e0bffe05 	stb	r2,-8(fp)
		_number -= M*1000;
   403b0:	e0bffe03 	ldbu	r2,-8(fp)
   403b4:	1009883a 	mov	r4,r2
   403b8:	017f0604 	movi	r5,-1000
   403bc:	00407080 	call	40708 <__mulsi3>
   403c0:	1007883a 	mov	r3,r2
   403c4:	e0bffd17 	ldw	r2,-12(fp)
   403c8:	10c5883a 	add	r2,r2,r3
   403cc:	e0bffd15 	stw	r2,-12(fp)
		//printf("%d \n", M);

		uint8_t C = (_number/100);
   403d0:	e0bffd17 	ldw	r2,-12(fp)
   403d4:	1009883a 	mov	r4,r2
   403d8:	01401904 	movi	r5,100
   403dc:	00406480 	call	40648 <__divsi3>
   403e0:	e0bffe45 	stb	r2,-7(fp)
		_number -= C*100;
   403e4:	e0bffe43 	ldbu	r2,-7(fp)
   403e8:	1009883a 	mov	r4,r2
   403ec:	017fe704 	movi	r5,-100
   403f0:	00407080 	call	40708 <__mulsi3>
   403f4:	1007883a 	mov	r3,r2
   403f8:	e0bffd17 	ldw	r2,-12(fp)
   403fc:	10c5883a 	add	r2,r2,r3
   40400:	e0bffd15 	stw	r2,-12(fp)
		//printf("%d \n", C);

		uint8_t D = (_number/10);
   40404:	e0bffd17 	ldw	r2,-12(fp)
   40408:	1009883a 	mov	r4,r2
   4040c:	01400284 	movi	r5,10
   40410:	00406480 	call	40648 <__divsi3>
   40414:	e0bffe85 	stb	r2,-6(fp)
		_number -= D*10;
   40418:	e0bffe83 	ldbu	r2,-6(fp)
   4041c:	1009883a 	mov	r4,r2
   40420:	017ffd84 	movi	r5,-10
   40424:	00407080 	call	40708 <__mulsi3>
   40428:	1007883a 	mov	r3,r2
   4042c:	e0bffd17 	ldw	r2,-12(fp)
   40430:	10c5883a 	add	r2,r2,r3
   40434:	e0bffd15 	stw	r2,-12(fp)
		//printf("%d \n", D);

		uint8_t U = _number/1;
   40438:	e0bffd17 	ldw	r2,-12(fp)
   4043c:	e0bffec5 	stb	r2,-5(fp)
		//printf("%d \n", U);

		// write M, C, D and U
		IOWR(SEVEN_SEG_1_BASE,0,segment_mapping[M]);
   40440:	e0fffe03 	ldbu	r3,-8(fp)
   40444:	00800134 	movhi	r2,4
   40448:	1096a504 	addi	r2,r2,23188
   4044c:	10c5883a 	add	r2,r2,r3
   40450:	10800003 	ldbu	r2,0(r2)
   40454:	10c03fcc 	andi	r3,r2,255
   40458:	00800234 	movhi	r2,8
   4045c:	10841c04 	addi	r2,r2,4208
   40460:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_2_BASE,0,segment_mapping[C]);
   40464:	e0fffe43 	ldbu	r3,-7(fp)
   40468:	00800134 	movhi	r2,4
   4046c:	1096a504 	addi	r2,r2,23188
   40470:	10c5883a 	add	r2,r2,r3
   40474:	10800003 	ldbu	r2,0(r2)
   40478:	10c03fcc 	andi	r3,r2,255
   4047c:	00800234 	movhi	r2,8
   40480:	10841004 	addi	r2,r2,4160
   40484:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_3_BASE,0,segment_mapping[D]);
   40488:	e0fffe83 	ldbu	r3,-6(fp)
   4048c:	00800134 	movhi	r2,4
   40490:	1096a504 	addi	r2,r2,23188
   40494:	10c5883a 	add	r2,r2,r3
   40498:	10800003 	ldbu	r2,0(r2)
   4049c:	10c03fcc 	andi	r3,r2,255
   404a0:	00800234 	movhi	r2,8
   404a4:	10841404 	addi	r2,r2,4176
   404a8:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEG_4_BASE,0,segment_mapping[U]);
   404ac:	e0fffec3 	ldbu	r3,-5(fp)
   404b0:	00800134 	movhi	r2,4
   404b4:	1096a504 	addi	r2,r2,23188
   404b8:	10c5883a 	add	r2,r2,r3
   404bc:	10800003 	ldbu	r2,0(r2)
   404c0:	10c03fcc 	andi	r3,r2,255
   404c4:	00800234 	movhi	r2,8
   404c8:	10841804 	addi	r2,r2,4192
   404cc:	10c00035 	stwio	r3,0(r2)
	}
}
   404d0:	e037883a 	mov	sp,fp
   404d4:	dfc00117 	ldw	ra,4(sp)
   404d8:	df000017 	ldw	fp,0(sp)
   404dc:	dec00204 	addi	sp,sp,8
   404e0:	f800283a 	ret

000404e4 <counter_0_to_9999_and_display_on_7seg>:


void counter_0_to_9999_and_display_on_7seg()
{
   404e4:	defffd04 	addi	sp,sp,-12
   404e8:	dfc00215 	stw	ra,8(sp)
   404ec:	df000115 	stw	fp,4(sp)
   404f0:	df000104 	addi	fp,sp,4
	int i;
	for(i = 0; i<=9999 ; i=i+3)
   404f4:	e03fff15 	stw	zero,-4(fp)
   404f8:	00000706 	br	40518 <counter_0_to_9999_and_display_on_7seg+0x34>
	{
		display_number(i);
   404fc:	e13fff17 	ldw	r4,-4(fp)
   40500:	00403680 	call	40368 <display_number>
		usleep(10000);
   40504:	0109c404 	movi	r4,10000
   40508:	0043af40 	call	43af4 <usleep>


void counter_0_to_9999_and_display_on_7seg()
{
	int i;
	for(i = 0; i<=9999 ; i=i+3)
   4050c:	e0bfff17 	ldw	r2,-4(fp)
   40510:	108000c4 	addi	r2,r2,3
   40514:	e0bfff15 	stw	r2,-4(fp)
   40518:	e0bfff17 	ldw	r2,-4(fp)
   4051c:	1089c410 	cmplti	r2,r2,10000
   40520:	103ff61e 	bne	r2,zero,404fc <__alt_data_end+0xfffcf7bc>
	{
		display_number(i);
		usleep(10000);
	}
}
   40524:	e037883a 	mov	sp,fp
   40528:	dfc00117 	ldw	ra,4(sp)
   4052c:	df000017 	ldw	fp,0(sp)
   40530:	dec00204 	addi	sp,sp,8
   40534:	f800283a 	ret

00040538 <buttons>:

void buttons(){
   40538:	deffff04 	addi	sp,sp,-4
   4053c:	df000015 	stw	fp,0(sp)
   40540:	d839883a 	mov	fp,sp
	if(IORD(SWITCHER_BASE, 0)==1)
   40544:	00800234 	movhi	r2,8
   40548:	10842004 	addi	r2,r2,4224
   4054c:	10800037 	ldwio	r2,0(r2)
   40550:	10800058 	cmpnei	r2,r2,1
   40554:	1000051e 	bne	r2,zero,4056c <buttons+0x34>
	{
		IOWR(LED_BASE, 0, 0xAA5);
   40558:	00c2a944 	movi	r3,2725
   4055c:	00800234 	movhi	r2,8
   40560:	10842404 	addi	r2,r2,4240
   40564:	10c00035 	stwio	r3,0(r2)
   40568:	00000e06 	br	405a4 <buttons+0x6c>

	}else if(IORD(SWITCHER_BASE, 0)==2)
   4056c:	00800234 	movhi	r2,8
   40570:	10842004 	addi	r2,r2,4224
   40574:	10800037 	ldwio	r2,0(r2)
   40578:	10800098 	cmpnei	r2,r2,2
   4057c:	1000051e 	bne	r2,zero,40594 <buttons+0x5c>
	{
		IOWR(LED_BASE, 0, 0xFF);
   40580:	00c03fc4 	movi	r3,255
   40584:	00800234 	movhi	r2,8
   40588:	10842404 	addi	r2,r2,4240
   4058c:	10c00035 	stwio	r3,0(r2)
   40590:	00000406 	br	405a4 <buttons+0x6c>
	} else
	{
		IOWR(LED_BASE, 0, 0x00);
   40594:	0007883a 	mov	r3,zero
   40598:	00800234 	movhi	r2,8
   4059c:	10842404 	addi	r2,r2,4240
   405a0:	10c00035 	stwio	r3,0(r2)
	}
}
   405a4:	e037883a 	mov	sp,fp
   405a8:	df000017 	ldw	fp,0(sp)
   405ac:	dec00104 	addi	sp,sp,4
   405b0:	f800283a 	ret

000405b4 <main>:
  ((byte) & 0x02 ? '1' : '0'), \
  ((byte) & 0x01 ? '1' : '0')



int main(){
   405b4:	defffe04 	addi	sp,sp,-8
   405b8:	dfc00115 	stw	ra,4(sp)
   405bc:	df000015 	stw	fp,0(sp)
   405c0:	d839883a 	mov	fp,sp
	//turn_off_all();
	//counter_0_to_9999_and_display_on_7seg();
	buttons();
   405c4:	00405380 	call	40538 <buttons>
	printf("PROJET_Co_Design \n");
   405c8:	01000134 	movhi	r4,4
   405cc:	2116a804 	addi	r4,r4,23200
   405d0:	00407e80 	call	407e8 <puts>
		uint8_t uni = IORD(UNITES_BASE,0);
		uint8_t cen = IORD(CENTAINES_BASE,0);
		uint8_t mil = IORD(MILLIERS_BASE,0);
		printf(" \n%d %d %d %d \n", diz, uni, cen, mil);
		*/
		buttons();
   405d4:	00405380 	call	40538 <buttons>
	}
   405d8:	003ffe06 	br	405d4 <__alt_data_end+0xfffcf894>

000405dc <udivmodsi4>:
   405dc:	2900182e 	bgeu	r5,r4,40640 <udivmodsi4+0x64>
   405e0:	28001716 	blt	r5,zero,40640 <udivmodsi4+0x64>
   405e4:	00800804 	movi	r2,32
   405e8:	00c00044 	movi	r3,1
   405ec:	00000206 	br	405f8 <udivmodsi4+0x1c>
   405f0:	10001126 	beq	r2,zero,40638 <udivmodsi4+0x5c>
   405f4:	28000516 	blt	r5,zero,4060c <udivmodsi4+0x30>
   405f8:	294b883a 	add	r5,r5,r5
   405fc:	10bfffc4 	addi	r2,r2,-1
   40600:	18c7883a 	add	r3,r3,r3
   40604:	293ffa36 	bltu	r5,r4,405f0 <__alt_data_end+0xfffcf8b0>
   40608:	18000b26 	beq	r3,zero,40638 <udivmodsi4+0x5c>
   4060c:	0005883a 	mov	r2,zero
   40610:	21400236 	bltu	r4,r5,4061c <udivmodsi4+0x40>
   40614:	2149c83a 	sub	r4,r4,r5
   40618:	10c4b03a 	or	r2,r2,r3
   4061c:	1806d07a 	srli	r3,r3,1
   40620:	280ad07a 	srli	r5,r5,1
   40624:	183ffa1e 	bne	r3,zero,40610 <__alt_data_end+0xfffcf8d0>
   40628:	3000011e 	bne	r6,zero,40630 <udivmodsi4+0x54>
   4062c:	f800283a 	ret
   40630:	2005883a 	mov	r2,r4
   40634:	f800283a 	ret
   40638:	0005883a 	mov	r2,zero
   4063c:	003ffa06 	br	40628 <__alt_data_end+0xfffcf8e8>
   40640:	00c00044 	movi	r3,1
   40644:	003ff106 	br	4060c <__alt_data_end+0xfffcf8cc>

00040648 <__divsi3>:
   40648:	defffe04 	addi	sp,sp,-8
   4064c:	dfc00115 	stw	ra,4(sp)
   40650:	dc000015 	stw	r16,0(sp)
   40654:	20000b16 	blt	r4,zero,40684 <__divsi3+0x3c>
   40658:	0021883a 	mov	r16,zero
   4065c:	28000c16 	blt	r5,zero,40690 <__divsi3+0x48>
   40660:	000d883a 	mov	r6,zero
   40664:	00405dc0 	call	405dc <udivmodsi4>
   40668:	0407c83a 	sub	r3,zero,r16
   4066c:	1884f03a 	xor	r2,r3,r2
   40670:	1405883a 	add	r2,r2,r16
   40674:	dfc00117 	ldw	ra,4(sp)
   40678:	dc000017 	ldw	r16,0(sp)
   4067c:	dec00204 	addi	sp,sp,8
   40680:	f800283a 	ret
   40684:	0109c83a 	sub	r4,zero,r4
   40688:	04000044 	movi	r16,1
   4068c:	283ff40e 	bge	r5,zero,40660 <__alt_data_end+0xfffcf920>
   40690:	014bc83a 	sub	r5,zero,r5
   40694:	8400005c 	xori	r16,r16,1
   40698:	003ff106 	br	40660 <__alt_data_end+0xfffcf920>

0004069c <__modsi3>:
   4069c:	defffd04 	addi	sp,sp,-12
   406a0:	dfc00215 	stw	ra,8(sp)
   406a4:	dc400115 	stw	r17,4(sp)
   406a8:	dc000015 	stw	r16,0(sp)
   406ac:	20000c16 	blt	r4,zero,406e0 <__modsi3+0x44>
   406b0:	0023883a 	mov	r17,zero
   406b4:	0021883a 	mov	r16,zero
   406b8:	28000d16 	blt	r5,zero,406f0 <__modsi3+0x54>
   406bc:	01800044 	movi	r6,1
   406c0:	00405dc0 	call	405dc <udivmodsi4>
   406c4:	1404f03a 	xor	r2,r2,r16
   406c8:	8885883a 	add	r2,r17,r2
   406cc:	dfc00217 	ldw	ra,8(sp)
   406d0:	dc400117 	ldw	r17,4(sp)
   406d4:	dc000017 	ldw	r16,0(sp)
   406d8:	dec00304 	addi	sp,sp,12
   406dc:	f800283a 	ret
   406e0:	0109c83a 	sub	r4,zero,r4
   406e4:	04400044 	movi	r17,1
   406e8:	043fffc4 	movi	r16,-1
   406ec:	283ff30e 	bge	r5,zero,406bc <__alt_data_end+0xfffcf97c>
   406f0:	014bc83a 	sub	r5,zero,r5
   406f4:	003ff106 	br	406bc <__alt_data_end+0xfffcf97c>

000406f8 <__udivsi3>:
   406f8:	000d883a 	mov	r6,zero
   406fc:	00405dc1 	jmpi	405dc <udivmodsi4>

00040700 <__umodsi3>:
   40700:	01800044 	movi	r6,1
   40704:	00405dc1 	jmpi	405dc <udivmodsi4>

00040708 <__mulsi3>:
   40708:	0005883a 	mov	r2,zero
   4070c:	20000726 	beq	r4,zero,4072c <__mulsi3+0x24>
   40710:	20c0004c 	andi	r3,r4,1
   40714:	2008d07a 	srli	r4,r4,1
   40718:	18000126 	beq	r3,zero,40720 <__mulsi3+0x18>
   4071c:	1145883a 	add	r2,r2,r5
   40720:	294b883a 	add	r5,r5,r5
   40724:	203ffa1e 	bne	r4,zero,40710 <__alt_data_end+0xfffcf9d0>
   40728:	f800283a 	ret
   4072c:	f800283a 	ret

00040730 <_puts_r>:
   40730:	defff604 	addi	sp,sp,-40
   40734:	dc000715 	stw	r16,28(sp)
   40738:	2021883a 	mov	r16,r4
   4073c:	2809883a 	mov	r4,r5
   40740:	dc400815 	stw	r17,32(sp)
   40744:	dfc00915 	stw	ra,36(sp)
   40748:	2823883a 	mov	r17,r5
   4074c:	00407fc0 	call	407fc <strlen>
   40750:	00c00134 	movhi	r3,4
   40754:	18dd4a04 	addi	r3,r3,29992
   40758:	18c00017 	ldw	r3,0(r3)
   4075c:	11000044 	addi	r4,r2,1
   40760:	d8800115 	stw	r2,4(sp)
   40764:	18c00217 	ldw	r3,8(r3)
   40768:	01400134 	movhi	r5,4
   4076c:	2956ad04 	addi	r5,r5,23220
   40770:	1880030b 	ldhu	r2,12(r3)
   40774:	d9400215 	stw	r5,8(sp)
   40778:	d9000615 	stw	r4,24(sp)
   4077c:	01400044 	movi	r5,1
   40780:	01000084 	movi	r4,2
   40784:	d9000515 	stw	r4,20(sp)
   40788:	dc400015 	stw	r17,0(sp)
   4078c:	d9400315 	stw	r5,12(sp)
   40790:	dec00415 	stw	sp,16(sp)
   40794:	1108000c 	andi	r4,r2,8192
   40798:	2000061e 	bne	r4,zero,407b4 <_puts_r+0x84>
   4079c:	19401917 	ldw	r5,100(r3)
   407a0:	0137ffc4 	movi	r4,-8193
   407a4:	10880014 	ori	r2,r2,8192
   407a8:	2908703a 	and	r4,r5,r4
   407ac:	1880030d 	sth	r2,12(r3)
   407b0:	19001915 	stw	r4,100(r3)
   407b4:	81400217 	ldw	r5,8(r16)
   407b8:	8009883a 	mov	r4,r16
   407bc:	d9800404 	addi	r6,sp,16
   407c0:	00408940 	call	40894 <__sfvwrite_r>
   407c4:	1000061e 	bne	r2,zero,407e0 <_puts_r+0xb0>
   407c8:	00800284 	movi	r2,10
   407cc:	dfc00917 	ldw	ra,36(sp)
   407d0:	dc400817 	ldw	r17,32(sp)
   407d4:	dc000717 	ldw	r16,28(sp)
   407d8:	dec00a04 	addi	sp,sp,40
   407dc:	f800283a 	ret
   407e0:	00bfffc4 	movi	r2,-1
   407e4:	003ff906 	br	407cc <__alt_data_end+0xfffcfa8c>

000407e8 <puts>:
   407e8:	00800134 	movhi	r2,4
   407ec:	109d4a04 	addi	r2,r2,29992
   407f0:	200b883a 	mov	r5,r4
   407f4:	11000017 	ldw	r4,0(r2)
   407f8:	00407301 	jmpi	40730 <_puts_r>

000407fc <strlen>:
   407fc:	208000cc 	andi	r2,r4,3
   40800:	10002026 	beq	r2,zero,40884 <strlen+0x88>
   40804:	20800007 	ldb	r2,0(r4)
   40808:	10002026 	beq	r2,zero,4088c <strlen+0x90>
   4080c:	2005883a 	mov	r2,r4
   40810:	00000206 	br	4081c <strlen+0x20>
   40814:	10c00007 	ldb	r3,0(r2)
   40818:	18001826 	beq	r3,zero,4087c <strlen+0x80>
   4081c:	10800044 	addi	r2,r2,1
   40820:	10c000cc 	andi	r3,r2,3
   40824:	183ffb1e 	bne	r3,zero,40814 <__alt_data_end+0xfffcfad4>
   40828:	10c00017 	ldw	r3,0(r2)
   4082c:	01ffbff4 	movhi	r7,65279
   40830:	39ffbfc4 	addi	r7,r7,-257
   40834:	00ca303a 	nor	r5,zero,r3
   40838:	01a02074 	movhi	r6,32897
   4083c:	19c7883a 	add	r3,r3,r7
   40840:	31a02004 	addi	r6,r6,-32640
   40844:	1946703a 	and	r3,r3,r5
   40848:	1986703a 	and	r3,r3,r6
   4084c:	1800091e 	bne	r3,zero,40874 <strlen+0x78>
   40850:	10800104 	addi	r2,r2,4
   40854:	10c00017 	ldw	r3,0(r2)
   40858:	19cb883a 	add	r5,r3,r7
   4085c:	00c6303a 	nor	r3,zero,r3
   40860:	28c6703a 	and	r3,r5,r3
   40864:	1986703a 	and	r3,r3,r6
   40868:	183ff926 	beq	r3,zero,40850 <__alt_data_end+0xfffcfb10>
   4086c:	00000106 	br	40874 <strlen+0x78>
   40870:	10800044 	addi	r2,r2,1
   40874:	10c00007 	ldb	r3,0(r2)
   40878:	183ffd1e 	bne	r3,zero,40870 <__alt_data_end+0xfffcfb30>
   4087c:	1105c83a 	sub	r2,r2,r4
   40880:	f800283a 	ret
   40884:	2005883a 	mov	r2,r4
   40888:	003fe706 	br	40828 <__alt_data_end+0xfffcfae8>
   4088c:	0005883a 	mov	r2,zero
   40890:	f800283a 	ret

00040894 <__sfvwrite_r>:
   40894:	30800217 	ldw	r2,8(r6)
   40898:	10004526 	beq	r2,zero,409b0 <__sfvwrite_r+0x11c>
   4089c:	28c0030b 	ldhu	r3,12(r5)
   408a0:	defff404 	addi	sp,sp,-48
   408a4:	dd400715 	stw	r21,28(sp)
   408a8:	dcc00515 	stw	r19,20(sp)
   408ac:	dc000215 	stw	r16,8(sp)
   408b0:	dfc00b15 	stw	ra,44(sp)
   408b4:	df000a15 	stw	fp,40(sp)
   408b8:	ddc00915 	stw	r23,36(sp)
   408bc:	dd800815 	stw	r22,32(sp)
   408c0:	dd000615 	stw	r20,24(sp)
   408c4:	dc800415 	stw	r18,16(sp)
   408c8:	dc400315 	stw	r17,12(sp)
   408cc:	1880020c 	andi	r2,r3,8
   408d0:	2821883a 	mov	r16,r5
   408d4:	202b883a 	mov	r21,r4
   408d8:	3027883a 	mov	r19,r6
   408dc:	10002526 	beq	r2,zero,40974 <__sfvwrite_r+0xe0>
   408e0:	28800417 	ldw	r2,16(r5)
   408e4:	10002326 	beq	r2,zero,40974 <__sfvwrite_r+0xe0>
   408e8:	1880008c 	andi	r2,r3,2
   408ec:	9c400017 	ldw	r17,0(r19)
   408f0:	10003126 	beq	r2,zero,409b8 <__sfvwrite_r+0x124>
   408f4:	0029883a 	mov	r20,zero
   408f8:	0025883a 	mov	r18,zero
   408fc:	05810004 	movi	r22,1024
   40900:	a00d883a 	mov	r6,r20
   40904:	a809883a 	mov	r4,r21
   40908:	90002526 	beq	r18,zero,409a0 <__sfvwrite_r+0x10c>
   4090c:	900f883a 	mov	r7,r18
   40910:	81400717 	ldw	r5,28(r16)
   40914:	b480012e 	bgeu	r22,r18,4091c <__sfvwrite_r+0x88>
   40918:	01c10004 	movi	r7,1024
   4091c:	80800917 	ldw	r2,36(r16)
   40920:	103ee83a 	callr	r2
   40924:	0080510e 	bge	zero,r2,40a6c <__sfvwrite_r+0x1d8>
   40928:	98c00217 	ldw	r3,8(r19)
   4092c:	a0a9883a 	add	r20,r20,r2
   40930:	90a5c83a 	sub	r18,r18,r2
   40934:	1885c83a 	sub	r2,r3,r2
   40938:	98800215 	stw	r2,8(r19)
   4093c:	103ff01e 	bne	r2,zero,40900 <__alt_data_end+0xfffcfbc0>
   40940:	0005883a 	mov	r2,zero
   40944:	dfc00b17 	ldw	ra,44(sp)
   40948:	df000a17 	ldw	fp,40(sp)
   4094c:	ddc00917 	ldw	r23,36(sp)
   40950:	dd800817 	ldw	r22,32(sp)
   40954:	dd400717 	ldw	r21,28(sp)
   40958:	dd000617 	ldw	r20,24(sp)
   4095c:	dcc00517 	ldw	r19,20(sp)
   40960:	dc800417 	ldw	r18,16(sp)
   40964:	dc400317 	ldw	r17,12(sp)
   40968:	dc000217 	ldw	r16,8(sp)
   4096c:	dec00c04 	addi	sp,sp,48
   40970:	f800283a 	ret
   40974:	a809883a 	mov	r4,r21
   40978:	800b883a 	mov	r5,r16
   4097c:	0041e500 	call	41e50 <__swsetup_r>
   40980:	80c0030b 	ldhu	r3,12(r16)
   40984:	103fd826 	beq	r2,zero,408e8 <__alt_data_end+0xfffcfba8>
   40988:	18c01014 	ori	r3,r3,64
   4098c:	80c0030d 	sth	r3,12(r16)
   40990:	00c00244 	movi	r3,9
   40994:	00bfffc4 	movi	r2,-1
   40998:	a8c00015 	stw	r3,0(r21)
   4099c:	003fe906 	br	40944 <__alt_data_end+0xfffcfc04>
   409a0:	8d000017 	ldw	r20,0(r17)
   409a4:	8c800117 	ldw	r18,4(r17)
   409a8:	8c400204 	addi	r17,r17,8
   409ac:	003fd406 	br	40900 <__alt_data_end+0xfffcfbc0>
   409b0:	0005883a 	mov	r2,zero
   409b4:	f800283a 	ret
   409b8:	1880004c 	andi	r2,r3,1
   409bc:	1000301e 	bne	r2,zero,40a80 <__sfvwrite_r+0x1ec>
   409c0:	002f883a 	mov	r23,zero
   409c4:	0025883a 	mov	r18,zero
   409c8:	90001c26 	beq	r18,zero,40a3c <__sfvwrite_r+0x1a8>
   409cc:	1880800c 	andi	r2,r3,512
   409d0:	85000217 	ldw	r20,8(r16)
   409d4:	10006c26 	beq	r2,zero,40b88 <__sfvwrite_r+0x2f4>
   409d8:	a02d883a 	mov	r22,r20
   409dc:	95008536 	bltu	r18,r20,40bf4 <__sfvwrite_r+0x360>
   409e0:	1881200c 	andi	r2,r3,1152
   409e4:	10009d1e 	bne	r2,zero,40c5c <__sfvwrite_r+0x3c8>
   409e8:	81000017 	ldw	r4,0(r16)
   409ec:	a039883a 	mov	fp,r20
   409f0:	9029883a 	mov	r20,r18
   409f4:	b80b883a 	mov	r5,r23
   409f8:	b00d883a 	mov	r6,r22
   409fc:	00417000 	call	41700 <memmove>
   40a00:	80c00217 	ldw	r3,8(r16)
   40a04:	81000017 	ldw	r4,0(r16)
   40a08:	9005883a 	mov	r2,r18
   40a0c:	1f39c83a 	sub	fp,r3,fp
   40a10:	258f883a 	add	r7,r4,r22
   40a14:	87000215 	stw	fp,8(r16)
   40a18:	81c00015 	stw	r7,0(r16)
   40a1c:	98c00217 	ldw	r3,8(r19)
   40a20:	b8af883a 	add	r23,r23,r2
   40a24:	90a5c83a 	sub	r18,r18,r2
   40a28:	1d05c83a 	sub	r2,r3,r20
   40a2c:	98800215 	stw	r2,8(r19)
   40a30:	103fc326 	beq	r2,zero,40940 <__alt_data_end+0xfffcfc00>
   40a34:	80c0030b 	ldhu	r3,12(r16)
   40a38:	903fe41e 	bne	r18,zero,409cc <__alt_data_end+0xfffcfc8c>
   40a3c:	8dc00017 	ldw	r23,0(r17)
   40a40:	8c800117 	ldw	r18,4(r17)
   40a44:	8c400204 	addi	r17,r17,8
   40a48:	003fdf06 	br	409c8 <__alt_data_end+0xfffcfc88>
   40a4c:	004185c0 	call	4185c <_realloc_r>
   40a50:	102d883a 	mov	r22,r2
   40a54:	1000a01e 	bne	r2,zero,40cd8 <__sfvwrite_r+0x444>
   40a58:	81400417 	ldw	r5,16(r16)
   40a5c:	a809883a 	mov	r4,r21
   40a60:	00426b00 	call	426b0 <_free_r>
   40a64:	00800304 	movi	r2,12
   40a68:	a8800015 	stw	r2,0(r21)
   40a6c:	80c0030b 	ldhu	r3,12(r16)
   40a70:	00bfffc4 	movi	r2,-1
   40a74:	18c01014 	ori	r3,r3,64
   40a78:	80c0030d 	sth	r3,12(r16)
   40a7c:	003fb106 	br	40944 <__alt_data_end+0xfffcfc04>
   40a80:	0029883a 	mov	r20,zero
   40a84:	0011883a 	mov	r8,zero
   40a88:	0039883a 	mov	fp,zero
   40a8c:	0025883a 	mov	r18,zero
   40a90:	90001f26 	beq	r18,zero,40b10 <__sfvwrite_r+0x27c>
   40a94:	40006826 	beq	r8,zero,40c38 <__sfvwrite_r+0x3a4>
   40a98:	a02f883a 	mov	r23,r20
   40a9c:	9500012e 	bgeu	r18,r20,40aa4 <__sfvwrite_r+0x210>
   40aa0:	902f883a 	mov	r23,r18
   40aa4:	81000017 	ldw	r4,0(r16)
   40aa8:	80800417 	ldw	r2,16(r16)
   40aac:	b82d883a 	mov	r22,r23
   40ab0:	81800217 	ldw	r6,8(r16)
   40ab4:	81c00517 	ldw	r7,20(r16)
   40ab8:	1100022e 	bgeu	r2,r4,40ac4 <__sfvwrite_r+0x230>
   40abc:	31c7883a 	add	r3,r6,r7
   40ac0:	1dc01816 	blt	r3,r23,40b24 <__sfvwrite_r+0x290>
   40ac4:	b9c03f16 	blt	r23,r7,40bc4 <__sfvwrite_r+0x330>
   40ac8:	80800917 	ldw	r2,36(r16)
   40acc:	81400717 	ldw	r5,28(r16)
   40ad0:	a809883a 	mov	r4,r21
   40ad4:	da000115 	stw	r8,4(sp)
   40ad8:	e00d883a 	mov	r6,fp
   40adc:	103ee83a 	callr	r2
   40ae0:	102d883a 	mov	r22,r2
   40ae4:	da000117 	ldw	r8,4(sp)
   40ae8:	00bfe00e 	bge	zero,r2,40a6c <__alt_data_end+0xfffcfd2c>
   40aec:	a5a9c83a 	sub	r20,r20,r22
   40af0:	a0001f26 	beq	r20,zero,40b70 <__sfvwrite_r+0x2dc>
   40af4:	98800217 	ldw	r2,8(r19)
   40af8:	e5b9883a 	add	fp,fp,r22
   40afc:	95a5c83a 	sub	r18,r18,r22
   40b00:	15adc83a 	sub	r22,r2,r22
   40b04:	9d800215 	stw	r22,8(r19)
   40b08:	b03f8d26 	beq	r22,zero,40940 <__alt_data_end+0xfffcfc00>
   40b0c:	903fe11e 	bne	r18,zero,40a94 <__alt_data_end+0xfffcfd54>
   40b10:	8f000017 	ldw	fp,0(r17)
   40b14:	8c800117 	ldw	r18,4(r17)
   40b18:	0011883a 	mov	r8,zero
   40b1c:	8c400204 	addi	r17,r17,8
   40b20:	003fdb06 	br	40a90 <__alt_data_end+0xfffcfd50>
   40b24:	180d883a 	mov	r6,r3
   40b28:	e00b883a 	mov	r5,fp
   40b2c:	da000115 	stw	r8,4(sp)
   40b30:	d8c00015 	stw	r3,0(sp)
   40b34:	00417000 	call	41700 <memmove>
   40b38:	d8c00017 	ldw	r3,0(sp)
   40b3c:	80800017 	ldw	r2,0(r16)
   40b40:	a809883a 	mov	r4,r21
   40b44:	800b883a 	mov	r5,r16
   40b48:	10c5883a 	add	r2,r2,r3
   40b4c:	80800015 	stw	r2,0(r16)
   40b50:	d8c00015 	stw	r3,0(sp)
   40b54:	0041f800 	call	41f80 <_fflush_r>
   40b58:	d8c00017 	ldw	r3,0(sp)
   40b5c:	da000117 	ldw	r8,4(sp)
   40b60:	103fc21e 	bne	r2,zero,40a6c <__alt_data_end+0xfffcfd2c>
   40b64:	182d883a 	mov	r22,r3
   40b68:	a5a9c83a 	sub	r20,r20,r22
   40b6c:	a03fe11e 	bne	r20,zero,40af4 <__alt_data_end+0xfffcfdb4>
   40b70:	a809883a 	mov	r4,r21
   40b74:	800b883a 	mov	r5,r16
   40b78:	0041f800 	call	41f80 <_fflush_r>
   40b7c:	103fbb1e 	bne	r2,zero,40a6c <__alt_data_end+0xfffcfd2c>
   40b80:	0011883a 	mov	r8,zero
   40b84:	003fdb06 	br	40af4 <__alt_data_end+0xfffcfdb4>
   40b88:	81000017 	ldw	r4,0(r16)
   40b8c:	80800417 	ldw	r2,16(r16)
   40b90:	1100012e 	bgeu	r2,r4,40b98 <__sfvwrite_r+0x304>
   40b94:	a4805a36 	bltu	r20,r18,40d00 <__sfvwrite_r+0x46c>
   40b98:	81c00517 	ldw	r7,20(r16)
   40b9c:	91c01a36 	bltu	r18,r7,40c08 <__sfvwrite_r+0x374>
   40ba0:	80800917 	ldw	r2,36(r16)
   40ba4:	81400717 	ldw	r5,28(r16)
   40ba8:	a809883a 	mov	r4,r21
   40bac:	b80d883a 	mov	r6,r23
   40bb0:	103ee83a 	callr	r2
   40bb4:	1029883a 	mov	r20,r2
   40bb8:	00bfac0e 	bge	zero,r2,40a6c <__alt_data_end+0xfffcfd2c>
   40bbc:	a005883a 	mov	r2,r20
   40bc0:	003f9606 	br	40a1c <__alt_data_end+0xfffcfcdc>
   40bc4:	b80d883a 	mov	r6,r23
   40bc8:	e00b883a 	mov	r5,fp
   40bcc:	da000115 	stw	r8,4(sp)
   40bd0:	00417000 	call	41700 <memmove>
   40bd4:	80800217 	ldw	r2,8(r16)
   40bd8:	80c00017 	ldw	r3,0(r16)
   40bdc:	da000117 	ldw	r8,4(sp)
   40be0:	15c5c83a 	sub	r2,r2,r23
   40be4:	1def883a 	add	r23,r3,r23
   40be8:	80800215 	stw	r2,8(r16)
   40bec:	85c00015 	stw	r23,0(r16)
   40bf0:	003fbe06 	br	40aec <__alt_data_end+0xfffcfdac>
   40bf4:	81000017 	ldw	r4,0(r16)
   40bf8:	9039883a 	mov	fp,r18
   40bfc:	9029883a 	mov	r20,r18
   40c00:	902d883a 	mov	r22,r18
   40c04:	003f7b06 	br	409f4 <__alt_data_end+0xfffcfcb4>
   40c08:	b80b883a 	mov	r5,r23
   40c0c:	900d883a 	mov	r6,r18
   40c10:	00417000 	call	41700 <memmove>
   40c14:	80c00217 	ldw	r3,8(r16)
   40c18:	80800017 	ldw	r2,0(r16)
   40c1c:	9029883a 	mov	r20,r18
   40c20:	1c87c83a 	sub	r3,r3,r18
   40c24:	1485883a 	add	r2,r2,r18
   40c28:	80800015 	stw	r2,0(r16)
   40c2c:	80c00215 	stw	r3,8(r16)
   40c30:	9005883a 	mov	r2,r18
   40c34:	003f7906 	br	40a1c <__alt_data_end+0xfffcfcdc>
   40c38:	e009883a 	mov	r4,fp
   40c3c:	01400284 	movi	r5,10
   40c40:	900d883a 	mov	r6,r18
   40c44:	00414e00 	call	414e0 <memchr>
   40c48:	10003826 	beq	r2,zero,40d2c <__sfvwrite_r+0x498>
   40c4c:	10800044 	addi	r2,r2,1
   40c50:	1729c83a 	sub	r20,r2,fp
   40c54:	02000044 	movi	r8,1
   40c58:	003f8f06 	br	40a98 <__alt_data_end+0xfffcfd58>
   40c5c:	80800517 	ldw	r2,20(r16)
   40c60:	81400417 	ldw	r5,16(r16)
   40c64:	87000017 	ldw	fp,0(r16)
   40c68:	10a9883a 	add	r20,r2,r2
   40c6c:	a085883a 	add	r2,r20,r2
   40c70:	1028d7fa 	srli	r20,r2,31
   40c74:	e179c83a 	sub	fp,fp,r5
   40c78:	e1000044 	addi	r4,fp,1
   40c7c:	a085883a 	add	r2,r20,r2
   40c80:	1029d07a 	srai	r20,r2,1
   40c84:	2485883a 	add	r2,r4,r18
   40c88:	a00d883a 	mov	r6,r20
   40c8c:	a080022e 	bgeu	r20,r2,40c98 <__sfvwrite_r+0x404>
   40c90:	1029883a 	mov	r20,r2
   40c94:	100d883a 	mov	r6,r2
   40c98:	18c1000c 	andi	r3,r3,1024
   40c9c:	a809883a 	mov	r4,r21
   40ca0:	183f6a26 	beq	r3,zero,40a4c <__alt_data_end+0xfffcfd0c>
   40ca4:	300b883a 	mov	r5,r6
   40ca8:	0040d380 	call	40d38 <_malloc_r>
   40cac:	102d883a 	mov	r22,r2
   40cb0:	103f6c26 	beq	r2,zero,40a64 <__alt_data_end+0xfffcfd24>
   40cb4:	81400417 	ldw	r5,16(r16)
   40cb8:	1009883a 	mov	r4,r2
   40cbc:	e00d883a 	mov	r6,fp
   40cc0:	00415c80 	call	415c8 <memcpy>
   40cc4:	8080030b 	ldhu	r2,12(r16)
   40cc8:	00fedfc4 	movi	r3,-1153
   40ccc:	10c4703a 	and	r2,r2,r3
   40cd0:	10802014 	ori	r2,r2,128
   40cd4:	8080030d 	sth	r2,12(r16)
   40cd8:	b709883a 	add	r4,r22,fp
   40cdc:	a707c83a 	sub	r3,r20,fp
   40ce0:	85800415 	stw	r22,16(r16)
   40ce4:	85000515 	stw	r20,20(r16)
   40ce8:	81000015 	stw	r4,0(r16)
   40cec:	9039883a 	mov	fp,r18
   40cf0:	80c00215 	stw	r3,8(r16)
   40cf4:	9029883a 	mov	r20,r18
   40cf8:	902d883a 	mov	r22,r18
   40cfc:	003f3d06 	br	409f4 <__alt_data_end+0xfffcfcb4>
   40d00:	b80b883a 	mov	r5,r23
   40d04:	a00d883a 	mov	r6,r20
   40d08:	00417000 	call	41700 <memmove>
   40d0c:	80800017 	ldw	r2,0(r16)
   40d10:	a809883a 	mov	r4,r21
   40d14:	800b883a 	mov	r5,r16
   40d18:	1505883a 	add	r2,r2,r20
   40d1c:	80800015 	stw	r2,0(r16)
   40d20:	0041f800 	call	41f80 <_fflush_r>
   40d24:	103fa526 	beq	r2,zero,40bbc <__alt_data_end+0xfffcfe7c>
   40d28:	003f5006 	br	40a6c <__alt_data_end+0xfffcfd2c>
   40d2c:	95000044 	addi	r20,r18,1
   40d30:	02000044 	movi	r8,1
   40d34:	003f5806 	br	40a98 <__alt_data_end+0xfffcfd58>

00040d38 <_malloc_r>:
   40d38:	defff504 	addi	sp,sp,-44
   40d3c:	dc800315 	stw	r18,12(sp)
   40d40:	dfc00a15 	stw	ra,40(sp)
   40d44:	df000915 	stw	fp,36(sp)
   40d48:	ddc00815 	stw	r23,32(sp)
   40d4c:	dd800715 	stw	r22,28(sp)
   40d50:	dd400615 	stw	r21,24(sp)
   40d54:	dd000515 	stw	r20,20(sp)
   40d58:	dcc00415 	stw	r19,16(sp)
   40d5c:	dc400215 	stw	r17,8(sp)
   40d60:	dc000115 	stw	r16,4(sp)
   40d64:	288002c4 	addi	r2,r5,11
   40d68:	00c00584 	movi	r3,22
   40d6c:	2025883a 	mov	r18,r4
   40d70:	18802a2e 	bgeu	r3,r2,40e1c <_malloc_r+0xe4>
   40d74:	047ffe04 	movi	r17,-8
   40d78:	1462703a 	and	r17,r2,r17
   40d7c:	88009e16 	blt	r17,zero,40ff8 <_malloc_r+0x2c0>
   40d80:	89409d36 	bltu	r17,r5,40ff8 <_malloc_r+0x2c0>
   40d84:	00438300 	call	43830 <__malloc_lock>
   40d88:	00807dc4 	movi	r2,503
   40d8c:	14402736 	bltu	r2,r17,40e2c <_malloc_r+0xf4>
   40d90:	8806d0fa 	srli	r3,r17,3
   40d94:	04c00134 	movhi	r19,4
   40d98:	9cd7c504 	addi	r19,r19,24340
   40d9c:	18c5883a 	add	r2,r3,r3
   40da0:	1085883a 	add	r2,r2,r2
   40da4:	1085883a 	add	r2,r2,r2
   40da8:	9885883a 	add	r2,r19,r2
   40dac:	14000317 	ldw	r16,12(r2)
   40db0:	80814a26 	beq	r16,r2,412dc <_malloc_r+0x5a4>
   40db4:	80c00117 	ldw	r3,4(r16)
   40db8:	81000317 	ldw	r4,12(r16)
   40dbc:	00bfff04 	movi	r2,-4
   40dc0:	1884703a 	and	r2,r3,r2
   40dc4:	81400217 	ldw	r5,8(r16)
   40dc8:	8085883a 	add	r2,r16,r2
   40dcc:	10c00117 	ldw	r3,4(r2)
   40dd0:	29000315 	stw	r4,12(r5)
   40dd4:	21400215 	stw	r5,8(r4)
   40dd8:	18c00054 	ori	r3,r3,1
   40ddc:	10c00115 	stw	r3,4(r2)
   40de0:	9009883a 	mov	r4,r18
   40de4:	00438500 	call	43850 <__malloc_unlock>
   40de8:	80800204 	addi	r2,r16,8
   40dec:	dfc00a17 	ldw	ra,40(sp)
   40df0:	df000917 	ldw	fp,36(sp)
   40df4:	ddc00817 	ldw	r23,32(sp)
   40df8:	dd800717 	ldw	r22,28(sp)
   40dfc:	dd400617 	ldw	r21,24(sp)
   40e00:	dd000517 	ldw	r20,20(sp)
   40e04:	dcc00417 	ldw	r19,16(sp)
   40e08:	dc800317 	ldw	r18,12(sp)
   40e0c:	dc400217 	ldw	r17,8(sp)
   40e10:	dc000117 	ldw	r16,4(sp)
   40e14:	dec00b04 	addi	sp,sp,44
   40e18:	f800283a 	ret
   40e1c:	04400404 	movi	r17,16
   40e20:	89407536 	bltu	r17,r5,40ff8 <_malloc_r+0x2c0>
   40e24:	00438300 	call	43830 <__malloc_lock>
   40e28:	003fd906 	br	40d90 <__alt_data_end+0xfffd0050>
   40e2c:	8806d27a 	srli	r3,r17,9
   40e30:	18007526 	beq	r3,zero,41008 <_malloc_r+0x2d0>
   40e34:	00800104 	movi	r2,4
   40e38:	10c0ef36 	bltu	r2,r3,411f8 <_malloc_r+0x4c0>
   40e3c:	8806d1ba 	srli	r3,r17,6
   40e40:	19c00e04 	addi	r7,r3,56
   40e44:	39cb883a 	add	r5,r7,r7
   40e48:	04c00134 	movhi	r19,4
   40e4c:	294b883a 	add	r5,r5,r5
   40e50:	9cd7c504 	addi	r19,r19,24340
   40e54:	294b883a 	add	r5,r5,r5
   40e58:	994b883a 	add	r5,r19,r5
   40e5c:	2c000317 	ldw	r16,12(r5)
   40e60:	2c000e26 	beq	r5,r16,40e9c <_malloc_r+0x164>
   40e64:	80800117 	ldw	r2,4(r16)
   40e68:	01bfff04 	movi	r6,-4
   40e6c:	010003c4 	movi	r4,15
   40e70:	1184703a 	and	r2,r2,r6
   40e74:	1447c83a 	sub	r3,r2,r17
   40e78:	20c00716 	blt	r4,r3,40e98 <_malloc_r+0x160>
   40e7c:	1800650e 	bge	r3,zero,41014 <_malloc_r+0x2dc>
   40e80:	84000317 	ldw	r16,12(r16)
   40e84:	2c000526 	beq	r5,r16,40e9c <_malloc_r+0x164>
   40e88:	80800117 	ldw	r2,4(r16)
   40e8c:	1184703a 	and	r2,r2,r6
   40e90:	1447c83a 	sub	r3,r2,r17
   40e94:	20fff90e 	bge	r4,r3,40e7c <__alt_data_end+0xfffd013c>
   40e98:	39ffffc4 	addi	r7,r7,-1
   40e9c:	38c00044 	addi	r3,r7,1
   40ea0:	01800134 	movhi	r6,4
   40ea4:	9c000417 	ldw	r16,16(r19)
   40ea8:	3197c504 	addi	r6,r6,24340
   40eac:	32400204 	addi	r9,r6,8
   40eb0:	82410326 	beq	r16,r9,412c0 <_malloc_r+0x588>
   40eb4:	81000117 	ldw	r4,4(r16)
   40eb8:	00bfff04 	movi	r2,-4
   40ebc:	208e703a 	and	r7,r4,r2
   40ec0:	3c45c83a 	sub	r2,r7,r17
   40ec4:	010003c4 	movi	r4,15
   40ec8:	2080ee16 	blt	r4,r2,41284 <_malloc_r+0x54c>
   40ecc:	32400515 	stw	r9,20(r6)
   40ed0:	32400415 	stw	r9,16(r6)
   40ed4:	1000510e 	bge	r2,zero,4101c <_malloc_r+0x2e4>
   40ed8:	00807fc4 	movi	r2,511
   40edc:	11c0ce36 	bltu	r2,r7,41218 <_malloc_r+0x4e0>
   40ee0:	3808d0fa 	srli	r4,r7,3
   40ee4:	01c00044 	movi	r7,1
   40ee8:	30800117 	ldw	r2,4(r6)
   40eec:	210b883a 	add	r5,r4,r4
   40ef0:	294b883a 	add	r5,r5,r5
   40ef4:	2009d0ba 	srai	r4,r4,2
   40ef8:	294b883a 	add	r5,r5,r5
   40efc:	298b883a 	add	r5,r5,r6
   40f00:	2a000217 	ldw	r8,8(r5)
   40f04:	3908983a 	sll	r4,r7,r4
   40f08:	81400315 	stw	r5,12(r16)
   40f0c:	82000215 	stw	r8,8(r16)
   40f10:	2088b03a 	or	r4,r4,r2
   40f14:	2c000215 	stw	r16,8(r5)
   40f18:	31000115 	stw	r4,4(r6)
   40f1c:	44000315 	stw	r16,12(r8)
   40f20:	1805d0ba 	srai	r2,r3,2
   40f24:	01400044 	movi	r5,1
   40f28:	288a983a 	sll	r5,r5,r2
   40f2c:	21404336 	bltu	r4,r5,4103c <_malloc_r+0x304>
   40f30:	2144703a 	and	r2,r4,r5
   40f34:	10000a1e 	bne	r2,zero,40f60 <_malloc_r+0x228>
   40f38:	00bfff04 	movi	r2,-4
   40f3c:	294b883a 	add	r5,r5,r5
   40f40:	1886703a 	and	r3,r3,r2
   40f44:	2144703a 	and	r2,r4,r5
   40f48:	18c00104 	addi	r3,r3,4
   40f4c:	1000041e 	bne	r2,zero,40f60 <_malloc_r+0x228>
   40f50:	294b883a 	add	r5,r5,r5
   40f54:	2144703a 	and	r2,r4,r5
   40f58:	18c00104 	addi	r3,r3,4
   40f5c:	103ffc26 	beq	r2,zero,40f50 <__alt_data_end+0xfffd0210>
   40f60:	023fff04 	movi	r8,-4
   40f64:	01c003c4 	movi	r7,15
   40f68:	18c5883a 	add	r2,r3,r3
   40f6c:	1085883a 	add	r2,r2,r2
   40f70:	1085883a 	add	r2,r2,r2
   40f74:	9895883a 	add	r10,r19,r2
   40f78:	52c00304 	addi	r11,r10,12
   40f7c:	1819883a 	mov	r12,r3
   40f80:	5c000017 	ldw	r16,0(r11)
   40f84:	59bffd04 	addi	r6,r11,-12
   40f88:	8180041e 	bne	r16,r6,40f9c <_malloc_r+0x264>
   40f8c:	0000ce06 	br	412c8 <_malloc_r+0x590>
   40f90:	2000d70e 	bge	r4,zero,412f0 <_malloc_r+0x5b8>
   40f94:	84000317 	ldw	r16,12(r16)
   40f98:	8180cb26 	beq	r16,r6,412c8 <_malloc_r+0x590>
   40f9c:	80800117 	ldw	r2,4(r16)
   40fa0:	1204703a 	and	r2,r2,r8
   40fa4:	1449c83a 	sub	r4,r2,r17
   40fa8:	393ff90e 	bge	r7,r4,40f90 <__alt_data_end+0xfffd0250>
   40fac:	80800317 	ldw	r2,12(r16)
   40fb0:	80c00217 	ldw	r3,8(r16)
   40fb4:	89400054 	ori	r5,r17,1
   40fb8:	81400115 	stw	r5,4(r16)
   40fbc:	18800315 	stw	r2,12(r3)
   40fc0:	10c00215 	stw	r3,8(r2)
   40fc4:	8463883a 	add	r17,r16,r17
   40fc8:	9c400515 	stw	r17,20(r19)
   40fcc:	9c400415 	stw	r17,16(r19)
   40fd0:	20800054 	ori	r2,r4,1
   40fd4:	88800115 	stw	r2,4(r17)
   40fd8:	8a400315 	stw	r9,12(r17)
   40fdc:	8a400215 	stw	r9,8(r17)
   40fe0:	8923883a 	add	r17,r17,r4
   40fe4:	89000015 	stw	r4,0(r17)
   40fe8:	9009883a 	mov	r4,r18
   40fec:	00438500 	call	43850 <__malloc_unlock>
   40ff0:	80800204 	addi	r2,r16,8
   40ff4:	003f7d06 	br	40dec <__alt_data_end+0xfffd00ac>
   40ff8:	00800304 	movi	r2,12
   40ffc:	90800015 	stw	r2,0(r18)
   41000:	0005883a 	mov	r2,zero
   41004:	003f7906 	br	40dec <__alt_data_end+0xfffd00ac>
   41008:	01401f84 	movi	r5,126
   4100c:	01c00fc4 	movi	r7,63
   41010:	003f8d06 	br	40e48 <__alt_data_end+0xfffd0108>
   41014:	81000317 	ldw	r4,12(r16)
   41018:	003f6a06 	br	40dc4 <__alt_data_end+0xfffd0084>
   4101c:	81c5883a 	add	r2,r16,r7
   41020:	10c00117 	ldw	r3,4(r2)
   41024:	9009883a 	mov	r4,r18
   41028:	18c00054 	ori	r3,r3,1
   4102c:	10c00115 	stw	r3,4(r2)
   41030:	00438500 	call	43850 <__malloc_unlock>
   41034:	80800204 	addi	r2,r16,8
   41038:	003f6c06 	br	40dec <__alt_data_end+0xfffd00ac>
   4103c:	9c000217 	ldw	r16,8(r19)
   41040:	00bfff04 	movi	r2,-4
   41044:	85800117 	ldw	r22,4(r16)
   41048:	b0ac703a 	and	r22,r22,r2
   4104c:	b4400336 	bltu	r22,r17,4105c <_malloc_r+0x324>
   41050:	b445c83a 	sub	r2,r22,r17
   41054:	00c003c4 	movi	r3,15
   41058:	18805d16 	blt	r3,r2,411d0 <_malloc_r+0x498>
   4105c:	05c00134 	movhi	r23,4
   41060:	00800174 	movhi	r2,5
   41064:	bddd4b04 	addi	r23,r23,29996
   41068:	10a3f404 	addi	r2,r2,-28720
   4106c:	15400017 	ldw	r21,0(r2)
   41070:	b9000017 	ldw	r4,0(r23)
   41074:	00ffffc4 	movi	r3,-1
   41078:	858d883a 	add	r6,r16,r22
   4107c:	8d6b883a 	add	r21,r17,r21
   41080:	20c0e426 	beq	r4,r3,41414 <_malloc_r+0x6dc>
   41084:	ad4403c4 	addi	r21,r21,4111
   41088:	00fc0004 	movi	r3,-4096
   4108c:	a8ea703a 	and	r21,r21,r3
   41090:	9009883a 	mov	r4,r18
   41094:	a80b883a 	mov	r5,r21
   41098:	d9800015 	stw	r6,0(sp)
   4109c:	0041dfc0 	call	41dfc <_sbrk_r>
   410a0:	00ffffc4 	movi	r3,-1
   410a4:	1029883a 	mov	r20,r2
   410a8:	d9800017 	ldw	r6,0(sp)
   410ac:	10c0a426 	beq	r2,r3,41340 <_malloc_r+0x608>
   410b0:	1180a236 	bltu	r2,r6,4133c <_malloc_r+0x604>
   410b4:	07000174 	movhi	fp,5
   410b8:	e723fc04 	addi	fp,fp,-28688
   410bc:	e0c00017 	ldw	r3,0(fp)
   410c0:	a8c7883a 	add	r3,r21,r3
   410c4:	e0c00015 	stw	r3,0(fp)
   410c8:	3500da26 	beq	r6,r20,41434 <_malloc_r+0x6fc>
   410cc:	b9000017 	ldw	r4,0(r23)
   410d0:	00bfffc4 	movi	r2,-1
   410d4:	2080e426 	beq	r4,r2,41468 <_malloc_r+0x730>
   410d8:	a185c83a 	sub	r2,r20,r6
   410dc:	1885883a 	add	r2,r3,r2
   410e0:	e0800015 	stw	r2,0(fp)
   410e4:	a0c001cc 	andi	r3,r20,7
   410e8:	1800b526 	beq	r3,zero,413c0 <_malloc_r+0x688>
   410ec:	a0e9c83a 	sub	r20,r20,r3
   410f0:	00840204 	movi	r2,4104
   410f4:	a5000204 	addi	r20,r20,8
   410f8:	10c7c83a 	sub	r3,r2,r3
   410fc:	a545883a 	add	r2,r20,r21
   41100:	1083ffcc 	andi	r2,r2,4095
   41104:	18abc83a 	sub	r21,r3,r2
   41108:	9009883a 	mov	r4,r18
   4110c:	a80b883a 	mov	r5,r21
   41110:	0041dfc0 	call	41dfc <_sbrk_r>
   41114:	00ffffc4 	movi	r3,-1
   41118:	10c0d026 	beq	r2,r3,4145c <_malloc_r+0x724>
   4111c:	1507c83a 	sub	r3,r2,r20
   41120:	a8c7883a 	add	r3,r21,r3
   41124:	18c00054 	ori	r3,r3,1
   41128:	e0800017 	ldw	r2,0(fp)
   4112c:	9d000215 	stw	r20,8(r19)
   41130:	a0c00115 	stw	r3,4(r20)
   41134:	a887883a 	add	r3,r21,r2
   41138:	e0c00015 	stw	r3,0(fp)
   4113c:	84c00e26 	beq	r16,r19,41178 <_malloc_r+0x440>
   41140:	018003c4 	movi	r6,15
   41144:	3580a02e 	bgeu	r6,r22,413c8 <_malloc_r+0x690>
   41148:	81400117 	ldw	r5,4(r16)
   4114c:	013ffe04 	movi	r4,-8
   41150:	b0bffd04 	addi	r2,r22,-12
   41154:	1104703a 	and	r2,r2,r4
   41158:	2900004c 	andi	r4,r5,1
   4115c:	1108b03a 	or	r4,r2,r4
   41160:	81000115 	stw	r4,4(r16)
   41164:	01400144 	movi	r5,5
   41168:	8089883a 	add	r4,r16,r2
   4116c:	21400115 	stw	r5,4(r4)
   41170:	21400215 	stw	r5,8(r4)
   41174:	3080c036 	bltu	r6,r2,41478 <_malloc_r+0x740>
   41178:	00800174 	movhi	r2,5
   4117c:	10a3f304 	addi	r2,r2,-28724
   41180:	11000017 	ldw	r4,0(r2)
   41184:	20c0012e 	bgeu	r4,r3,4118c <_malloc_r+0x454>
   41188:	10c00015 	stw	r3,0(r2)
   4118c:	00800174 	movhi	r2,5
   41190:	10a3f204 	addi	r2,r2,-28728
   41194:	11000017 	ldw	r4,0(r2)
   41198:	9c000217 	ldw	r16,8(r19)
   4119c:	20c0012e 	bgeu	r4,r3,411a4 <_malloc_r+0x46c>
   411a0:	10c00015 	stw	r3,0(r2)
   411a4:	80c00117 	ldw	r3,4(r16)
   411a8:	00bfff04 	movi	r2,-4
   411ac:	1886703a 	and	r3,r3,r2
   411b0:	1c45c83a 	sub	r2,r3,r17
   411b4:	1c400236 	bltu	r3,r17,411c0 <_malloc_r+0x488>
   411b8:	00c003c4 	movi	r3,15
   411bc:	18800416 	blt	r3,r2,411d0 <_malloc_r+0x498>
   411c0:	9009883a 	mov	r4,r18
   411c4:	00438500 	call	43850 <__malloc_unlock>
   411c8:	0005883a 	mov	r2,zero
   411cc:	003f0706 	br	40dec <__alt_data_end+0xfffd00ac>
   411d0:	88c00054 	ori	r3,r17,1
   411d4:	80c00115 	stw	r3,4(r16)
   411d8:	8463883a 	add	r17,r16,r17
   411dc:	10800054 	ori	r2,r2,1
   411e0:	9c400215 	stw	r17,8(r19)
   411e4:	88800115 	stw	r2,4(r17)
   411e8:	9009883a 	mov	r4,r18
   411ec:	00438500 	call	43850 <__malloc_unlock>
   411f0:	80800204 	addi	r2,r16,8
   411f4:	003efd06 	br	40dec <__alt_data_end+0xfffd00ac>
   411f8:	00800504 	movi	r2,20
   411fc:	10c0482e 	bgeu	r2,r3,41320 <_malloc_r+0x5e8>
   41200:	00801504 	movi	r2,84
   41204:	10c06836 	bltu	r2,r3,413a8 <_malloc_r+0x670>
   41208:	8806d33a 	srli	r3,r17,12
   4120c:	19c01b84 	addi	r7,r3,110
   41210:	39cb883a 	add	r5,r7,r7
   41214:	003f0c06 	br	40e48 <__alt_data_end+0xfffd0108>
   41218:	3804d27a 	srli	r2,r7,9
   4121c:	01000104 	movi	r4,4
   41220:	2080422e 	bgeu	r4,r2,4132c <_malloc_r+0x5f4>
   41224:	01000504 	movi	r4,20
   41228:	20807c36 	bltu	r4,r2,4141c <_malloc_r+0x6e4>
   4122c:	110016c4 	addi	r4,r2,91
   41230:	210b883a 	add	r5,r4,r4
   41234:	294b883a 	add	r5,r5,r5
   41238:	294b883a 	add	r5,r5,r5
   4123c:	994b883a 	add	r5,r19,r5
   41240:	28800217 	ldw	r2,8(r5)
   41244:	02000134 	movhi	r8,4
   41248:	4217c504 	addi	r8,r8,24340
   4124c:	11406326 	beq	r2,r5,413dc <_malloc_r+0x6a4>
   41250:	01bfff04 	movi	r6,-4
   41254:	11000117 	ldw	r4,4(r2)
   41258:	2188703a 	and	r4,r4,r6
   4125c:	3900022e 	bgeu	r7,r4,41268 <_malloc_r+0x530>
   41260:	10800217 	ldw	r2,8(r2)
   41264:	28bffb1e 	bne	r5,r2,41254 <__alt_data_end+0xfffd0514>
   41268:	11800317 	ldw	r6,12(r2)
   4126c:	99000117 	ldw	r4,4(r19)
   41270:	81800315 	stw	r6,12(r16)
   41274:	80800215 	stw	r2,8(r16)
   41278:	34000215 	stw	r16,8(r6)
   4127c:	14000315 	stw	r16,12(r2)
   41280:	003f2706 	br	40f20 <__alt_data_end+0xfffd01e0>
   41284:	88c00054 	ori	r3,r17,1
   41288:	80c00115 	stw	r3,4(r16)
   4128c:	8463883a 	add	r17,r16,r17
   41290:	34400515 	stw	r17,20(r6)
   41294:	34400415 	stw	r17,16(r6)
   41298:	10c00054 	ori	r3,r2,1
   4129c:	8a400315 	stw	r9,12(r17)
   412a0:	8a400215 	stw	r9,8(r17)
   412a4:	88c00115 	stw	r3,4(r17)
   412a8:	88a3883a 	add	r17,r17,r2
   412ac:	88800015 	stw	r2,0(r17)
   412b0:	9009883a 	mov	r4,r18
   412b4:	00438500 	call	43850 <__malloc_unlock>
   412b8:	80800204 	addi	r2,r16,8
   412bc:	003ecb06 	br	40dec <__alt_data_end+0xfffd00ac>
   412c0:	31000117 	ldw	r4,4(r6)
   412c4:	003f1606 	br	40f20 <__alt_data_end+0xfffd01e0>
   412c8:	63000044 	addi	r12,r12,1
   412cc:	608000cc 	andi	r2,r12,3
   412d0:	5ac00204 	addi	r11,r11,8
   412d4:	103f2a1e 	bne	r2,zero,40f80 <__alt_data_end+0xfffd0240>
   412d8:	00002106 	br	41360 <_malloc_r+0x628>
   412dc:	80800204 	addi	r2,r16,8
   412e0:	84000517 	ldw	r16,20(r16)
   412e4:	143eb31e 	bne	r2,r16,40db4 <__alt_data_end+0xfffd0074>
   412e8:	18c00084 	addi	r3,r3,2
   412ec:	003eec06 	br	40ea0 <__alt_data_end+0xfffd0160>
   412f0:	8085883a 	add	r2,r16,r2
   412f4:	10c00117 	ldw	r3,4(r2)
   412f8:	81000317 	ldw	r4,12(r16)
   412fc:	81400217 	ldw	r5,8(r16)
   41300:	18c00054 	ori	r3,r3,1
   41304:	10c00115 	stw	r3,4(r2)
   41308:	29000315 	stw	r4,12(r5)
   4130c:	21400215 	stw	r5,8(r4)
   41310:	9009883a 	mov	r4,r18
   41314:	00438500 	call	43850 <__malloc_unlock>
   41318:	80800204 	addi	r2,r16,8
   4131c:	003eb306 	br	40dec <__alt_data_end+0xfffd00ac>
   41320:	19c016c4 	addi	r7,r3,91
   41324:	39cb883a 	add	r5,r7,r7
   41328:	003ec706 	br	40e48 <__alt_data_end+0xfffd0108>
   4132c:	3804d1ba 	srli	r2,r7,6
   41330:	11000e04 	addi	r4,r2,56
   41334:	210b883a 	add	r5,r4,r4
   41338:	003fbe06 	br	41234 <__alt_data_end+0xfffd04f4>
   4133c:	84ff5d26 	beq	r16,r19,410b4 <__alt_data_end+0xfffd0374>
   41340:	9c000217 	ldw	r16,8(r19)
   41344:	00bfff04 	movi	r2,-4
   41348:	80c00117 	ldw	r3,4(r16)
   4134c:	1886703a 	and	r3,r3,r2
   41350:	003f9706 	br	411b0 <__alt_data_end+0xfffd0470>
   41354:	52800017 	ldw	r10,0(r10)
   41358:	18ffffc4 	addi	r3,r3,-1
   4135c:	50805c1e 	bne	r10,r2,414d0 <_malloc_r+0x798>
   41360:	190000cc 	andi	r4,r3,3
   41364:	50bffe04 	addi	r2,r10,-8
   41368:	203ffa1e 	bne	r4,zero,41354 <__alt_data_end+0xfffd0614>
   4136c:	98800117 	ldw	r2,4(r19)
   41370:	0146303a 	nor	r3,zero,r5
   41374:	1884703a 	and	r2,r3,r2
   41378:	98800115 	stw	r2,4(r19)
   4137c:	294b883a 	add	r5,r5,r5
   41380:	117f2e36 	bltu	r2,r5,4103c <__alt_data_end+0xfffd02fc>
   41384:	283f2d26 	beq	r5,zero,4103c <__alt_data_end+0xfffd02fc>
   41388:	1146703a 	and	r3,r2,r5
   4138c:	1800521e 	bne	r3,zero,414d8 <_malloc_r+0x7a0>
   41390:	6007883a 	mov	r3,r12
   41394:	294b883a 	add	r5,r5,r5
   41398:	1148703a 	and	r4,r2,r5
   4139c:	18c00104 	addi	r3,r3,4
   413a0:	203ffc26 	beq	r4,zero,41394 <__alt_data_end+0xfffd0654>
   413a4:	003ef006 	br	40f68 <__alt_data_end+0xfffd0228>
   413a8:	00805504 	movi	r2,340
   413ac:	10c01336 	bltu	r2,r3,413fc <_malloc_r+0x6c4>
   413b0:	8806d3fa 	srli	r3,r17,15
   413b4:	19c01dc4 	addi	r7,r3,119
   413b8:	39cb883a 	add	r5,r7,r7
   413bc:	003ea206 	br	40e48 <__alt_data_end+0xfffd0108>
   413c0:	00c40004 	movi	r3,4096
   413c4:	003f4d06 	br	410fc <__alt_data_end+0xfffd03bc>
   413c8:	00800044 	movi	r2,1
   413cc:	a0800115 	stw	r2,4(r20)
   413d0:	a021883a 	mov	r16,r20
   413d4:	0007883a 	mov	r3,zero
   413d8:	003f7506 	br	411b0 <__alt_data_end+0xfffd0470>
   413dc:	200bd0ba 	srai	r5,r4,2
   413e0:	01800044 	movi	r6,1
   413e4:	41000117 	ldw	r4,4(r8)
   413e8:	314a983a 	sll	r5,r6,r5
   413ec:	100d883a 	mov	r6,r2
   413f0:	2908b03a 	or	r4,r5,r4
   413f4:	41000115 	stw	r4,4(r8)
   413f8:	003f9d06 	br	41270 <__alt_data_end+0xfffd0530>
   413fc:	00815504 	movi	r2,1364
   41400:	10c01336 	bltu	r2,r3,41450 <_malloc_r+0x718>
   41404:	8806d4ba 	srli	r3,r17,18
   41408:	19c01f04 	addi	r7,r3,124
   4140c:	39cb883a 	add	r5,r7,r7
   41410:	003e8d06 	br	40e48 <__alt_data_end+0xfffd0108>
   41414:	ad400404 	addi	r21,r21,16
   41418:	003f1d06 	br	41090 <__alt_data_end+0xfffd0350>
   4141c:	01001504 	movi	r4,84
   41420:	20801c36 	bltu	r4,r2,41494 <_malloc_r+0x75c>
   41424:	3804d33a 	srli	r2,r7,12
   41428:	11001b84 	addi	r4,r2,110
   4142c:	210b883a 	add	r5,r4,r4
   41430:	003f8006 	br	41234 <__alt_data_end+0xfffd04f4>
   41434:	3083ffcc 	andi	r2,r6,4095
   41438:	103f241e 	bne	r2,zero,410cc <__alt_data_end+0xfffd038c>
   4143c:	99000217 	ldw	r4,8(r19)
   41440:	ad85883a 	add	r2,r21,r22
   41444:	10800054 	ori	r2,r2,1
   41448:	20800115 	stw	r2,4(r4)
   4144c:	003f4a06 	br	41178 <__alt_data_end+0xfffd0438>
   41450:	01403f04 	movi	r5,252
   41454:	01c01f84 	movi	r7,126
   41458:	003e7b06 	br	40e48 <__alt_data_end+0xfffd0108>
   4145c:	00c00044 	movi	r3,1
   41460:	002b883a 	mov	r21,zero
   41464:	003f3006 	br	41128 <__alt_data_end+0xfffd03e8>
   41468:	00800134 	movhi	r2,4
   4146c:	109d4b04 	addi	r2,r2,29996
   41470:	15000015 	stw	r20,0(r2)
   41474:	003f1b06 	br	410e4 <__alt_data_end+0xfffd03a4>
   41478:	9009883a 	mov	r4,r18
   4147c:	81400204 	addi	r5,r16,8
   41480:	00426b00 	call	426b0 <_free_r>
   41484:	00800174 	movhi	r2,5
   41488:	10a3fc04 	addi	r2,r2,-28688
   4148c:	10c00017 	ldw	r3,0(r2)
   41490:	003f3906 	br	41178 <__alt_data_end+0xfffd0438>
   41494:	01005504 	movi	r4,340
   41498:	20800436 	bltu	r4,r2,414ac <_malloc_r+0x774>
   4149c:	3804d3fa 	srli	r2,r7,15
   414a0:	11001dc4 	addi	r4,r2,119
   414a4:	210b883a 	add	r5,r4,r4
   414a8:	003f6206 	br	41234 <__alt_data_end+0xfffd04f4>
   414ac:	01015504 	movi	r4,1364
   414b0:	20800436 	bltu	r4,r2,414c4 <_malloc_r+0x78c>
   414b4:	3804d4ba 	srli	r2,r7,18
   414b8:	11001f04 	addi	r4,r2,124
   414bc:	210b883a 	add	r5,r4,r4
   414c0:	003f5c06 	br	41234 <__alt_data_end+0xfffd04f4>
   414c4:	01403f04 	movi	r5,252
   414c8:	01001f84 	movi	r4,126
   414cc:	003f5906 	br	41234 <__alt_data_end+0xfffd04f4>
   414d0:	98800117 	ldw	r2,4(r19)
   414d4:	003fa906 	br	4137c <__alt_data_end+0xfffd063c>
   414d8:	6007883a 	mov	r3,r12
   414dc:	003ea206 	br	40f68 <__alt_data_end+0xfffd0228>

000414e0 <memchr>:
   414e0:	208000cc 	andi	r2,r4,3
   414e4:	280f883a 	mov	r7,r5
   414e8:	10003526 	beq	r2,zero,415c0 <memchr+0xe0>
   414ec:	30bfffc4 	addi	r2,r6,-1
   414f0:	30001b26 	beq	r6,zero,41560 <memchr+0x80>
   414f4:	21800003 	ldbu	r6,0(r4)
   414f8:	28c03fcc 	andi	r3,r5,255
   414fc:	30c01a26 	beq	r6,r3,41568 <memchr+0x88>
   41500:	180d883a 	mov	r6,r3
   41504:	00000406 	br	41518 <memchr+0x38>
   41508:	10001526 	beq	r2,zero,41560 <memchr+0x80>
   4150c:	20c00003 	ldbu	r3,0(r4)
   41510:	10bfffc4 	addi	r2,r2,-1
   41514:	19801426 	beq	r3,r6,41568 <memchr+0x88>
   41518:	21000044 	addi	r4,r4,1
   4151c:	20c000cc 	andi	r3,r4,3
   41520:	183ff91e 	bne	r3,zero,41508 <__alt_data_end+0xfffd07c8>
   41524:	024000c4 	movi	r9,3
   41528:	48801136 	bltu	r9,r2,41570 <memchr+0x90>
   4152c:	10000c26 	beq	r2,zero,41560 <memchr+0x80>
   41530:	20c00003 	ldbu	r3,0(r4)
   41534:	29403fcc 	andi	r5,r5,255
   41538:	19400b26 	beq	r3,r5,41568 <memchr+0x88>
   4153c:	20c00044 	addi	r3,r4,1
   41540:	2085883a 	add	r2,r4,r2
   41544:	39803fcc 	andi	r6,r7,255
   41548:	00000306 	br	41558 <memchr+0x78>
   4154c:	18c00044 	addi	r3,r3,1
   41550:	197fffc3 	ldbu	r5,-1(r3)
   41554:	29800426 	beq	r5,r6,41568 <memchr+0x88>
   41558:	1809883a 	mov	r4,r3
   4155c:	18bffb1e 	bne	r3,r2,4154c <__alt_data_end+0xfffd080c>
   41560:	0005883a 	mov	r2,zero
   41564:	f800283a 	ret
   41568:	2005883a 	mov	r2,r4
   4156c:	f800283a 	ret
   41570:	28c03fcc 	andi	r3,r5,255
   41574:	1810923a 	slli	r8,r3,8
   41578:	02ffbff4 	movhi	r11,65279
   4157c:	02a02074 	movhi	r10,32897
   41580:	40c6b03a 	or	r3,r8,r3
   41584:	1810943a 	slli	r8,r3,16
   41588:	5affbfc4 	addi	r11,r11,-257
   4158c:	52a02004 	addi	r10,r10,-32640
   41590:	40d0b03a 	or	r8,r8,r3
   41594:	20c00017 	ldw	r3,0(r4)
   41598:	40c6f03a 	xor	r3,r8,r3
   4159c:	1acd883a 	add	r6,r3,r11
   415a0:	00c6303a 	nor	r3,zero,r3
   415a4:	30c6703a 	and	r3,r6,r3
   415a8:	1a86703a 	and	r3,r3,r10
   415ac:	183fdf1e 	bne	r3,zero,4152c <__alt_data_end+0xfffd07ec>
   415b0:	10bfff04 	addi	r2,r2,-4
   415b4:	21000104 	addi	r4,r4,4
   415b8:	48bff636 	bltu	r9,r2,41594 <__alt_data_end+0xfffd0854>
   415bc:	003fdb06 	br	4152c <__alt_data_end+0xfffd07ec>
   415c0:	3005883a 	mov	r2,r6
   415c4:	003fd706 	br	41524 <__alt_data_end+0xfffd07e4>

000415c8 <memcpy>:
   415c8:	deffff04 	addi	sp,sp,-4
   415cc:	dc000015 	stw	r16,0(sp)
   415d0:	00c003c4 	movi	r3,15
   415d4:	2005883a 	mov	r2,r4
   415d8:	1980432e 	bgeu	r3,r6,416e8 <memcpy+0x120>
   415dc:	2146b03a 	or	r3,r4,r5
   415e0:	18c000cc 	andi	r3,r3,3
   415e4:	1800421e 	bne	r3,zero,416f0 <memcpy+0x128>
   415e8:	343ffc04 	addi	r16,r6,-16
   415ec:	8020d13a 	srli	r16,r16,4
   415f0:	28c00104 	addi	r3,r5,4
   415f4:	23400104 	addi	r13,r4,4
   415f8:	801e913a 	slli	r15,r16,4
   415fc:	2b000204 	addi	r12,r5,8
   41600:	22c00204 	addi	r11,r4,8
   41604:	7bc00504 	addi	r15,r15,20
   41608:	2a800304 	addi	r10,r5,12
   4160c:	22400304 	addi	r9,r4,12
   41610:	2bdf883a 	add	r15,r5,r15
   41614:	2811883a 	mov	r8,r5
   41618:	200f883a 	mov	r7,r4
   4161c:	41000017 	ldw	r4,0(r8)
   41620:	39c00404 	addi	r7,r7,16
   41624:	18c00404 	addi	r3,r3,16
   41628:	393ffc15 	stw	r4,-16(r7)
   4162c:	1bbffc17 	ldw	r14,-16(r3)
   41630:	6b400404 	addi	r13,r13,16
   41634:	5ac00404 	addi	r11,r11,16
   41638:	6bbffc15 	stw	r14,-16(r13)
   4163c:	63800017 	ldw	r14,0(r12)
   41640:	4a400404 	addi	r9,r9,16
   41644:	42000404 	addi	r8,r8,16
   41648:	5bbffc15 	stw	r14,-16(r11)
   4164c:	53800017 	ldw	r14,0(r10)
   41650:	63000404 	addi	r12,r12,16
   41654:	52800404 	addi	r10,r10,16
   41658:	4bbffc15 	stw	r14,-16(r9)
   4165c:	1bffef1e 	bne	r3,r15,4161c <__alt_data_end+0xfffd08dc>
   41660:	81c00044 	addi	r7,r16,1
   41664:	380e913a 	slli	r7,r7,4
   41668:	310003cc 	andi	r4,r6,15
   4166c:	02c000c4 	movi	r11,3
   41670:	11c7883a 	add	r3,r2,r7
   41674:	29cb883a 	add	r5,r5,r7
   41678:	59001f2e 	bgeu	r11,r4,416f8 <memcpy+0x130>
   4167c:	1813883a 	mov	r9,r3
   41680:	2811883a 	mov	r8,r5
   41684:	200f883a 	mov	r7,r4
   41688:	42800017 	ldw	r10,0(r8)
   4168c:	4a400104 	addi	r9,r9,4
   41690:	39ffff04 	addi	r7,r7,-4
   41694:	4abfff15 	stw	r10,-4(r9)
   41698:	42000104 	addi	r8,r8,4
   4169c:	59fffa36 	bltu	r11,r7,41688 <__alt_data_end+0xfffd0948>
   416a0:	213fff04 	addi	r4,r4,-4
   416a4:	2008d0ba 	srli	r4,r4,2
   416a8:	318000cc 	andi	r6,r6,3
   416ac:	21000044 	addi	r4,r4,1
   416b0:	2109883a 	add	r4,r4,r4
   416b4:	2109883a 	add	r4,r4,r4
   416b8:	1907883a 	add	r3,r3,r4
   416bc:	290b883a 	add	r5,r5,r4
   416c0:	30000626 	beq	r6,zero,416dc <memcpy+0x114>
   416c4:	198d883a 	add	r6,r3,r6
   416c8:	29c00003 	ldbu	r7,0(r5)
   416cc:	18c00044 	addi	r3,r3,1
   416d0:	29400044 	addi	r5,r5,1
   416d4:	19ffffc5 	stb	r7,-1(r3)
   416d8:	19bffb1e 	bne	r3,r6,416c8 <__alt_data_end+0xfffd0988>
   416dc:	dc000017 	ldw	r16,0(sp)
   416e0:	dec00104 	addi	sp,sp,4
   416e4:	f800283a 	ret
   416e8:	2007883a 	mov	r3,r4
   416ec:	003ff406 	br	416c0 <__alt_data_end+0xfffd0980>
   416f0:	2007883a 	mov	r3,r4
   416f4:	003ff306 	br	416c4 <__alt_data_end+0xfffd0984>
   416f8:	200d883a 	mov	r6,r4
   416fc:	003ff006 	br	416c0 <__alt_data_end+0xfffd0980>

00041700 <memmove>:
   41700:	2005883a 	mov	r2,r4
   41704:	29000b2e 	bgeu	r5,r4,41734 <memmove+0x34>
   41708:	298f883a 	add	r7,r5,r6
   4170c:	21c0092e 	bgeu	r4,r7,41734 <memmove+0x34>
   41710:	2187883a 	add	r3,r4,r6
   41714:	198bc83a 	sub	r5,r3,r6
   41718:	30004b26 	beq	r6,zero,41848 <memmove+0x148>
   4171c:	39ffffc4 	addi	r7,r7,-1
   41720:	39000003 	ldbu	r4,0(r7)
   41724:	18ffffc4 	addi	r3,r3,-1
   41728:	19000005 	stb	r4,0(r3)
   4172c:	197ffb1e 	bne	r3,r5,4171c <__alt_data_end+0xfffd09dc>
   41730:	f800283a 	ret
   41734:	00c003c4 	movi	r3,15
   41738:	1980412e 	bgeu	r3,r6,41840 <memmove+0x140>
   4173c:	1146b03a 	or	r3,r2,r5
   41740:	18c000cc 	andi	r3,r3,3
   41744:	1800411e 	bne	r3,zero,4184c <memmove+0x14c>
   41748:	33fffc04 	addi	r15,r6,-16
   4174c:	781ed13a 	srli	r15,r15,4
   41750:	28c00104 	addi	r3,r5,4
   41754:	13400104 	addi	r13,r2,4
   41758:	781c913a 	slli	r14,r15,4
   4175c:	2b000204 	addi	r12,r5,8
   41760:	12c00204 	addi	r11,r2,8
   41764:	73800504 	addi	r14,r14,20
   41768:	2a800304 	addi	r10,r5,12
   4176c:	12400304 	addi	r9,r2,12
   41770:	2b9d883a 	add	r14,r5,r14
   41774:	2811883a 	mov	r8,r5
   41778:	100f883a 	mov	r7,r2
   4177c:	41000017 	ldw	r4,0(r8)
   41780:	39c00404 	addi	r7,r7,16
   41784:	18c00404 	addi	r3,r3,16
   41788:	393ffc15 	stw	r4,-16(r7)
   4178c:	193ffc17 	ldw	r4,-16(r3)
   41790:	6b400404 	addi	r13,r13,16
   41794:	5ac00404 	addi	r11,r11,16
   41798:	693ffc15 	stw	r4,-16(r13)
   4179c:	61000017 	ldw	r4,0(r12)
   417a0:	4a400404 	addi	r9,r9,16
   417a4:	42000404 	addi	r8,r8,16
   417a8:	593ffc15 	stw	r4,-16(r11)
   417ac:	51000017 	ldw	r4,0(r10)
   417b0:	63000404 	addi	r12,r12,16
   417b4:	52800404 	addi	r10,r10,16
   417b8:	493ffc15 	stw	r4,-16(r9)
   417bc:	1bbfef1e 	bne	r3,r14,4177c <__alt_data_end+0xfffd0a3c>
   417c0:	79000044 	addi	r4,r15,1
   417c4:	2008913a 	slli	r4,r4,4
   417c8:	328003cc 	andi	r10,r6,15
   417cc:	02c000c4 	movi	r11,3
   417d0:	1107883a 	add	r3,r2,r4
   417d4:	290b883a 	add	r5,r5,r4
   417d8:	5a801e2e 	bgeu	r11,r10,41854 <memmove+0x154>
   417dc:	1813883a 	mov	r9,r3
   417e0:	2811883a 	mov	r8,r5
   417e4:	500f883a 	mov	r7,r10
   417e8:	41000017 	ldw	r4,0(r8)
   417ec:	4a400104 	addi	r9,r9,4
   417f0:	39ffff04 	addi	r7,r7,-4
   417f4:	493fff15 	stw	r4,-4(r9)
   417f8:	42000104 	addi	r8,r8,4
   417fc:	59fffa36 	bltu	r11,r7,417e8 <__alt_data_end+0xfffd0aa8>
   41800:	513fff04 	addi	r4,r10,-4
   41804:	2008d0ba 	srli	r4,r4,2
   41808:	318000cc 	andi	r6,r6,3
   4180c:	21000044 	addi	r4,r4,1
   41810:	2109883a 	add	r4,r4,r4
   41814:	2109883a 	add	r4,r4,r4
   41818:	1907883a 	add	r3,r3,r4
   4181c:	290b883a 	add	r5,r5,r4
   41820:	30000926 	beq	r6,zero,41848 <memmove+0x148>
   41824:	198d883a 	add	r6,r3,r6
   41828:	29c00003 	ldbu	r7,0(r5)
   4182c:	18c00044 	addi	r3,r3,1
   41830:	29400044 	addi	r5,r5,1
   41834:	19ffffc5 	stb	r7,-1(r3)
   41838:	19bffb1e 	bne	r3,r6,41828 <__alt_data_end+0xfffd0ae8>
   4183c:	f800283a 	ret
   41840:	1007883a 	mov	r3,r2
   41844:	003ff606 	br	41820 <__alt_data_end+0xfffd0ae0>
   41848:	f800283a 	ret
   4184c:	1007883a 	mov	r3,r2
   41850:	003ff406 	br	41824 <__alt_data_end+0xfffd0ae4>
   41854:	500d883a 	mov	r6,r10
   41858:	003ff106 	br	41820 <__alt_data_end+0xfffd0ae0>

0004185c <_realloc_r>:
   4185c:	defff604 	addi	sp,sp,-40
   41860:	dcc00315 	stw	r19,12(sp)
   41864:	dc400115 	stw	r17,4(sp)
   41868:	dfc00915 	stw	ra,36(sp)
   4186c:	df000815 	stw	fp,32(sp)
   41870:	ddc00715 	stw	r23,28(sp)
   41874:	dd800615 	stw	r22,24(sp)
   41878:	dd400515 	stw	r21,20(sp)
   4187c:	dd000415 	stw	r20,16(sp)
   41880:	dc800215 	stw	r18,8(sp)
   41884:	dc000015 	stw	r16,0(sp)
   41888:	2827883a 	mov	r19,r5
   4188c:	3023883a 	mov	r17,r6
   41890:	2800bf26 	beq	r5,zero,41b90 <_realloc_r+0x334>
   41894:	2025883a 	mov	r18,r4
   41898:	00438300 	call	43830 <__malloc_lock>
   4189c:	98ffff17 	ldw	r3,-4(r19)
   418a0:	01bfff04 	movi	r6,-4
   418a4:	890002c4 	addi	r4,r17,11
   418a8:	01c00584 	movi	r7,22
   418ac:	9d7ffe04 	addi	r21,r19,-8
   418b0:	19a0703a 	and	r16,r3,r6
   418b4:	39003f2e 	bgeu	r7,r4,419b4 <_realloc_r+0x158>
   418b8:	053ffe04 	movi	r20,-8
   418bc:	2528703a 	and	r20,r4,r20
   418c0:	a00f883a 	mov	r7,r20
   418c4:	a0008216 	blt	r20,zero,41ad0 <_realloc_r+0x274>
   418c8:	a4408136 	bltu	r20,r17,41ad0 <_realloc_r+0x274>
   418cc:	81c03c0e 	bge	r16,r7,419c0 <_realloc_r+0x164>
   418d0:	07000134 	movhi	fp,4
   418d4:	e717c504 	addi	fp,fp,24340
   418d8:	e1000217 	ldw	r4,8(fp)
   418dc:	ac05883a 	add	r2,r21,r16
   418e0:	2080bf26 	beq	r4,r2,41be0 <_realloc_r+0x384>
   418e4:	11000117 	ldw	r4,4(r2)
   418e8:	023fff84 	movi	r8,-2
   418ec:	2210703a 	and	r8,r4,r8
   418f0:	1211883a 	add	r8,r2,r8
   418f4:	41400117 	ldw	r5,4(r8)
   418f8:	2940004c 	andi	r5,r5,1
   418fc:	28004a1e 	bne	r5,zero,41a28 <_realloc_r+0x1cc>
   41900:	017fff04 	movi	r5,-4
   41904:	2148703a 	and	r4,r4,r5
   41908:	2409883a 	add	r4,r4,r16
   4190c:	21c0ad0e 	bge	r4,r7,41bc4 <_realloc_r+0x368>
   41910:	18c0004c 	andi	r3,r3,1
   41914:	18007f1e 	bne	r3,zero,41b14 <_realloc_r+0x2b8>
   41918:	9dfffe17 	ldw	r23,-8(r19)
   4191c:	adefc83a 	sub	r23,r21,r23
   41920:	bd800117 	ldw	r22,4(r23)
   41924:	b14a703a 	and	r5,r22,r5
   41928:	216d883a 	add	r22,r4,r5
   4192c:	b1c04516 	blt	r22,r7,41a44 <_realloc_r+0x1e8>
   41930:	10c00317 	ldw	r3,12(r2)
   41934:	10800217 	ldw	r2,8(r2)
   41938:	81bfff04 	addi	r6,r16,-4
   4193c:	bc400204 	addi	r17,r23,8
   41940:	10c00315 	stw	r3,12(r2)
   41944:	18800215 	stw	r2,8(r3)
   41948:	b9400217 	ldw	r5,8(r23)
   4194c:	b8c00317 	ldw	r3,12(r23)
   41950:	00800904 	movi	r2,36
   41954:	28c00315 	stw	r3,12(r5)
   41958:	19400215 	stw	r5,8(r3)
   4195c:	1180ef36 	bltu	r2,r6,41d1c <_realloc_r+0x4c0>
   41960:	008004c4 	movi	r2,19
   41964:	1180da2e 	bgeu	r2,r6,41cd0 <_realloc_r+0x474>
   41968:	98800017 	ldw	r2,0(r19)
   4196c:	b8800215 	stw	r2,8(r23)
   41970:	98800117 	ldw	r2,4(r19)
   41974:	b8800315 	stw	r2,12(r23)
   41978:	008006c4 	movi	r2,27
   4197c:	1180fc2e 	bgeu	r2,r6,41d70 <_realloc_r+0x514>
   41980:	98800217 	ldw	r2,8(r19)
   41984:	b8800415 	stw	r2,16(r23)
   41988:	98800317 	ldw	r2,12(r19)
   4198c:	b8800515 	stw	r2,20(r23)
   41990:	00800904 	movi	r2,36
   41994:	3080421e 	bne	r6,r2,41aa0 <_realloc_r+0x244>
   41998:	98800417 	ldw	r2,16(r19)
   4199c:	9cc00604 	addi	r19,r19,24
   419a0:	b8c00804 	addi	r3,r23,32
   419a4:	b8800615 	stw	r2,24(r23)
   419a8:	98bfff17 	ldw	r2,-4(r19)
   419ac:	b8800715 	stw	r2,28(r23)
   419b0:	00003d06 	br	41aa8 <_realloc_r+0x24c>
   419b4:	01c00404 	movi	r7,16
   419b8:	3829883a 	mov	r20,r7
   419bc:	003fc206 	br	418c8 <__alt_data_end+0xfffd0b88>
   419c0:	9823883a 	mov	r17,r19
   419c4:	850fc83a 	sub	r7,r16,r20
   419c8:	008003c4 	movi	r2,15
   419cc:	18c0004c 	andi	r3,r3,1
   419d0:	11c04336 	bltu	r2,r7,41ae0 <_realloc_r+0x284>
   419d4:	1c06b03a 	or	r3,r3,r16
   419d8:	a8c00115 	stw	r3,4(r21)
   419dc:	ac21883a 	add	r16,r21,r16
   419e0:	80c00117 	ldw	r3,4(r16)
   419e4:	18c00054 	ori	r3,r3,1
   419e8:	80c00115 	stw	r3,4(r16)
   419ec:	9009883a 	mov	r4,r18
   419f0:	00438500 	call	43850 <__malloc_unlock>
   419f4:	8805883a 	mov	r2,r17
   419f8:	dfc00917 	ldw	ra,36(sp)
   419fc:	df000817 	ldw	fp,32(sp)
   41a00:	ddc00717 	ldw	r23,28(sp)
   41a04:	dd800617 	ldw	r22,24(sp)
   41a08:	dd400517 	ldw	r21,20(sp)
   41a0c:	dd000417 	ldw	r20,16(sp)
   41a10:	dcc00317 	ldw	r19,12(sp)
   41a14:	dc800217 	ldw	r18,8(sp)
   41a18:	dc400117 	ldw	r17,4(sp)
   41a1c:	dc000017 	ldw	r16,0(sp)
   41a20:	dec00a04 	addi	sp,sp,40
   41a24:	f800283a 	ret
   41a28:	18c0004c 	andi	r3,r3,1
   41a2c:	1800391e 	bne	r3,zero,41b14 <_realloc_r+0x2b8>
   41a30:	9dfffe17 	ldw	r23,-8(r19)
   41a34:	00bfff04 	movi	r2,-4
   41a38:	adefc83a 	sub	r23,r21,r23
   41a3c:	b9400117 	ldw	r5,4(r23)
   41a40:	288a703a 	and	r5,r5,r2
   41a44:	2c2d883a 	add	r22,r5,r16
   41a48:	b1c03216 	blt	r22,r7,41b14 <_realloc_r+0x2b8>
   41a4c:	b8800317 	ldw	r2,12(r23)
   41a50:	b8c00217 	ldw	r3,8(r23)
   41a54:	81bfff04 	addi	r6,r16,-4
   41a58:	01000904 	movi	r4,36
   41a5c:	18800315 	stw	r2,12(r3)
   41a60:	10c00215 	stw	r3,8(r2)
   41a64:	bc400204 	addi	r17,r23,8
   41a68:	2180ac36 	bltu	r4,r6,41d1c <_realloc_r+0x4c0>
   41a6c:	008004c4 	movi	r2,19
   41a70:	1180972e 	bgeu	r2,r6,41cd0 <_realloc_r+0x474>
   41a74:	98800017 	ldw	r2,0(r19)
   41a78:	b8800215 	stw	r2,8(r23)
   41a7c:	98800117 	ldw	r2,4(r19)
   41a80:	b8800315 	stw	r2,12(r23)
   41a84:	008006c4 	movi	r2,27
   41a88:	1180b92e 	bgeu	r2,r6,41d70 <_realloc_r+0x514>
   41a8c:	98800217 	ldw	r2,8(r19)
   41a90:	b8800415 	stw	r2,16(r23)
   41a94:	98800317 	ldw	r2,12(r19)
   41a98:	b8800515 	stw	r2,20(r23)
   41a9c:	313fbe26 	beq	r6,r4,41998 <__alt_data_end+0xfffd0c58>
   41aa0:	b8c00604 	addi	r3,r23,24
   41aa4:	9cc00404 	addi	r19,r19,16
   41aa8:	98800017 	ldw	r2,0(r19)
   41aac:	b021883a 	mov	r16,r22
   41ab0:	b82b883a 	mov	r21,r23
   41ab4:	18800015 	stw	r2,0(r3)
   41ab8:	98800117 	ldw	r2,4(r19)
   41abc:	18800115 	stw	r2,4(r3)
   41ac0:	98800217 	ldw	r2,8(r19)
   41ac4:	18800215 	stw	r2,8(r3)
   41ac8:	b8c00117 	ldw	r3,4(r23)
   41acc:	003fbd06 	br	419c4 <__alt_data_end+0xfffd0c84>
   41ad0:	00800304 	movi	r2,12
   41ad4:	90800015 	stw	r2,0(r18)
   41ad8:	0005883a 	mov	r2,zero
   41adc:	003fc606 	br	419f8 <__alt_data_end+0xfffd0cb8>
   41ae0:	1d06b03a 	or	r3,r3,r20
   41ae4:	ad0b883a 	add	r5,r21,r20
   41ae8:	a8c00115 	stw	r3,4(r21)
   41aec:	38800054 	ori	r2,r7,1
   41af0:	28800115 	stw	r2,4(r5)
   41af4:	29cf883a 	add	r7,r5,r7
   41af8:	38800117 	ldw	r2,4(r7)
   41afc:	9009883a 	mov	r4,r18
   41b00:	29400204 	addi	r5,r5,8
   41b04:	10800054 	ori	r2,r2,1
   41b08:	38800115 	stw	r2,4(r7)
   41b0c:	00426b00 	call	426b0 <_free_r>
   41b10:	003fb606 	br	419ec <__alt_data_end+0xfffd0cac>
   41b14:	880b883a 	mov	r5,r17
   41b18:	9009883a 	mov	r4,r18
   41b1c:	0040d380 	call	40d38 <_malloc_r>
   41b20:	1023883a 	mov	r17,r2
   41b24:	1000aa26 	beq	r2,zero,41dd0 <_realloc_r+0x574>
   41b28:	98ffff17 	ldw	r3,-4(r19)
   41b2c:	113ffe04 	addi	r4,r2,-8
   41b30:	00bfff84 	movi	r2,-2
   41b34:	1884703a 	and	r2,r3,r2
   41b38:	a885883a 	add	r2,r21,r2
   41b3c:	20808626 	beq	r4,r2,41d58 <_realloc_r+0x4fc>
   41b40:	81bfff04 	addi	r6,r16,-4
   41b44:	00800904 	movi	r2,36
   41b48:	11807036 	bltu	r2,r6,41d0c <_realloc_r+0x4b0>
   41b4c:	00c004c4 	movi	r3,19
   41b50:	19805636 	bltu	r3,r6,41cac <_realloc_r+0x450>
   41b54:	8805883a 	mov	r2,r17
   41b58:	9807883a 	mov	r3,r19
   41b5c:	19000017 	ldw	r4,0(r3)
   41b60:	11000015 	stw	r4,0(r2)
   41b64:	19000117 	ldw	r4,4(r3)
   41b68:	11000115 	stw	r4,4(r2)
   41b6c:	18c00217 	ldw	r3,8(r3)
   41b70:	10c00215 	stw	r3,8(r2)
   41b74:	980b883a 	mov	r5,r19
   41b78:	9009883a 	mov	r4,r18
   41b7c:	00426b00 	call	426b0 <_free_r>
   41b80:	9009883a 	mov	r4,r18
   41b84:	00438500 	call	43850 <__malloc_unlock>
   41b88:	8805883a 	mov	r2,r17
   41b8c:	003f9a06 	br	419f8 <__alt_data_end+0xfffd0cb8>
   41b90:	300b883a 	mov	r5,r6
   41b94:	dfc00917 	ldw	ra,36(sp)
   41b98:	df000817 	ldw	fp,32(sp)
   41b9c:	ddc00717 	ldw	r23,28(sp)
   41ba0:	dd800617 	ldw	r22,24(sp)
   41ba4:	dd400517 	ldw	r21,20(sp)
   41ba8:	dd000417 	ldw	r20,16(sp)
   41bac:	dcc00317 	ldw	r19,12(sp)
   41bb0:	dc800217 	ldw	r18,8(sp)
   41bb4:	dc400117 	ldw	r17,4(sp)
   41bb8:	dc000017 	ldw	r16,0(sp)
   41bbc:	dec00a04 	addi	sp,sp,40
   41bc0:	0040d381 	jmpi	40d38 <_malloc_r>
   41bc4:	11400317 	ldw	r5,12(r2)
   41bc8:	10800217 	ldw	r2,8(r2)
   41bcc:	9823883a 	mov	r17,r19
   41bd0:	2021883a 	mov	r16,r4
   41bd4:	11400315 	stw	r5,12(r2)
   41bd8:	28800215 	stw	r2,8(r5)
   41bdc:	003f7906 	br	419c4 <__alt_data_end+0xfffd0c84>
   41be0:	21000117 	ldw	r4,4(r4)
   41be4:	00bfff04 	movi	r2,-4
   41be8:	a1800404 	addi	r6,r20,16
   41bec:	2088703a 	and	r4,r4,r2
   41bf0:	2409883a 	add	r4,r4,r16
   41bf4:	2180380e 	bge	r4,r6,41cd8 <_realloc_r+0x47c>
   41bf8:	18c0004c 	andi	r3,r3,1
   41bfc:	183fc51e 	bne	r3,zero,41b14 <__alt_data_end+0xfffd0dd4>
   41c00:	9dfffe17 	ldw	r23,-8(r19)
   41c04:	adefc83a 	sub	r23,r21,r23
   41c08:	b9400117 	ldw	r5,4(r23)
   41c0c:	288a703a 	and	r5,r5,r2
   41c10:	216d883a 	add	r22,r4,r5
   41c14:	b1bf8b16 	blt	r22,r6,41a44 <__alt_data_end+0xfffd0d04>
   41c18:	b8800317 	ldw	r2,12(r23)
   41c1c:	b8c00217 	ldw	r3,8(r23)
   41c20:	81bfff04 	addi	r6,r16,-4
   41c24:	01000904 	movi	r4,36
   41c28:	18800315 	stw	r2,12(r3)
   41c2c:	10c00215 	stw	r3,8(r2)
   41c30:	bc400204 	addi	r17,r23,8
   41c34:	21805a36 	bltu	r4,r6,41da0 <_realloc_r+0x544>
   41c38:	008004c4 	movi	r2,19
   41c3c:	1180562e 	bgeu	r2,r6,41d98 <_realloc_r+0x53c>
   41c40:	98800017 	ldw	r2,0(r19)
   41c44:	b8800215 	stw	r2,8(r23)
   41c48:	98800117 	ldw	r2,4(r19)
   41c4c:	b8800315 	stw	r2,12(r23)
   41c50:	008006c4 	movi	r2,27
   41c54:	11805636 	bltu	r2,r6,41db0 <_realloc_r+0x554>
   41c58:	b8800404 	addi	r2,r23,16
   41c5c:	9cc00204 	addi	r19,r19,8
   41c60:	98c00017 	ldw	r3,0(r19)
   41c64:	10c00015 	stw	r3,0(r2)
   41c68:	98c00117 	ldw	r3,4(r19)
   41c6c:	10c00115 	stw	r3,4(r2)
   41c70:	98c00217 	ldw	r3,8(r19)
   41c74:	10c00215 	stw	r3,8(r2)
   41c78:	bd07883a 	add	r3,r23,r20
   41c7c:	b505c83a 	sub	r2,r22,r20
   41c80:	e0c00215 	stw	r3,8(fp)
   41c84:	10800054 	ori	r2,r2,1
   41c88:	18800115 	stw	r2,4(r3)
   41c8c:	b8800117 	ldw	r2,4(r23)
   41c90:	9009883a 	mov	r4,r18
   41c94:	1080004c 	andi	r2,r2,1
   41c98:	a0a8b03a 	or	r20,r20,r2
   41c9c:	bd000115 	stw	r20,4(r23)
   41ca0:	00438500 	call	43850 <__malloc_unlock>
   41ca4:	8805883a 	mov	r2,r17
   41ca8:	003f5306 	br	419f8 <__alt_data_end+0xfffd0cb8>
   41cac:	98c00017 	ldw	r3,0(r19)
   41cb0:	88c00015 	stw	r3,0(r17)
   41cb4:	98c00117 	ldw	r3,4(r19)
   41cb8:	88c00115 	stw	r3,4(r17)
   41cbc:	00c006c4 	movi	r3,27
   41cc0:	19801d36 	bltu	r3,r6,41d38 <_realloc_r+0x4dc>
   41cc4:	88800204 	addi	r2,r17,8
   41cc8:	98c00204 	addi	r3,r19,8
   41ccc:	003fa306 	br	41b5c <__alt_data_end+0xfffd0e1c>
   41cd0:	8807883a 	mov	r3,r17
   41cd4:	003f7406 	br	41aa8 <__alt_data_end+0xfffd0d68>
   41cd8:	ad2b883a 	add	r21,r21,r20
   41cdc:	2505c83a 	sub	r2,r4,r20
   41ce0:	e5400215 	stw	r21,8(fp)
   41ce4:	10800054 	ori	r2,r2,1
   41ce8:	a8800115 	stw	r2,4(r21)
   41cec:	98bfff17 	ldw	r2,-4(r19)
   41cf0:	9009883a 	mov	r4,r18
   41cf4:	1080004c 	andi	r2,r2,1
   41cf8:	a0a8b03a 	or	r20,r20,r2
   41cfc:	9d3fff15 	stw	r20,-4(r19)
   41d00:	00438500 	call	43850 <__malloc_unlock>
   41d04:	9805883a 	mov	r2,r19
   41d08:	003f3b06 	br	419f8 <__alt_data_end+0xfffd0cb8>
   41d0c:	8809883a 	mov	r4,r17
   41d10:	980b883a 	mov	r5,r19
   41d14:	00417000 	call	41700 <memmove>
   41d18:	003f9606 	br	41b74 <__alt_data_end+0xfffd0e34>
   41d1c:	8809883a 	mov	r4,r17
   41d20:	980b883a 	mov	r5,r19
   41d24:	00417000 	call	41700 <memmove>
   41d28:	b8c00117 	ldw	r3,4(r23)
   41d2c:	b021883a 	mov	r16,r22
   41d30:	b82b883a 	mov	r21,r23
   41d34:	003f2306 	br	419c4 <__alt_data_end+0xfffd0c84>
   41d38:	98c00217 	ldw	r3,8(r19)
   41d3c:	88c00215 	stw	r3,8(r17)
   41d40:	98c00317 	ldw	r3,12(r19)
   41d44:	88c00315 	stw	r3,12(r17)
   41d48:	30800c26 	beq	r6,r2,41d7c <_realloc_r+0x520>
   41d4c:	88800404 	addi	r2,r17,16
   41d50:	98c00404 	addi	r3,r19,16
   41d54:	003f8106 	br	41b5c <__alt_data_end+0xfffd0e1c>
   41d58:	893fff17 	ldw	r4,-4(r17)
   41d5c:	00bfff04 	movi	r2,-4
   41d60:	9823883a 	mov	r17,r19
   41d64:	2084703a 	and	r2,r4,r2
   41d68:	80a1883a 	add	r16,r16,r2
   41d6c:	003f1506 	br	419c4 <__alt_data_end+0xfffd0c84>
   41d70:	b8c00404 	addi	r3,r23,16
   41d74:	9cc00204 	addi	r19,r19,8
   41d78:	003f4b06 	br	41aa8 <__alt_data_end+0xfffd0d68>
   41d7c:	99000417 	ldw	r4,16(r19)
   41d80:	88800604 	addi	r2,r17,24
   41d84:	98c00604 	addi	r3,r19,24
   41d88:	89000415 	stw	r4,16(r17)
   41d8c:	99000517 	ldw	r4,20(r19)
   41d90:	89000515 	stw	r4,20(r17)
   41d94:	003f7106 	br	41b5c <__alt_data_end+0xfffd0e1c>
   41d98:	8805883a 	mov	r2,r17
   41d9c:	003fb006 	br	41c60 <__alt_data_end+0xfffd0f20>
   41da0:	8809883a 	mov	r4,r17
   41da4:	980b883a 	mov	r5,r19
   41da8:	00417000 	call	41700 <memmove>
   41dac:	003fb206 	br	41c78 <__alt_data_end+0xfffd0f38>
   41db0:	98800217 	ldw	r2,8(r19)
   41db4:	b8800415 	stw	r2,16(r23)
   41db8:	98800317 	ldw	r2,12(r19)
   41dbc:	b8800515 	stw	r2,20(r23)
   41dc0:	31000726 	beq	r6,r4,41de0 <_realloc_r+0x584>
   41dc4:	b8800604 	addi	r2,r23,24
   41dc8:	9cc00404 	addi	r19,r19,16
   41dcc:	003fa406 	br	41c60 <__alt_data_end+0xfffd0f20>
   41dd0:	9009883a 	mov	r4,r18
   41dd4:	00438500 	call	43850 <__malloc_unlock>
   41dd8:	0005883a 	mov	r2,zero
   41ddc:	003f0606 	br	419f8 <__alt_data_end+0xfffd0cb8>
   41de0:	98c00417 	ldw	r3,16(r19)
   41de4:	9cc00604 	addi	r19,r19,24
   41de8:	b8800804 	addi	r2,r23,32
   41dec:	b8c00615 	stw	r3,24(r23)
   41df0:	98ffff17 	ldw	r3,-4(r19)
   41df4:	b8c00715 	stw	r3,28(r23)
   41df8:	003f9906 	br	41c60 <__alt_data_end+0xfffd0f20>

00041dfc <_sbrk_r>:
   41dfc:	defffd04 	addi	sp,sp,-12
   41e00:	dc000015 	stw	r16,0(sp)
   41e04:	04000174 	movhi	r16,5
   41e08:	dc400115 	stw	r17,4(sp)
   41e0c:	8423f504 	addi	r16,r16,-28716
   41e10:	2023883a 	mov	r17,r4
   41e14:	2809883a 	mov	r4,r5
   41e18:	dfc00215 	stw	ra,8(sp)
   41e1c:	80000015 	stw	zero,0(r16)
   41e20:	0043a440 	call	43a44 <sbrk>
   41e24:	00ffffc4 	movi	r3,-1
   41e28:	10c00526 	beq	r2,r3,41e40 <_sbrk_r+0x44>
   41e2c:	dfc00217 	ldw	ra,8(sp)
   41e30:	dc400117 	ldw	r17,4(sp)
   41e34:	dc000017 	ldw	r16,0(sp)
   41e38:	dec00304 	addi	sp,sp,12
   41e3c:	f800283a 	ret
   41e40:	80c00017 	ldw	r3,0(r16)
   41e44:	183ff926 	beq	r3,zero,41e2c <__alt_data_end+0xfffd10ec>
   41e48:	88c00015 	stw	r3,0(r17)
   41e4c:	003ff706 	br	41e2c <__alt_data_end+0xfffd10ec>

00041e50 <__swsetup_r>:
   41e50:	00800134 	movhi	r2,4
   41e54:	defffd04 	addi	sp,sp,-12
   41e58:	109d4a04 	addi	r2,r2,29992
   41e5c:	dc400115 	stw	r17,4(sp)
   41e60:	2023883a 	mov	r17,r4
   41e64:	11000017 	ldw	r4,0(r2)
   41e68:	dc000015 	stw	r16,0(sp)
   41e6c:	dfc00215 	stw	ra,8(sp)
   41e70:	2821883a 	mov	r16,r5
   41e74:	20000226 	beq	r4,zero,41e80 <__swsetup_r+0x30>
   41e78:	20c00e17 	ldw	r3,56(r4)
   41e7c:	18002e26 	beq	r3,zero,41f38 <__swsetup_r+0xe8>
   41e80:	8080030b 	ldhu	r2,12(r16)
   41e84:	10c0020c 	andi	r3,r2,8
   41e88:	100d883a 	mov	r6,r2
   41e8c:	18000f26 	beq	r3,zero,41ecc <__swsetup_r+0x7c>
   41e90:	80c00417 	ldw	r3,16(r16)
   41e94:	18001526 	beq	r3,zero,41eec <__swsetup_r+0x9c>
   41e98:	1100004c 	andi	r4,r2,1
   41e9c:	20001c1e 	bne	r4,zero,41f10 <__swsetup_r+0xc0>
   41ea0:	1080008c 	andi	r2,r2,2
   41ea4:	1000261e 	bne	r2,zero,41f40 <__swsetup_r+0xf0>
   41ea8:	80800517 	ldw	r2,20(r16)
   41eac:	80800215 	stw	r2,8(r16)
   41eb0:	18001c26 	beq	r3,zero,41f24 <__swsetup_r+0xd4>
   41eb4:	0005883a 	mov	r2,zero
   41eb8:	dfc00217 	ldw	ra,8(sp)
   41ebc:	dc400117 	ldw	r17,4(sp)
   41ec0:	dc000017 	ldw	r16,0(sp)
   41ec4:	dec00304 	addi	sp,sp,12
   41ec8:	f800283a 	ret
   41ecc:	3080040c 	andi	r2,r6,16
   41ed0:	10001726 	beq	r2,zero,41f30 <__swsetup_r+0xe0>
   41ed4:	3080010c 	andi	r2,r6,4
   41ed8:	10001b1e 	bne	r2,zero,41f48 <__swsetup_r+0xf8>
   41edc:	80c00417 	ldw	r3,16(r16)
   41ee0:	30800214 	ori	r2,r6,8
   41ee4:	8080030d 	sth	r2,12(r16)
   41ee8:	183feb1e 	bne	r3,zero,41e98 <__alt_data_end+0xfffd1158>
   41eec:	1140a00c 	andi	r5,r2,640
   41ef0:	01008004 	movi	r4,512
   41ef4:	293fe826 	beq	r5,r4,41e98 <__alt_data_end+0xfffd1158>
   41ef8:	8809883a 	mov	r4,r17
   41efc:	800b883a 	mov	r5,r16
   41f00:	0042b100 	call	42b10 <__smakebuf_r>
   41f04:	8080030b 	ldhu	r2,12(r16)
   41f08:	80c00417 	ldw	r3,16(r16)
   41f0c:	003fe206 	br	41e98 <__alt_data_end+0xfffd1158>
   41f10:	80800517 	ldw	r2,20(r16)
   41f14:	80000215 	stw	zero,8(r16)
   41f18:	0085c83a 	sub	r2,zero,r2
   41f1c:	80800615 	stw	r2,24(r16)
   41f20:	183fe41e 	bne	r3,zero,41eb4 <__alt_data_end+0xfffd1174>
   41f24:	8080030b 	ldhu	r2,12(r16)
   41f28:	1080200c 	andi	r2,r2,128
   41f2c:	103fe226 	beq	r2,zero,41eb8 <__alt_data_end+0xfffd1178>
   41f30:	00bfffc4 	movi	r2,-1
   41f34:	003fe006 	br	41eb8 <__alt_data_end+0xfffd1178>
   41f38:	004253c0 	call	4253c <__sinit>
   41f3c:	003fd006 	br	41e80 <__alt_data_end+0xfffd1140>
   41f40:	0005883a 	mov	r2,zero
   41f44:	003fd906 	br	41eac <__alt_data_end+0xfffd116c>
   41f48:	81400c17 	ldw	r5,48(r16)
   41f4c:	28000626 	beq	r5,zero,41f68 <__swsetup_r+0x118>
   41f50:	80801004 	addi	r2,r16,64
   41f54:	28800326 	beq	r5,r2,41f64 <__swsetup_r+0x114>
   41f58:	8809883a 	mov	r4,r17
   41f5c:	00426b00 	call	426b0 <_free_r>
   41f60:	8180030b 	ldhu	r6,12(r16)
   41f64:	80000c15 	stw	zero,48(r16)
   41f68:	80c00417 	ldw	r3,16(r16)
   41f6c:	00bff6c4 	movi	r2,-37
   41f70:	118c703a 	and	r6,r2,r6
   41f74:	80000115 	stw	zero,4(r16)
   41f78:	80c00015 	stw	r3,0(r16)
   41f7c:	003fd806 	br	41ee0 <__alt_data_end+0xfffd11a0>

00041f80 <_fflush_r>:
   41f80:	defffb04 	addi	sp,sp,-20
   41f84:	dcc00315 	stw	r19,12(sp)
   41f88:	dc000015 	stw	r16,0(sp)
   41f8c:	dfc00415 	stw	ra,16(sp)
   41f90:	dc800215 	stw	r18,8(sp)
   41f94:	dc400115 	stw	r17,4(sp)
   41f98:	2027883a 	mov	r19,r4
   41f9c:	2821883a 	mov	r16,r5
   41fa0:	20000226 	beq	r4,zero,41fac <_fflush_r+0x2c>
   41fa4:	20800e17 	ldw	r2,56(r4)
   41fa8:	10005326 	beq	r2,zero,420f8 <_fflush_r+0x178>
   41fac:	8080030b 	ldhu	r2,12(r16)
   41fb0:	10ffffcc 	andi	r3,r2,65535
   41fb4:	18e0001c 	xori	r3,r3,32768
   41fb8:	18e00004 	addi	r3,r3,-32768
   41fbc:	18002c26 	beq	r3,zero,42070 <_fflush_r+0xf0>
   41fc0:	10c0020c 	andi	r3,r2,8
   41fc4:	1800321e 	bne	r3,zero,42090 <_fflush_r+0x110>
   41fc8:	80c00117 	ldw	r3,4(r16)
   41fcc:	10820014 	ori	r2,r2,2048
   41fd0:	8080030d 	sth	r2,12(r16)
   41fd4:	00c0570e 	bge	zero,r3,42134 <_fflush_r+0x1b4>
   41fd8:	82000a17 	ldw	r8,40(r16)
   41fdc:	40002426 	beq	r8,zero,42070 <_fflush_r+0xf0>
   41fe0:	9c400017 	ldw	r17,0(r19)
   41fe4:	10c4000c 	andi	r3,r2,4096
   41fe8:	98000015 	stw	zero,0(r19)
   41fec:	18004626 	beq	r3,zero,42108 <_fflush_r+0x188>
   41ff0:	81801417 	ldw	r6,80(r16)
   41ff4:	10c0010c 	andi	r3,r2,4
   41ff8:	18000626 	beq	r3,zero,42014 <_fflush_r+0x94>
   41ffc:	80c00117 	ldw	r3,4(r16)
   42000:	80800c17 	ldw	r2,48(r16)
   42004:	30cdc83a 	sub	r6,r6,r3
   42008:	10000226 	beq	r2,zero,42014 <_fflush_r+0x94>
   4200c:	80800f17 	ldw	r2,60(r16)
   42010:	308dc83a 	sub	r6,r6,r2
   42014:	81400717 	ldw	r5,28(r16)
   42018:	9809883a 	mov	r4,r19
   4201c:	000f883a 	mov	r7,zero
   42020:	403ee83a 	callr	r8
   42024:	00ffffc4 	movi	r3,-1
   42028:	10c04526 	beq	r2,r3,42140 <_fflush_r+0x1c0>
   4202c:	80c0030b 	ldhu	r3,12(r16)
   42030:	81000417 	ldw	r4,16(r16)
   42034:	80000115 	stw	zero,4(r16)
   42038:	197dffcc 	andi	r5,r3,63487
   4203c:	8140030d 	sth	r5,12(r16)
   42040:	81000015 	stw	r4,0(r16)
   42044:	18c4000c 	andi	r3,r3,4096
   42048:	18000126 	beq	r3,zero,42050 <_fflush_r+0xd0>
   4204c:	80801415 	stw	r2,80(r16)
   42050:	81400c17 	ldw	r5,48(r16)
   42054:	9c400015 	stw	r17,0(r19)
   42058:	28000526 	beq	r5,zero,42070 <_fflush_r+0xf0>
   4205c:	80801004 	addi	r2,r16,64
   42060:	28800226 	beq	r5,r2,4206c <_fflush_r+0xec>
   42064:	9809883a 	mov	r4,r19
   42068:	00426b00 	call	426b0 <_free_r>
   4206c:	80000c15 	stw	zero,48(r16)
   42070:	0005883a 	mov	r2,zero
   42074:	dfc00417 	ldw	ra,16(sp)
   42078:	dcc00317 	ldw	r19,12(sp)
   4207c:	dc800217 	ldw	r18,8(sp)
   42080:	dc400117 	ldw	r17,4(sp)
   42084:	dc000017 	ldw	r16,0(sp)
   42088:	dec00504 	addi	sp,sp,20
   4208c:	f800283a 	ret
   42090:	84800417 	ldw	r18,16(r16)
   42094:	903ff626 	beq	r18,zero,42070 <__alt_data_end+0xfffd1330>
   42098:	84400017 	ldw	r17,0(r16)
   4209c:	108000cc 	andi	r2,r2,3
   420a0:	84800015 	stw	r18,0(r16)
   420a4:	8ca3c83a 	sub	r17,r17,r18
   420a8:	10001526 	beq	r2,zero,42100 <_fflush_r+0x180>
   420ac:	0005883a 	mov	r2,zero
   420b0:	80800215 	stw	r2,8(r16)
   420b4:	04400316 	blt	zero,r17,420c4 <_fflush_r+0x144>
   420b8:	003fed06 	br	42070 <__alt_data_end+0xfffd1330>
   420bc:	90a5883a 	add	r18,r18,r2
   420c0:	047feb0e 	bge	zero,r17,42070 <__alt_data_end+0xfffd1330>
   420c4:	80800917 	ldw	r2,36(r16)
   420c8:	81400717 	ldw	r5,28(r16)
   420cc:	880f883a 	mov	r7,r17
   420d0:	900d883a 	mov	r6,r18
   420d4:	9809883a 	mov	r4,r19
   420d8:	103ee83a 	callr	r2
   420dc:	88a3c83a 	sub	r17,r17,r2
   420e0:	00bff616 	blt	zero,r2,420bc <__alt_data_end+0xfffd137c>
   420e4:	80c0030b 	ldhu	r3,12(r16)
   420e8:	00bfffc4 	movi	r2,-1
   420ec:	18c01014 	ori	r3,r3,64
   420f0:	80c0030d 	sth	r3,12(r16)
   420f4:	003fdf06 	br	42074 <__alt_data_end+0xfffd1334>
   420f8:	004253c0 	call	4253c <__sinit>
   420fc:	003fab06 	br	41fac <__alt_data_end+0xfffd126c>
   42100:	80800517 	ldw	r2,20(r16)
   42104:	003fea06 	br	420b0 <__alt_data_end+0xfffd1370>
   42108:	81400717 	ldw	r5,28(r16)
   4210c:	000d883a 	mov	r6,zero
   42110:	9809883a 	mov	r4,r19
   42114:	01c00044 	movi	r7,1
   42118:	403ee83a 	callr	r8
   4211c:	100d883a 	mov	r6,r2
   42120:	00bfffc4 	movi	r2,-1
   42124:	30801326 	beq	r6,r2,42174 <_fflush_r+0x1f4>
   42128:	8080030b 	ldhu	r2,12(r16)
   4212c:	82000a17 	ldw	r8,40(r16)
   42130:	003fb006 	br	41ff4 <__alt_data_end+0xfffd12b4>
   42134:	80c00f17 	ldw	r3,60(r16)
   42138:	00ffa716 	blt	zero,r3,41fd8 <__alt_data_end+0xfffd1298>
   4213c:	003fcc06 	br	42070 <__alt_data_end+0xfffd1330>
   42140:	98c00017 	ldw	r3,0(r19)
   42144:	183fb926 	beq	r3,zero,4202c <__alt_data_end+0xfffd12ec>
   42148:	01000744 	movi	r4,29
   4214c:	19000226 	beq	r3,r4,42158 <_fflush_r+0x1d8>
   42150:	01000584 	movi	r4,22
   42154:	1900101e 	bne	r3,r4,42198 <_fflush_r+0x218>
   42158:	8080030b 	ldhu	r2,12(r16)
   4215c:	80c00417 	ldw	r3,16(r16)
   42160:	80000115 	stw	zero,4(r16)
   42164:	10bdffcc 	andi	r2,r2,63487
   42168:	8080030d 	sth	r2,12(r16)
   4216c:	80c00015 	stw	r3,0(r16)
   42170:	003fb706 	br	42050 <__alt_data_end+0xfffd1310>
   42174:	98800017 	ldw	r2,0(r19)
   42178:	103feb26 	beq	r2,zero,42128 <__alt_data_end+0xfffd13e8>
   4217c:	00c00744 	movi	r3,29
   42180:	10c00226 	beq	r2,r3,4218c <_fflush_r+0x20c>
   42184:	00c00584 	movi	r3,22
   42188:	10ffd61e 	bne	r2,r3,420e4 <__alt_data_end+0xfffd13a4>
   4218c:	9c400015 	stw	r17,0(r19)
   42190:	0005883a 	mov	r2,zero
   42194:	003fb706 	br	42074 <__alt_data_end+0xfffd1334>
   42198:	80c0030b 	ldhu	r3,12(r16)
   4219c:	18c01014 	ori	r3,r3,64
   421a0:	80c0030d 	sth	r3,12(r16)
   421a4:	003fb306 	br	42074 <__alt_data_end+0xfffd1334>

000421a8 <fflush>:
   421a8:	20000526 	beq	r4,zero,421c0 <fflush+0x18>
   421ac:	00800134 	movhi	r2,4
   421b0:	109d4a04 	addi	r2,r2,29992
   421b4:	200b883a 	mov	r5,r4
   421b8:	11000017 	ldw	r4,0(r2)
   421bc:	0041f801 	jmpi	41f80 <_fflush_r>
   421c0:	00800134 	movhi	r2,4
   421c4:	109d4904 	addi	r2,r2,29988
   421c8:	11000017 	ldw	r4,0(r2)
   421cc:	01400134 	movhi	r5,4
   421d0:	2947e004 	addi	r5,r5,8064
   421d4:	0042a581 	jmpi	42a58 <_fwalk_reent>

000421d8 <__fp_lock>:
   421d8:	0005883a 	mov	r2,zero
   421dc:	f800283a 	ret

000421e0 <__fp_unlock>:
   421e0:	0005883a 	mov	r2,zero
   421e4:	f800283a 	ret

000421e8 <_cleanup_r>:
   421e8:	01400134 	movhi	r5,4
   421ec:	294c3604 	addi	r5,r5,12504
   421f0:	00429a01 	jmpi	429a0 <_fwalk>

000421f4 <__sinit.part.1>:
   421f4:	defff604 	addi	sp,sp,-40
   421f8:	00c00134 	movhi	r3,4
   421fc:	dfc00915 	stw	ra,36(sp)
   42200:	df000815 	stw	fp,32(sp)
   42204:	ddc00715 	stw	r23,28(sp)
   42208:	dd800615 	stw	r22,24(sp)
   4220c:	dd400515 	stw	r21,20(sp)
   42210:	dd000415 	stw	r20,16(sp)
   42214:	dcc00315 	stw	r19,12(sp)
   42218:	dc800215 	stw	r18,8(sp)
   4221c:	dc400115 	stw	r17,4(sp)
   42220:	dc000015 	stw	r16,0(sp)
   42224:	18c87a04 	addi	r3,r3,8680
   42228:	24000117 	ldw	r16,4(r4)
   4222c:	20c00f15 	stw	r3,60(r4)
   42230:	07000044 	movi	fp,1
   42234:	00c000c4 	movi	r3,3
   42238:	2080bb04 	addi	r2,r4,748
   4223c:	20c0b915 	stw	r3,740(r4)
   42240:	27000e15 	stw	fp,56(r4)
   42244:	2080ba15 	stw	r2,744(r4)
   42248:	2000b815 	stw	zero,736(r4)
   4224c:	05c00204 	movi	r23,8
   42250:	00800104 	movi	r2,4
   42254:	2025883a 	mov	r18,r4
   42258:	b80d883a 	mov	r6,r23
   4225c:	81001704 	addi	r4,r16,92
   42260:	000b883a 	mov	r5,zero
   42264:	80000015 	stw	zero,0(r16)
   42268:	80000115 	stw	zero,4(r16)
   4226c:	80000215 	stw	zero,8(r16)
   42270:	8080030d 	sth	r2,12(r16)
   42274:	80001915 	stw	zero,100(r16)
   42278:	8000038d 	sth	zero,14(r16)
   4227c:	80000415 	stw	zero,16(r16)
   42280:	80000515 	stw	zero,20(r16)
   42284:	80000615 	stw	zero,24(r16)
   42288:	0042cc80 	call	42cc8 <memset>
   4228c:	05800134 	movhi	r22,4
   42290:	94400217 	ldw	r17,8(r18)
   42294:	05400134 	movhi	r21,4
   42298:	05000134 	movhi	r20,4
   4229c:	04c00134 	movhi	r19,4
   422a0:	b58b7b04 	addi	r22,r22,11756
   422a4:	ad4b9204 	addi	r21,r21,11848
   422a8:	a50bb104 	addi	r20,r20,11972
   422ac:	9ccbc804 	addi	r19,r19,12064
   422b0:	85800815 	stw	r22,32(r16)
   422b4:	85400915 	stw	r21,36(r16)
   422b8:	85000a15 	stw	r20,40(r16)
   422bc:	84c00b15 	stw	r19,44(r16)
   422c0:	84000715 	stw	r16,28(r16)
   422c4:	00800284 	movi	r2,10
   422c8:	89001704 	addi	r4,r17,92
   422cc:	b80d883a 	mov	r6,r23
   422d0:	000b883a 	mov	r5,zero
   422d4:	88000015 	stw	zero,0(r17)
   422d8:	88000115 	stw	zero,4(r17)
   422dc:	88000215 	stw	zero,8(r17)
   422e0:	8880030d 	sth	r2,12(r17)
   422e4:	88001915 	stw	zero,100(r17)
   422e8:	8f00038d 	sth	fp,14(r17)
   422ec:	88000415 	stw	zero,16(r17)
   422f0:	88000515 	stw	zero,20(r17)
   422f4:	88000615 	stw	zero,24(r17)
   422f8:	0042cc80 	call	42cc8 <memset>
   422fc:	94000317 	ldw	r16,12(r18)
   42300:	00800484 	movi	r2,18
   42304:	8c400715 	stw	r17,28(r17)
   42308:	8d800815 	stw	r22,32(r17)
   4230c:	8d400915 	stw	r21,36(r17)
   42310:	8d000a15 	stw	r20,40(r17)
   42314:	8cc00b15 	stw	r19,44(r17)
   42318:	8080030d 	sth	r2,12(r16)
   4231c:	00800084 	movi	r2,2
   42320:	80000015 	stw	zero,0(r16)
   42324:	80000115 	stw	zero,4(r16)
   42328:	80000215 	stw	zero,8(r16)
   4232c:	80001915 	stw	zero,100(r16)
   42330:	8080038d 	sth	r2,14(r16)
   42334:	80000415 	stw	zero,16(r16)
   42338:	80000515 	stw	zero,20(r16)
   4233c:	80000615 	stw	zero,24(r16)
   42340:	81001704 	addi	r4,r16,92
   42344:	000b883a 	mov	r5,zero
   42348:	b80d883a 	mov	r6,r23
   4234c:	0042cc80 	call	42cc8 <memset>
   42350:	84000715 	stw	r16,28(r16)
   42354:	85800815 	stw	r22,32(r16)
   42358:	85400915 	stw	r21,36(r16)
   4235c:	85000a15 	stw	r20,40(r16)
   42360:	84c00b15 	stw	r19,44(r16)
   42364:	dfc00917 	ldw	ra,36(sp)
   42368:	df000817 	ldw	fp,32(sp)
   4236c:	ddc00717 	ldw	r23,28(sp)
   42370:	dd800617 	ldw	r22,24(sp)
   42374:	dd400517 	ldw	r21,20(sp)
   42378:	dd000417 	ldw	r20,16(sp)
   4237c:	dcc00317 	ldw	r19,12(sp)
   42380:	dc800217 	ldw	r18,8(sp)
   42384:	dc400117 	ldw	r17,4(sp)
   42388:	dc000017 	ldw	r16,0(sp)
   4238c:	dec00a04 	addi	sp,sp,40
   42390:	f800283a 	ret

00042394 <__sfmoreglue>:
   42394:	defffc04 	addi	sp,sp,-16
   42398:	dc800215 	stw	r18,8(sp)
   4239c:	2825883a 	mov	r18,r5
   423a0:	dc000015 	stw	r16,0(sp)
   423a4:	01401a04 	movi	r5,104
   423a8:	2021883a 	mov	r16,r4
   423ac:	9009883a 	mov	r4,r18
   423b0:	dfc00315 	stw	ra,12(sp)
   423b4:	dc400115 	stw	r17,4(sp)
   423b8:	00407080 	call	40708 <__mulsi3>
   423bc:	8009883a 	mov	r4,r16
   423c0:	11400304 	addi	r5,r2,12
   423c4:	1023883a 	mov	r17,r2
   423c8:	0040d380 	call	40d38 <_malloc_r>
   423cc:	1021883a 	mov	r16,r2
   423d0:	10000726 	beq	r2,zero,423f0 <__sfmoreglue+0x5c>
   423d4:	11000304 	addi	r4,r2,12
   423d8:	10000015 	stw	zero,0(r2)
   423dc:	14800115 	stw	r18,4(r2)
   423e0:	11000215 	stw	r4,8(r2)
   423e4:	000b883a 	mov	r5,zero
   423e8:	880d883a 	mov	r6,r17
   423ec:	0042cc80 	call	42cc8 <memset>
   423f0:	8005883a 	mov	r2,r16
   423f4:	dfc00317 	ldw	ra,12(sp)
   423f8:	dc800217 	ldw	r18,8(sp)
   423fc:	dc400117 	ldw	r17,4(sp)
   42400:	dc000017 	ldw	r16,0(sp)
   42404:	dec00404 	addi	sp,sp,16
   42408:	f800283a 	ret

0004240c <__sfp>:
   4240c:	00800134 	movhi	r2,4
   42410:	defffb04 	addi	sp,sp,-20
   42414:	109d4904 	addi	r2,r2,29988
   42418:	dc800215 	stw	r18,8(sp)
   4241c:	14800017 	ldw	r18,0(r2)
   42420:	dcc00315 	stw	r19,12(sp)
   42424:	dfc00415 	stw	ra,16(sp)
   42428:	90800e17 	ldw	r2,56(r18)
   4242c:	dc400115 	stw	r17,4(sp)
   42430:	dc000015 	stw	r16,0(sp)
   42434:	2027883a 	mov	r19,r4
   42438:	1000021e 	bne	r2,zero,42444 <__sfp+0x38>
   4243c:	9009883a 	mov	r4,r18
   42440:	00421f40 	call	421f4 <__sinit.part.1>
   42444:	9480b804 	addi	r18,r18,736
   42448:	047fffc4 	movi	r17,-1
   4244c:	91400117 	ldw	r5,4(r18)
   42450:	94000217 	ldw	r16,8(r18)
   42454:	297fffc4 	addi	r5,r5,-1
   42458:	28000a16 	blt	r5,zero,42484 <__sfp+0x78>
   4245c:	8080030f 	ldh	r2,12(r16)
   42460:	10000c26 	beq	r2,zero,42494 <__sfp+0x88>
   42464:	80c01d04 	addi	r3,r16,116
   42468:	00000206 	br	42474 <__sfp+0x68>
   4246c:	18bfe60f 	ldh	r2,-104(r3)
   42470:	10000826 	beq	r2,zero,42494 <__sfp+0x88>
   42474:	297fffc4 	addi	r5,r5,-1
   42478:	1c3ffd04 	addi	r16,r3,-12
   4247c:	18c01a04 	addi	r3,r3,104
   42480:	2c7ffa1e 	bne	r5,r17,4246c <__alt_data_end+0xfffd172c>
   42484:	90800017 	ldw	r2,0(r18)
   42488:	10001d26 	beq	r2,zero,42500 <__sfp+0xf4>
   4248c:	1025883a 	mov	r18,r2
   42490:	003fee06 	br	4244c <__alt_data_end+0xfffd170c>
   42494:	00bfffc4 	movi	r2,-1
   42498:	8080038d 	sth	r2,14(r16)
   4249c:	00800044 	movi	r2,1
   424a0:	8080030d 	sth	r2,12(r16)
   424a4:	80001915 	stw	zero,100(r16)
   424a8:	80000015 	stw	zero,0(r16)
   424ac:	80000215 	stw	zero,8(r16)
   424b0:	80000115 	stw	zero,4(r16)
   424b4:	80000415 	stw	zero,16(r16)
   424b8:	80000515 	stw	zero,20(r16)
   424bc:	80000615 	stw	zero,24(r16)
   424c0:	81001704 	addi	r4,r16,92
   424c4:	000b883a 	mov	r5,zero
   424c8:	01800204 	movi	r6,8
   424cc:	0042cc80 	call	42cc8 <memset>
   424d0:	8005883a 	mov	r2,r16
   424d4:	80000c15 	stw	zero,48(r16)
   424d8:	80000d15 	stw	zero,52(r16)
   424dc:	80001115 	stw	zero,68(r16)
   424e0:	80001215 	stw	zero,72(r16)
   424e4:	dfc00417 	ldw	ra,16(sp)
   424e8:	dcc00317 	ldw	r19,12(sp)
   424ec:	dc800217 	ldw	r18,8(sp)
   424f0:	dc400117 	ldw	r17,4(sp)
   424f4:	dc000017 	ldw	r16,0(sp)
   424f8:	dec00504 	addi	sp,sp,20
   424fc:	f800283a 	ret
   42500:	9809883a 	mov	r4,r19
   42504:	01400104 	movi	r5,4
   42508:	00423940 	call	42394 <__sfmoreglue>
   4250c:	90800015 	stw	r2,0(r18)
   42510:	103fde1e 	bne	r2,zero,4248c <__alt_data_end+0xfffd174c>
   42514:	00800304 	movi	r2,12
   42518:	98800015 	stw	r2,0(r19)
   4251c:	0005883a 	mov	r2,zero
   42520:	003ff006 	br	424e4 <__alt_data_end+0xfffd17a4>

00042524 <_cleanup>:
   42524:	00800134 	movhi	r2,4
   42528:	109d4904 	addi	r2,r2,29988
   4252c:	11000017 	ldw	r4,0(r2)
   42530:	01400134 	movhi	r5,4
   42534:	294c3604 	addi	r5,r5,12504
   42538:	00429a01 	jmpi	429a0 <_fwalk>

0004253c <__sinit>:
   4253c:	20800e17 	ldw	r2,56(r4)
   42540:	10000126 	beq	r2,zero,42548 <__sinit+0xc>
   42544:	f800283a 	ret
   42548:	00421f41 	jmpi	421f4 <__sinit.part.1>

0004254c <__sfp_lock_acquire>:
   4254c:	f800283a 	ret

00042550 <__sfp_lock_release>:
   42550:	f800283a 	ret

00042554 <__sinit_lock_acquire>:
   42554:	f800283a 	ret

00042558 <__sinit_lock_release>:
   42558:	f800283a 	ret

0004255c <__fp_lock_all>:
   4255c:	00800134 	movhi	r2,4
   42560:	109d4a04 	addi	r2,r2,29992
   42564:	11000017 	ldw	r4,0(r2)
   42568:	01400134 	movhi	r5,4
   4256c:	29487604 	addi	r5,r5,8664
   42570:	00429a01 	jmpi	429a0 <_fwalk>

00042574 <__fp_unlock_all>:
   42574:	00800134 	movhi	r2,4
   42578:	109d4a04 	addi	r2,r2,29992
   4257c:	11000017 	ldw	r4,0(r2)
   42580:	01400134 	movhi	r5,4
   42584:	29487804 	addi	r5,r5,8672
   42588:	00429a01 	jmpi	429a0 <_fwalk>

0004258c <_malloc_trim_r>:
   4258c:	defffb04 	addi	sp,sp,-20
   42590:	dcc00315 	stw	r19,12(sp)
   42594:	04c00134 	movhi	r19,4
   42598:	dc800215 	stw	r18,8(sp)
   4259c:	dc400115 	stw	r17,4(sp)
   425a0:	dc000015 	stw	r16,0(sp)
   425a4:	dfc00415 	stw	ra,16(sp)
   425a8:	2821883a 	mov	r16,r5
   425ac:	9cd7c504 	addi	r19,r19,24340
   425b0:	2025883a 	mov	r18,r4
   425b4:	00438300 	call	43830 <__malloc_lock>
   425b8:	98800217 	ldw	r2,8(r19)
   425bc:	14400117 	ldw	r17,4(r2)
   425c0:	00bfff04 	movi	r2,-4
   425c4:	88a2703a 	and	r17,r17,r2
   425c8:	8c21c83a 	sub	r16,r17,r16
   425cc:	8403fbc4 	addi	r16,r16,4079
   425d0:	8020d33a 	srli	r16,r16,12
   425d4:	0083ffc4 	movi	r2,4095
   425d8:	843fffc4 	addi	r16,r16,-1
   425dc:	8020933a 	slli	r16,r16,12
   425e0:	1400060e 	bge	r2,r16,425fc <_malloc_trim_r+0x70>
   425e4:	9009883a 	mov	r4,r18
   425e8:	000b883a 	mov	r5,zero
   425ec:	0041dfc0 	call	41dfc <_sbrk_r>
   425f0:	98c00217 	ldw	r3,8(r19)
   425f4:	1c47883a 	add	r3,r3,r17
   425f8:	10c00a26 	beq	r2,r3,42624 <_malloc_trim_r+0x98>
   425fc:	9009883a 	mov	r4,r18
   42600:	00438500 	call	43850 <__malloc_unlock>
   42604:	0005883a 	mov	r2,zero
   42608:	dfc00417 	ldw	ra,16(sp)
   4260c:	dcc00317 	ldw	r19,12(sp)
   42610:	dc800217 	ldw	r18,8(sp)
   42614:	dc400117 	ldw	r17,4(sp)
   42618:	dc000017 	ldw	r16,0(sp)
   4261c:	dec00504 	addi	sp,sp,20
   42620:	f800283a 	ret
   42624:	9009883a 	mov	r4,r18
   42628:	040bc83a 	sub	r5,zero,r16
   4262c:	0041dfc0 	call	41dfc <_sbrk_r>
   42630:	00ffffc4 	movi	r3,-1
   42634:	10c00d26 	beq	r2,r3,4266c <_malloc_trim_r+0xe0>
   42638:	00c00174 	movhi	r3,5
   4263c:	18e3fc04 	addi	r3,r3,-28688
   42640:	18800017 	ldw	r2,0(r3)
   42644:	99000217 	ldw	r4,8(r19)
   42648:	8c23c83a 	sub	r17,r17,r16
   4264c:	8c400054 	ori	r17,r17,1
   42650:	1421c83a 	sub	r16,r2,r16
   42654:	24400115 	stw	r17,4(r4)
   42658:	9009883a 	mov	r4,r18
   4265c:	1c000015 	stw	r16,0(r3)
   42660:	00438500 	call	43850 <__malloc_unlock>
   42664:	00800044 	movi	r2,1
   42668:	003fe706 	br	42608 <__alt_data_end+0xfffd18c8>
   4266c:	9009883a 	mov	r4,r18
   42670:	000b883a 	mov	r5,zero
   42674:	0041dfc0 	call	41dfc <_sbrk_r>
   42678:	99000217 	ldw	r4,8(r19)
   4267c:	014003c4 	movi	r5,15
   42680:	1107c83a 	sub	r3,r2,r4
   42684:	28ffdd0e 	bge	r5,r3,425fc <__alt_data_end+0xfffd18bc>
   42688:	01400134 	movhi	r5,4
   4268c:	295d4b04 	addi	r5,r5,29996
   42690:	29400017 	ldw	r5,0(r5)
   42694:	18c00054 	ori	r3,r3,1
   42698:	20c00115 	stw	r3,4(r4)
   4269c:	00c00174 	movhi	r3,5
   426a0:	1145c83a 	sub	r2,r2,r5
   426a4:	18e3fc04 	addi	r3,r3,-28688
   426a8:	18800015 	stw	r2,0(r3)
   426ac:	003fd306 	br	425fc <__alt_data_end+0xfffd18bc>

000426b0 <_free_r>:
   426b0:	28004c26 	beq	r5,zero,427e4 <_free_r+0x134>
   426b4:	defffd04 	addi	sp,sp,-12
   426b8:	dc400115 	stw	r17,4(sp)
   426bc:	dc000015 	stw	r16,0(sp)
   426c0:	2023883a 	mov	r17,r4
   426c4:	2821883a 	mov	r16,r5
   426c8:	dfc00215 	stw	ra,8(sp)
   426cc:	00438300 	call	43830 <__malloc_lock>
   426d0:	813fff17 	ldw	r4,-4(r16)
   426d4:	00bfff84 	movi	r2,-2
   426d8:	02400134 	movhi	r9,4
   426dc:	81bffe04 	addi	r6,r16,-8
   426e0:	2084703a 	and	r2,r4,r2
   426e4:	4a57c504 	addi	r9,r9,24340
   426e8:	308b883a 	add	r5,r6,r2
   426ec:	2a000117 	ldw	r8,4(r5)
   426f0:	49c00217 	ldw	r7,8(r9)
   426f4:	00ffff04 	movi	r3,-4
   426f8:	40c6703a 	and	r3,r8,r3
   426fc:	39405326 	beq	r7,r5,4284c <_free_r+0x19c>
   42700:	28c00115 	stw	r3,4(r5)
   42704:	2100004c 	andi	r4,r4,1
   42708:	2000091e 	bne	r4,zero,42730 <_free_r+0x80>
   4270c:	81fffe17 	ldw	r7,-8(r16)
   42710:	4a000204 	addi	r8,r9,8
   42714:	31cdc83a 	sub	r6,r6,r7
   42718:	31000217 	ldw	r4,8(r6)
   4271c:	11c5883a 	add	r2,r2,r7
   42720:	22006126 	beq	r4,r8,428a8 <_free_r+0x1f8>
   42724:	31c00317 	ldw	r7,12(r6)
   42728:	21c00315 	stw	r7,12(r4)
   4272c:	39000215 	stw	r4,8(r7)
   42730:	28c9883a 	add	r4,r5,r3
   42734:	21c00117 	ldw	r7,4(r4)
   42738:	39c0004c 	andi	r7,r7,1
   4273c:	38000d1e 	bne	r7,zero,42774 <_free_r+0xc4>
   42740:	29000217 	ldw	r4,8(r5)
   42744:	10c5883a 	add	r2,r2,r3
   42748:	00c00134 	movhi	r3,4
   4274c:	18d7c704 	addi	r3,r3,24348
   42750:	20c07526 	beq	r4,r3,42928 <_free_r+0x278>
   42754:	29c00317 	ldw	r7,12(r5)
   42758:	11400054 	ori	r5,r2,1
   4275c:	3087883a 	add	r3,r6,r2
   42760:	21c00315 	stw	r7,12(r4)
   42764:	39000215 	stw	r4,8(r7)
   42768:	31400115 	stw	r5,4(r6)
   4276c:	18800015 	stw	r2,0(r3)
   42770:	00000406 	br	42784 <_free_r+0xd4>
   42774:	10c00054 	ori	r3,r2,1
   42778:	30c00115 	stw	r3,4(r6)
   4277c:	3087883a 	add	r3,r6,r2
   42780:	18800015 	stw	r2,0(r3)
   42784:	00c07fc4 	movi	r3,511
   42788:	18801736 	bltu	r3,r2,427e8 <_free_r+0x138>
   4278c:	1004d0fa 	srli	r2,r2,3
   42790:	01400044 	movi	r5,1
   42794:	49000117 	ldw	r4,4(r9)
   42798:	1087883a 	add	r3,r2,r2
   4279c:	18c7883a 	add	r3,r3,r3
   427a0:	1005d0ba 	srai	r2,r2,2
   427a4:	18c7883a 	add	r3,r3,r3
   427a8:	1a47883a 	add	r3,r3,r9
   427ac:	19c00217 	ldw	r7,8(r3)
   427b0:	2884983a 	sll	r2,r5,r2
   427b4:	30c00315 	stw	r3,12(r6)
   427b8:	31c00215 	stw	r7,8(r6)
   427bc:	1104b03a 	or	r2,r2,r4
   427c0:	19800215 	stw	r6,8(r3)
   427c4:	48800115 	stw	r2,4(r9)
   427c8:	39800315 	stw	r6,12(r7)
   427cc:	8809883a 	mov	r4,r17
   427d0:	dfc00217 	ldw	ra,8(sp)
   427d4:	dc400117 	ldw	r17,4(sp)
   427d8:	dc000017 	ldw	r16,0(sp)
   427dc:	dec00304 	addi	sp,sp,12
   427e0:	00438501 	jmpi	43850 <__malloc_unlock>
   427e4:	f800283a 	ret
   427e8:	1006d27a 	srli	r3,r2,9
   427ec:	01000104 	movi	r4,4
   427f0:	20c04036 	bltu	r4,r3,428f4 <_free_r+0x244>
   427f4:	1006d1ba 	srli	r3,r2,6
   427f8:	19400e04 	addi	r5,r3,56
   427fc:	2947883a 	add	r3,r5,r5
   42800:	18c7883a 	add	r3,r3,r3
   42804:	18c7883a 	add	r3,r3,r3
   42808:	1a49883a 	add	r4,r3,r9
   4280c:	20c00217 	ldw	r3,8(r4)
   42810:	01c00134 	movhi	r7,4
   42814:	39d7c504 	addi	r7,r7,24340
   42818:	19003b26 	beq	r3,r4,42908 <_free_r+0x258>
   4281c:	01ffff04 	movi	r7,-4
   42820:	19400117 	ldw	r5,4(r3)
   42824:	29ca703a 	and	r5,r5,r7
   42828:	1140022e 	bgeu	r2,r5,42834 <_free_r+0x184>
   4282c:	18c00217 	ldw	r3,8(r3)
   42830:	20fffb1e 	bne	r4,r3,42820 <__alt_data_end+0xfffd1ae0>
   42834:	18800317 	ldw	r2,12(r3)
   42838:	30800315 	stw	r2,12(r6)
   4283c:	30c00215 	stw	r3,8(r6)
   42840:	11800215 	stw	r6,8(r2)
   42844:	19800315 	stw	r6,12(r3)
   42848:	003fe006 	br	427cc <__alt_data_end+0xfffd1a8c>
   4284c:	2100004c 	andi	r4,r4,1
   42850:	1885883a 	add	r2,r3,r2
   42854:	2000071e 	bne	r4,zero,42874 <_free_r+0x1c4>
   42858:	817ffe17 	ldw	r5,-8(r16)
   4285c:	314dc83a 	sub	r6,r6,r5
   42860:	30c00317 	ldw	r3,12(r6)
   42864:	31000217 	ldw	r4,8(r6)
   42868:	1145883a 	add	r2,r2,r5
   4286c:	20c00315 	stw	r3,12(r4)
   42870:	19000215 	stw	r4,8(r3)
   42874:	10c00054 	ori	r3,r2,1
   42878:	30c00115 	stw	r3,4(r6)
   4287c:	00c00134 	movhi	r3,4
   42880:	18dd4c04 	addi	r3,r3,30000
   42884:	18c00017 	ldw	r3,0(r3)
   42888:	49800215 	stw	r6,8(r9)
   4288c:	10ffcf36 	bltu	r2,r3,427cc <__alt_data_end+0xfffd1a8c>
   42890:	00800174 	movhi	r2,5
   42894:	10a3f404 	addi	r2,r2,-28720
   42898:	11400017 	ldw	r5,0(r2)
   4289c:	8809883a 	mov	r4,r17
   428a0:	004258c0 	call	4258c <_malloc_trim_r>
   428a4:	003fc906 	br	427cc <__alt_data_end+0xfffd1a8c>
   428a8:	28c9883a 	add	r4,r5,r3
   428ac:	21000117 	ldw	r4,4(r4)
   428b0:	2100004c 	andi	r4,r4,1
   428b4:	20000a1e 	bne	r4,zero,428e0 <_free_r+0x230>
   428b8:	29000317 	ldw	r4,12(r5)
   428bc:	29400217 	ldw	r5,8(r5)
   428c0:	10c5883a 	add	r2,r2,r3
   428c4:	10c00054 	ori	r3,r2,1
   428c8:	29000315 	stw	r4,12(r5)
   428cc:	21400215 	stw	r5,8(r4)
   428d0:	30c00115 	stw	r3,4(r6)
   428d4:	308d883a 	add	r6,r6,r2
   428d8:	30800015 	stw	r2,0(r6)
   428dc:	003fbb06 	br	427cc <__alt_data_end+0xfffd1a8c>
   428e0:	10c00054 	ori	r3,r2,1
   428e4:	30c00115 	stw	r3,4(r6)
   428e8:	308d883a 	add	r6,r6,r2
   428ec:	30800015 	stw	r2,0(r6)
   428f0:	003fb606 	br	427cc <__alt_data_end+0xfffd1a8c>
   428f4:	01000504 	movi	r4,20
   428f8:	20c01436 	bltu	r4,r3,4294c <_free_r+0x29c>
   428fc:	194016c4 	addi	r5,r3,91
   42900:	2947883a 	add	r3,r5,r5
   42904:	003fbe06 	br	42800 <__alt_data_end+0xfffd1ac0>
   42908:	280bd0ba 	srai	r5,r5,2
   4290c:	00800044 	movi	r2,1
   42910:	39000117 	ldw	r4,4(r7)
   42914:	114a983a 	sll	r5,r2,r5
   42918:	1805883a 	mov	r2,r3
   4291c:	2908b03a 	or	r4,r5,r4
   42920:	39000115 	stw	r4,4(r7)
   42924:	003fc406 	br	42838 <__alt_data_end+0xfffd1af8>
   42928:	49800515 	stw	r6,20(r9)
   4292c:	49800415 	stw	r6,16(r9)
   42930:	10c00054 	ori	r3,r2,1
   42934:	31000315 	stw	r4,12(r6)
   42938:	31000215 	stw	r4,8(r6)
   4293c:	30c00115 	stw	r3,4(r6)
   42940:	308d883a 	add	r6,r6,r2
   42944:	30800015 	stw	r2,0(r6)
   42948:	003fa006 	br	427cc <__alt_data_end+0xfffd1a8c>
   4294c:	01001504 	movi	r4,84
   42950:	20c00436 	bltu	r4,r3,42964 <_free_r+0x2b4>
   42954:	1006d33a 	srli	r3,r2,12
   42958:	19401b84 	addi	r5,r3,110
   4295c:	2947883a 	add	r3,r5,r5
   42960:	003fa706 	br	42800 <__alt_data_end+0xfffd1ac0>
   42964:	01005504 	movi	r4,340
   42968:	20c00436 	bltu	r4,r3,4297c <_free_r+0x2cc>
   4296c:	1006d3fa 	srli	r3,r2,15
   42970:	19401dc4 	addi	r5,r3,119
   42974:	2947883a 	add	r3,r5,r5
   42978:	003fa106 	br	42800 <__alt_data_end+0xfffd1ac0>
   4297c:	01015504 	movi	r4,1364
   42980:	20c00436 	bltu	r4,r3,42994 <_free_r+0x2e4>
   42984:	1006d4ba 	srli	r3,r2,18
   42988:	19401f04 	addi	r5,r3,124
   4298c:	2947883a 	add	r3,r5,r5
   42990:	003f9b06 	br	42800 <__alt_data_end+0xfffd1ac0>
   42994:	00c03f04 	movi	r3,252
   42998:	01401f84 	movi	r5,126
   4299c:	003f9806 	br	42800 <__alt_data_end+0xfffd1ac0>

000429a0 <_fwalk>:
   429a0:	defff804 	addi	sp,sp,-32
   429a4:	dd400515 	stw	r21,20(sp)
   429a8:	2540b804 	addi	r21,r4,736
   429ac:	dd800615 	stw	r22,24(sp)
   429b0:	dd000415 	stw	r20,16(sp)
   429b4:	dfc00715 	stw	ra,28(sp)
   429b8:	dcc00315 	stw	r19,12(sp)
   429bc:	dc800215 	stw	r18,8(sp)
   429c0:	dc400115 	stw	r17,4(sp)
   429c4:	dc000015 	stw	r16,0(sp)
   429c8:	2829883a 	mov	r20,r5
   429cc:	002d883a 	mov	r22,zero
   429d0:	004254c0 	call	4254c <__sfp_lock_acquire>
   429d4:	a8001426 	beq	r21,zero,42a28 <_fwalk+0x88>
   429d8:	04ffffc4 	movi	r19,-1
   429dc:	ac400117 	ldw	r17,4(r21)
   429e0:	ac800217 	ldw	r18,8(r21)
   429e4:	8c7fffc4 	addi	r17,r17,-1
   429e8:	88000d16 	blt	r17,zero,42a20 <_fwalk+0x80>
   429ec:	94000304 	addi	r16,r18,12
   429f0:	94800384 	addi	r18,r18,14
   429f4:	80c0000f 	ldh	r3,0(r16)
   429f8:	8c7fffc4 	addi	r17,r17,-1
   429fc:	813ffd04 	addi	r4,r16,-12
   42a00:	18000426 	beq	r3,zero,42a14 <_fwalk+0x74>
   42a04:	90c0000f 	ldh	r3,0(r18)
   42a08:	1cc00226 	beq	r3,r19,42a14 <_fwalk+0x74>
   42a0c:	a03ee83a 	callr	r20
   42a10:	b0acb03a 	or	r22,r22,r2
   42a14:	84001a04 	addi	r16,r16,104
   42a18:	94801a04 	addi	r18,r18,104
   42a1c:	8cfff51e 	bne	r17,r19,429f4 <__alt_data_end+0xfffd1cb4>
   42a20:	ad400017 	ldw	r21,0(r21)
   42a24:	a83fed1e 	bne	r21,zero,429dc <__alt_data_end+0xfffd1c9c>
   42a28:	00425500 	call	42550 <__sfp_lock_release>
   42a2c:	b005883a 	mov	r2,r22
   42a30:	dfc00717 	ldw	ra,28(sp)
   42a34:	dd800617 	ldw	r22,24(sp)
   42a38:	dd400517 	ldw	r21,20(sp)
   42a3c:	dd000417 	ldw	r20,16(sp)
   42a40:	dcc00317 	ldw	r19,12(sp)
   42a44:	dc800217 	ldw	r18,8(sp)
   42a48:	dc400117 	ldw	r17,4(sp)
   42a4c:	dc000017 	ldw	r16,0(sp)
   42a50:	dec00804 	addi	sp,sp,32
   42a54:	f800283a 	ret

00042a58 <_fwalk_reent>:
   42a58:	defff804 	addi	sp,sp,-32
   42a5c:	dd400515 	stw	r21,20(sp)
   42a60:	2540b804 	addi	r21,r4,736
   42a64:	dd800615 	stw	r22,24(sp)
   42a68:	dd000415 	stw	r20,16(sp)
   42a6c:	dcc00315 	stw	r19,12(sp)
   42a70:	dfc00715 	stw	ra,28(sp)
   42a74:	dc800215 	stw	r18,8(sp)
   42a78:	dc400115 	stw	r17,4(sp)
   42a7c:	dc000015 	stw	r16,0(sp)
   42a80:	2027883a 	mov	r19,r4
   42a84:	2829883a 	mov	r20,r5
   42a88:	002d883a 	mov	r22,zero
   42a8c:	004254c0 	call	4254c <__sfp_lock_acquire>
   42a90:	a8001326 	beq	r21,zero,42ae0 <_fwalk_reent+0x88>
   42a94:	04bfffc4 	movi	r18,-1
   42a98:	ac400117 	ldw	r17,4(r21)
   42a9c:	ac000217 	ldw	r16,8(r21)
   42aa0:	8c7fffc4 	addi	r17,r17,-1
   42aa4:	88000c16 	blt	r17,zero,42ad8 <_fwalk_reent+0x80>
   42aa8:	84000304 	addi	r16,r16,12
   42aac:	80c0000f 	ldh	r3,0(r16)
   42ab0:	8c7fffc4 	addi	r17,r17,-1
   42ab4:	817ffd04 	addi	r5,r16,-12
   42ab8:	18000526 	beq	r3,zero,42ad0 <_fwalk_reent+0x78>
   42abc:	80c0008f 	ldh	r3,2(r16)
   42ac0:	9809883a 	mov	r4,r19
   42ac4:	1c800226 	beq	r3,r18,42ad0 <_fwalk_reent+0x78>
   42ac8:	a03ee83a 	callr	r20
   42acc:	b0acb03a 	or	r22,r22,r2
   42ad0:	84001a04 	addi	r16,r16,104
   42ad4:	8cbff51e 	bne	r17,r18,42aac <__alt_data_end+0xfffd1d6c>
   42ad8:	ad400017 	ldw	r21,0(r21)
   42adc:	a83fee1e 	bne	r21,zero,42a98 <__alt_data_end+0xfffd1d58>
   42ae0:	00425500 	call	42550 <__sfp_lock_release>
   42ae4:	b005883a 	mov	r2,r22
   42ae8:	dfc00717 	ldw	ra,28(sp)
   42aec:	dd800617 	ldw	r22,24(sp)
   42af0:	dd400517 	ldw	r21,20(sp)
   42af4:	dd000417 	ldw	r20,16(sp)
   42af8:	dcc00317 	ldw	r19,12(sp)
   42afc:	dc800217 	ldw	r18,8(sp)
   42b00:	dc400117 	ldw	r17,4(sp)
   42b04:	dc000017 	ldw	r16,0(sp)
   42b08:	dec00804 	addi	sp,sp,32
   42b0c:	f800283a 	ret

00042b10 <__smakebuf_r>:
   42b10:	2880030b 	ldhu	r2,12(r5)
   42b14:	10c0008c 	andi	r3,r2,2
   42b18:	1800401e 	bne	r3,zero,42c1c <__smakebuf_r+0x10c>
   42b1c:	deffec04 	addi	sp,sp,-80
   42b20:	dc000f15 	stw	r16,60(sp)
   42b24:	2821883a 	mov	r16,r5
   42b28:	2940038f 	ldh	r5,14(r5)
   42b2c:	dc401015 	stw	r17,64(sp)
   42b30:	dfc01315 	stw	ra,76(sp)
   42b34:	dcc01215 	stw	r19,72(sp)
   42b38:	dc801115 	stw	r18,68(sp)
   42b3c:	2023883a 	mov	r17,r4
   42b40:	28001b16 	blt	r5,zero,42bb0 <__smakebuf_r+0xa0>
   42b44:	d80d883a 	mov	r6,sp
   42b48:	00430ec0 	call	430ec <_fstat_r>
   42b4c:	10001716 	blt	r2,zero,42bac <__smakebuf_r+0x9c>
   42b50:	d8800117 	ldw	r2,4(sp)
   42b54:	00e00014 	movui	r3,32768
   42b58:	10bc000c 	andi	r2,r2,61440
   42b5c:	10c03726 	beq	r2,r3,42c3c <__smakebuf_r+0x12c>
   42b60:	80c0030b 	ldhu	r3,12(r16)
   42b64:	18c20014 	ori	r3,r3,2048
   42b68:	80c0030d 	sth	r3,12(r16)
   42b6c:	00c80004 	movi	r3,8192
   42b70:	10c03c1e 	bne	r2,r3,42c64 <__smakebuf_r+0x154>
   42b74:	8140038f 	ldh	r5,14(r16)
   42b78:	8809883a 	mov	r4,r17
   42b7c:	00431440 	call	43144 <_isatty_r>
   42b80:	10004e26 	beq	r2,zero,42cbc <__smakebuf_r+0x1ac>
   42b84:	8080030b 	ldhu	r2,12(r16)
   42b88:	04c00044 	movi	r19,1
   42b8c:	80c010c4 	addi	r3,r16,67
   42b90:	14c4b03a 	or	r2,r2,r19
   42b94:	8080030d 	sth	r2,12(r16)
   42b98:	80c00015 	stw	r3,0(r16)
   42b9c:	80c00415 	stw	r3,16(r16)
   42ba0:	84c00515 	stw	r19,20(r16)
   42ba4:	04810004 	movi	r18,1024
   42ba8:	00000706 	br	42bc8 <__smakebuf_r+0xb8>
   42bac:	8080030b 	ldhu	r2,12(r16)
   42bb0:	10c0200c 	andi	r3,r2,128
   42bb4:	18001f1e 	bne	r3,zero,42c34 <__smakebuf_r+0x124>
   42bb8:	04810004 	movi	r18,1024
   42bbc:	10820014 	ori	r2,r2,2048
   42bc0:	8080030d 	sth	r2,12(r16)
   42bc4:	0027883a 	mov	r19,zero
   42bc8:	8809883a 	mov	r4,r17
   42bcc:	900b883a 	mov	r5,r18
   42bd0:	0040d380 	call	40d38 <_malloc_r>
   42bd4:	10002e26 	beq	r2,zero,42c90 <__smakebuf_r+0x180>
   42bd8:	80c0030b 	ldhu	r3,12(r16)
   42bdc:	01000134 	movhi	r4,4
   42be0:	21087a04 	addi	r4,r4,8680
   42be4:	89000f15 	stw	r4,60(r17)
   42be8:	18c02014 	ori	r3,r3,128
   42bec:	80c0030d 	sth	r3,12(r16)
   42bf0:	80800015 	stw	r2,0(r16)
   42bf4:	80800415 	stw	r2,16(r16)
   42bf8:	84800515 	stw	r18,20(r16)
   42bfc:	98001c1e 	bne	r19,zero,42c70 <__smakebuf_r+0x160>
   42c00:	dfc01317 	ldw	ra,76(sp)
   42c04:	dcc01217 	ldw	r19,72(sp)
   42c08:	dc801117 	ldw	r18,68(sp)
   42c0c:	dc401017 	ldw	r17,64(sp)
   42c10:	dc000f17 	ldw	r16,60(sp)
   42c14:	dec01404 	addi	sp,sp,80
   42c18:	f800283a 	ret
   42c1c:	288010c4 	addi	r2,r5,67
   42c20:	28800015 	stw	r2,0(r5)
   42c24:	28800415 	stw	r2,16(r5)
   42c28:	00800044 	movi	r2,1
   42c2c:	28800515 	stw	r2,20(r5)
   42c30:	f800283a 	ret
   42c34:	04801004 	movi	r18,64
   42c38:	003fe006 	br	42bbc <__alt_data_end+0xfffd1e7c>
   42c3c:	81000a17 	ldw	r4,40(r16)
   42c40:	00c00134 	movhi	r3,4
   42c44:	18cbb104 	addi	r3,r3,11972
   42c48:	20ffc51e 	bne	r4,r3,42b60 <__alt_data_end+0xfffd1e20>
   42c4c:	80c0030b 	ldhu	r3,12(r16)
   42c50:	01010004 	movi	r4,1024
   42c54:	81001315 	stw	r4,76(r16)
   42c58:	1906b03a 	or	r3,r3,r4
   42c5c:	80c0030d 	sth	r3,12(r16)
   42c60:	003fc206 	br	42b6c <__alt_data_end+0xfffd1e2c>
   42c64:	0027883a 	mov	r19,zero
   42c68:	04810004 	movi	r18,1024
   42c6c:	003fd606 	br	42bc8 <__alt_data_end+0xfffd1e88>
   42c70:	8140038f 	ldh	r5,14(r16)
   42c74:	8809883a 	mov	r4,r17
   42c78:	00431440 	call	43144 <_isatty_r>
   42c7c:	103fe026 	beq	r2,zero,42c00 <__alt_data_end+0xfffd1ec0>
   42c80:	8080030b 	ldhu	r2,12(r16)
   42c84:	10800054 	ori	r2,r2,1
   42c88:	8080030d 	sth	r2,12(r16)
   42c8c:	003fdc06 	br	42c00 <__alt_data_end+0xfffd1ec0>
   42c90:	8080030b 	ldhu	r2,12(r16)
   42c94:	10c0800c 	andi	r3,r2,512
   42c98:	183fd91e 	bne	r3,zero,42c00 <__alt_data_end+0xfffd1ec0>
   42c9c:	10800094 	ori	r2,r2,2
   42ca0:	80c010c4 	addi	r3,r16,67
   42ca4:	8080030d 	sth	r2,12(r16)
   42ca8:	00800044 	movi	r2,1
   42cac:	80c00015 	stw	r3,0(r16)
   42cb0:	80c00415 	stw	r3,16(r16)
   42cb4:	80800515 	stw	r2,20(r16)
   42cb8:	003fd106 	br	42c00 <__alt_data_end+0xfffd1ec0>
   42cbc:	04c00044 	movi	r19,1
   42cc0:	04810004 	movi	r18,1024
   42cc4:	003fc006 	br	42bc8 <__alt_data_end+0xfffd1e88>

00042cc8 <memset>:
   42cc8:	20c000cc 	andi	r3,r4,3
   42ccc:	2005883a 	mov	r2,r4
   42cd0:	18004326 	beq	r3,zero,42de0 <memset+0x118>
   42cd4:	31ffffc4 	addi	r7,r6,-1
   42cd8:	30004026 	beq	r6,zero,42ddc <memset+0x114>
   42cdc:	2813883a 	mov	r9,r5
   42ce0:	200d883a 	mov	r6,r4
   42ce4:	2007883a 	mov	r3,r4
   42ce8:	00000406 	br	42cfc <memset+0x34>
   42cec:	3a3fffc4 	addi	r8,r7,-1
   42cf0:	31800044 	addi	r6,r6,1
   42cf4:	38003926 	beq	r7,zero,42ddc <memset+0x114>
   42cf8:	400f883a 	mov	r7,r8
   42cfc:	18c00044 	addi	r3,r3,1
   42d00:	32400005 	stb	r9,0(r6)
   42d04:	1a0000cc 	andi	r8,r3,3
   42d08:	403ff81e 	bne	r8,zero,42cec <__alt_data_end+0xfffd1fac>
   42d0c:	010000c4 	movi	r4,3
   42d10:	21c02d2e 	bgeu	r4,r7,42dc8 <memset+0x100>
   42d14:	29803fcc 	andi	r6,r5,255
   42d18:	3008923a 	slli	r4,r6,8
   42d1c:	218cb03a 	or	r6,r4,r6
   42d20:	3008943a 	slli	r4,r6,16
   42d24:	218cb03a 	or	r6,r4,r6
   42d28:	010003c4 	movi	r4,15
   42d2c:	21c0182e 	bgeu	r4,r7,42d90 <memset+0xc8>
   42d30:	3b3ffc04 	addi	r12,r7,-16
   42d34:	6018d13a 	srli	r12,r12,4
   42d38:	1a000104 	addi	r8,r3,4
   42d3c:	1ac00204 	addi	r11,r3,8
   42d40:	6008913a 	slli	r4,r12,4
   42d44:	1a800304 	addi	r10,r3,12
   42d48:	1813883a 	mov	r9,r3
   42d4c:	21000504 	addi	r4,r4,20
   42d50:	1909883a 	add	r4,r3,r4
   42d54:	49800015 	stw	r6,0(r9)
   42d58:	41800015 	stw	r6,0(r8)
   42d5c:	59800015 	stw	r6,0(r11)
   42d60:	51800015 	stw	r6,0(r10)
   42d64:	42000404 	addi	r8,r8,16
   42d68:	4a400404 	addi	r9,r9,16
   42d6c:	5ac00404 	addi	r11,r11,16
   42d70:	52800404 	addi	r10,r10,16
   42d74:	413ff71e 	bne	r8,r4,42d54 <__alt_data_end+0xfffd2014>
   42d78:	63000044 	addi	r12,r12,1
   42d7c:	6018913a 	slli	r12,r12,4
   42d80:	39c003cc 	andi	r7,r7,15
   42d84:	010000c4 	movi	r4,3
   42d88:	1b07883a 	add	r3,r3,r12
   42d8c:	21c00e2e 	bgeu	r4,r7,42dc8 <memset+0x100>
   42d90:	1813883a 	mov	r9,r3
   42d94:	3811883a 	mov	r8,r7
   42d98:	010000c4 	movi	r4,3
   42d9c:	49800015 	stw	r6,0(r9)
   42da0:	423fff04 	addi	r8,r8,-4
   42da4:	4a400104 	addi	r9,r9,4
   42da8:	223ffc36 	bltu	r4,r8,42d9c <__alt_data_end+0xfffd205c>
   42dac:	393fff04 	addi	r4,r7,-4
   42db0:	2008d0ba 	srli	r4,r4,2
   42db4:	39c000cc 	andi	r7,r7,3
   42db8:	21000044 	addi	r4,r4,1
   42dbc:	2109883a 	add	r4,r4,r4
   42dc0:	2109883a 	add	r4,r4,r4
   42dc4:	1907883a 	add	r3,r3,r4
   42dc8:	38000426 	beq	r7,zero,42ddc <memset+0x114>
   42dcc:	19cf883a 	add	r7,r3,r7
   42dd0:	19400005 	stb	r5,0(r3)
   42dd4:	18c00044 	addi	r3,r3,1
   42dd8:	19fffd1e 	bne	r3,r7,42dd0 <__alt_data_end+0xfffd2090>
   42ddc:	f800283a 	ret
   42de0:	2007883a 	mov	r3,r4
   42de4:	300f883a 	mov	r7,r6
   42de8:	003fc806 	br	42d0c <__alt_data_end+0xfffd1fcc>

00042dec <__sread>:
   42dec:	defffe04 	addi	sp,sp,-8
   42df0:	dc000015 	stw	r16,0(sp)
   42df4:	2821883a 	mov	r16,r5
   42df8:	2940038f 	ldh	r5,14(r5)
   42dfc:	dfc00115 	stw	ra,4(sp)
   42e00:	00431f40 	call	431f4 <_read_r>
   42e04:	10000716 	blt	r2,zero,42e24 <__sread+0x38>
   42e08:	80c01417 	ldw	r3,80(r16)
   42e0c:	1887883a 	add	r3,r3,r2
   42e10:	80c01415 	stw	r3,80(r16)
   42e14:	dfc00117 	ldw	ra,4(sp)
   42e18:	dc000017 	ldw	r16,0(sp)
   42e1c:	dec00204 	addi	sp,sp,8
   42e20:	f800283a 	ret
   42e24:	80c0030b 	ldhu	r3,12(r16)
   42e28:	18fbffcc 	andi	r3,r3,61439
   42e2c:	80c0030d 	sth	r3,12(r16)
   42e30:	dfc00117 	ldw	ra,4(sp)
   42e34:	dc000017 	ldw	r16,0(sp)
   42e38:	dec00204 	addi	sp,sp,8
   42e3c:	f800283a 	ret

00042e40 <__seofread>:
   42e40:	0005883a 	mov	r2,zero
   42e44:	f800283a 	ret

00042e48 <__swrite>:
   42e48:	2880030b 	ldhu	r2,12(r5)
   42e4c:	defffb04 	addi	sp,sp,-20
   42e50:	dcc00315 	stw	r19,12(sp)
   42e54:	dc800215 	stw	r18,8(sp)
   42e58:	dc400115 	stw	r17,4(sp)
   42e5c:	dc000015 	stw	r16,0(sp)
   42e60:	dfc00415 	stw	ra,16(sp)
   42e64:	10c0400c 	andi	r3,r2,256
   42e68:	2821883a 	mov	r16,r5
   42e6c:	2027883a 	mov	r19,r4
   42e70:	3025883a 	mov	r18,r6
   42e74:	3823883a 	mov	r17,r7
   42e78:	18000526 	beq	r3,zero,42e90 <__swrite+0x48>
   42e7c:	2940038f 	ldh	r5,14(r5)
   42e80:	000d883a 	mov	r6,zero
   42e84:	01c00084 	movi	r7,2
   42e88:	00431980 	call	43198 <_lseek_r>
   42e8c:	8080030b 	ldhu	r2,12(r16)
   42e90:	8140038f 	ldh	r5,14(r16)
   42e94:	10bbffcc 	andi	r2,r2,61439
   42e98:	9809883a 	mov	r4,r19
   42e9c:	900d883a 	mov	r6,r18
   42ea0:	880f883a 	mov	r7,r17
   42ea4:	8080030d 	sth	r2,12(r16)
   42ea8:	dfc00417 	ldw	ra,16(sp)
   42eac:	dcc00317 	ldw	r19,12(sp)
   42eb0:	dc800217 	ldw	r18,8(sp)
   42eb4:	dc400117 	ldw	r17,4(sp)
   42eb8:	dc000017 	ldw	r16,0(sp)
   42ebc:	dec00504 	addi	sp,sp,20
   42ec0:	0042f281 	jmpi	42f28 <_write_r>

00042ec4 <__sseek>:
   42ec4:	defffe04 	addi	sp,sp,-8
   42ec8:	dc000015 	stw	r16,0(sp)
   42ecc:	2821883a 	mov	r16,r5
   42ed0:	2940038f 	ldh	r5,14(r5)
   42ed4:	dfc00115 	stw	ra,4(sp)
   42ed8:	00431980 	call	43198 <_lseek_r>
   42edc:	00ffffc4 	movi	r3,-1
   42ee0:	10c00826 	beq	r2,r3,42f04 <__sseek+0x40>
   42ee4:	80c0030b 	ldhu	r3,12(r16)
   42ee8:	80801415 	stw	r2,80(r16)
   42eec:	18c40014 	ori	r3,r3,4096
   42ef0:	80c0030d 	sth	r3,12(r16)
   42ef4:	dfc00117 	ldw	ra,4(sp)
   42ef8:	dc000017 	ldw	r16,0(sp)
   42efc:	dec00204 	addi	sp,sp,8
   42f00:	f800283a 	ret
   42f04:	80c0030b 	ldhu	r3,12(r16)
   42f08:	18fbffcc 	andi	r3,r3,61439
   42f0c:	80c0030d 	sth	r3,12(r16)
   42f10:	dfc00117 	ldw	ra,4(sp)
   42f14:	dc000017 	ldw	r16,0(sp)
   42f18:	dec00204 	addi	sp,sp,8
   42f1c:	f800283a 	ret

00042f20 <__sclose>:
   42f20:	2940038f 	ldh	r5,14(r5)
   42f24:	0042f841 	jmpi	42f84 <_close_r>

00042f28 <_write_r>:
   42f28:	defffd04 	addi	sp,sp,-12
   42f2c:	dc000015 	stw	r16,0(sp)
   42f30:	04000174 	movhi	r16,5
   42f34:	dc400115 	stw	r17,4(sp)
   42f38:	8423f504 	addi	r16,r16,-28716
   42f3c:	2023883a 	mov	r17,r4
   42f40:	2809883a 	mov	r4,r5
   42f44:	300b883a 	mov	r5,r6
   42f48:	380d883a 	mov	r6,r7
   42f4c:	dfc00215 	stw	ra,8(sp)
   42f50:	80000015 	stw	zero,0(r16)
   42f54:	0043b740 	call	43b74 <write>
   42f58:	00ffffc4 	movi	r3,-1
   42f5c:	10c00526 	beq	r2,r3,42f74 <_write_r+0x4c>
   42f60:	dfc00217 	ldw	ra,8(sp)
   42f64:	dc400117 	ldw	r17,4(sp)
   42f68:	dc000017 	ldw	r16,0(sp)
   42f6c:	dec00304 	addi	sp,sp,12
   42f70:	f800283a 	ret
   42f74:	80c00017 	ldw	r3,0(r16)
   42f78:	183ff926 	beq	r3,zero,42f60 <__alt_data_end+0xfffd2220>
   42f7c:	88c00015 	stw	r3,0(r17)
   42f80:	003ff706 	br	42f60 <__alt_data_end+0xfffd2220>

00042f84 <_close_r>:
   42f84:	defffd04 	addi	sp,sp,-12
   42f88:	dc000015 	stw	r16,0(sp)
   42f8c:	04000174 	movhi	r16,5
   42f90:	dc400115 	stw	r17,4(sp)
   42f94:	8423f504 	addi	r16,r16,-28716
   42f98:	2023883a 	mov	r17,r4
   42f9c:	2809883a 	mov	r4,r5
   42fa0:	dfc00215 	stw	ra,8(sp)
   42fa4:	80000015 	stw	zero,0(r16)
   42fa8:	00432a00 	call	432a0 <close>
   42fac:	00ffffc4 	movi	r3,-1
   42fb0:	10c00526 	beq	r2,r3,42fc8 <_close_r+0x44>
   42fb4:	dfc00217 	ldw	ra,8(sp)
   42fb8:	dc400117 	ldw	r17,4(sp)
   42fbc:	dc000017 	ldw	r16,0(sp)
   42fc0:	dec00304 	addi	sp,sp,12
   42fc4:	f800283a 	ret
   42fc8:	80c00017 	ldw	r3,0(r16)
   42fcc:	183ff926 	beq	r3,zero,42fb4 <__alt_data_end+0xfffd2274>
   42fd0:	88c00015 	stw	r3,0(r17)
   42fd4:	003ff706 	br	42fb4 <__alt_data_end+0xfffd2274>

00042fd8 <_fclose_r>:
   42fd8:	28003226 	beq	r5,zero,430a4 <_fclose_r+0xcc>
   42fdc:	defffc04 	addi	sp,sp,-16
   42fe0:	dc400115 	stw	r17,4(sp)
   42fe4:	2023883a 	mov	r17,r4
   42fe8:	dc000015 	stw	r16,0(sp)
   42fec:	dfc00315 	stw	ra,12(sp)
   42ff0:	dc800215 	stw	r18,8(sp)
   42ff4:	2821883a 	mov	r16,r5
   42ff8:	004254c0 	call	4254c <__sfp_lock_acquire>
   42ffc:	88000226 	beq	r17,zero,43008 <_fclose_r+0x30>
   43000:	88800e17 	ldw	r2,56(r17)
   43004:	10002926 	beq	r2,zero,430ac <_fclose_r+0xd4>
   43008:	8080030f 	ldh	r2,12(r16)
   4300c:	10002226 	beq	r2,zero,43098 <_fclose_r+0xc0>
   43010:	8809883a 	mov	r4,r17
   43014:	800b883a 	mov	r5,r16
   43018:	0041f800 	call	41f80 <_fflush_r>
   4301c:	1025883a 	mov	r18,r2
   43020:	80800b17 	ldw	r2,44(r16)
   43024:	10000426 	beq	r2,zero,43038 <_fclose_r+0x60>
   43028:	81400717 	ldw	r5,28(r16)
   4302c:	8809883a 	mov	r4,r17
   43030:	103ee83a 	callr	r2
   43034:	10002616 	blt	r2,zero,430d0 <_fclose_r+0xf8>
   43038:	8080030b 	ldhu	r2,12(r16)
   4303c:	1080200c 	andi	r2,r2,128
   43040:	10001f1e 	bne	r2,zero,430c0 <_fclose_r+0xe8>
   43044:	81400c17 	ldw	r5,48(r16)
   43048:	28000526 	beq	r5,zero,43060 <_fclose_r+0x88>
   4304c:	80801004 	addi	r2,r16,64
   43050:	28800226 	beq	r5,r2,4305c <_fclose_r+0x84>
   43054:	8809883a 	mov	r4,r17
   43058:	00426b00 	call	426b0 <_free_r>
   4305c:	80000c15 	stw	zero,48(r16)
   43060:	81401117 	ldw	r5,68(r16)
   43064:	28000326 	beq	r5,zero,43074 <_fclose_r+0x9c>
   43068:	8809883a 	mov	r4,r17
   4306c:	00426b00 	call	426b0 <_free_r>
   43070:	80001115 	stw	zero,68(r16)
   43074:	8000030d 	sth	zero,12(r16)
   43078:	00425500 	call	42550 <__sfp_lock_release>
   4307c:	9005883a 	mov	r2,r18
   43080:	dfc00317 	ldw	ra,12(sp)
   43084:	dc800217 	ldw	r18,8(sp)
   43088:	dc400117 	ldw	r17,4(sp)
   4308c:	dc000017 	ldw	r16,0(sp)
   43090:	dec00404 	addi	sp,sp,16
   43094:	f800283a 	ret
   43098:	00425500 	call	42550 <__sfp_lock_release>
   4309c:	0005883a 	mov	r2,zero
   430a0:	003ff706 	br	43080 <__alt_data_end+0xfffd2340>
   430a4:	0005883a 	mov	r2,zero
   430a8:	f800283a 	ret
   430ac:	8809883a 	mov	r4,r17
   430b0:	004253c0 	call	4253c <__sinit>
   430b4:	8080030f 	ldh	r2,12(r16)
   430b8:	103fd51e 	bne	r2,zero,43010 <__alt_data_end+0xfffd22d0>
   430bc:	003ff606 	br	43098 <__alt_data_end+0xfffd2358>
   430c0:	81400417 	ldw	r5,16(r16)
   430c4:	8809883a 	mov	r4,r17
   430c8:	00426b00 	call	426b0 <_free_r>
   430cc:	003fdd06 	br	43044 <__alt_data_end+0xfffd2304>
   430d0:	04bfffc4 	movi	r18,-1
   430d4:	003fd806 	br	43038 <__alt_data_end+0xfffd22f8>

000430d8 <fclose>:
   430d8:	00800134 	movhi	r2,4
   430dc:	109d4a04 	addi	r2,r2,29992
   430e0:	200b883a 	mov	r5,r4
   430e4:	11000017 	ldw	r4,0(r2)
   430e8:	0042fd81 	jmpi	42fd8 <_fclose_r>

000430ec <_fstat_r>:
   430ec:	defffd04 	addi	sp,sp,-12
   430f0:	dc000015 	stw	r16,0(sp)
   430f4:	04000174 	movhi	r16,5
   430f8:	dc400115 	stw	r17,4(sp)
   430fc:	8423f504 	addi	r16,r16,-28716
   43100:	2023883a 	mov	r17,r4
   43104:	2809883a 	mov	r4,r5
   43108:	300b883a 	mov	r5,r6
   4310c:	dfc00215 	stw	ra,8(sp)
   43110:	80000015 	stw	zero,0(r16)
   43114:	00433f40 	call	433f4 <fstat>
   43118:	00ffffc4 	movi	r3,-1
   4311c:	10c00526 	beq	r2,r3,43134 <_fstat_r+0x48>
   43120:	dfc00217 	ldw	ra,8(sp)
   43124:	dc400117 	ldw	r17,4(sp)
   43128:	dc000017 	ldw	r16,0(sp)
   4312c:	dec00304 	addi	sp,sp,12
   43130:	f800283a 	ret
   43134:	80c00017 	ldw	r3,0(r16)
   43138:	183ff926 	beq	r3,zero,43120 <__alt_data_end+0xfffd23e0>
   4313c:	88c00015 	stw	r3,0(r17)
   43140:	003ff706 	br	43120 <__alt_data_end+0xfffd23e0>

00043144 <_isatty_r>:
   43144:	defffd04 	addi	sp,sp,-12
   43148:	dc000015 	stw	r16,0(sp)
   4314c:	04000174 	movhi	r16,5
   43150:	dc400115 	stw	r17,4(sp)
   43154:	8423f504 	addi	r16,r16,-28716
   43158:	2023883a 	mov	r17,r4
   4315c:	2809883a 	mov	r4,r5
   43160:	dfc00215 	stw	ra,8(sp)
   43164:	80000015 	stw	zero,0(r16)
   43168:	00434fc0 	call	434fc <isatty>
   4316c:	00ffffc4 	movi	r3,-1
   43170:	10c00526 	beq	r2,r3,43188 <_isatty_r+0x44>
   43174:	dfc00217 	ldw	ra,8(sp)
   43178:	dc400117 	ldw	r17,4(sp)
   4317c:	dc000017 	ldw	r16,0(sp)
   43180:	dec00304 	addi	sp,sp,12
   43184:	f800283a 	ret
   43188:	80c00017 	ldw	r3,0(r16)
   4318c:	183ff926 	beq	r3,zero,43174 <__alt_data_end+0xfffd2434>
   43190:	88c00015 	stw	r3,0(r17)
   43194:	003ff706 	br	43174 <__alt_data_end+0xfffd2434>

00043198 <_lseek_r>:
   43198:	defffd04 	addi	sp,sp,-12
   4319c:	dc000015 	stw	r16,0(sp)
   431a0:	04000174 	movhi	r16,5
   431a4:	dc400115 	stw	r17,4(sp)
   431a8:	8423f504 	addi	r16,r16,-28716
   431ac:	2023883a 	mov	r17,r4
   431b0:	2809883a 	mov	r4,r5
   431b4:	300b883a 	mov	r5,r6
   431b8:	380d883a 	mov	r6,r7
   431bc:	dfc00215 	stw	ra,8(sp)
   431c0:	80000015 	stw	zero,0(r16)
   431c4:	00436dc0 	call	436dc <lseek>
   431c8:	00ffffc4 	movi	r3,-1
   431cc:	10c00526 	beq	r2,r3,431e4 <_lseek_r+0x4c>
   431d0:	dfc00217 	ldw	ra,8(sp)
   431d4:	dc400117 	ldw	r17,4(sp)
   431d8:	dc000017 	ldw	r16,0(sp)
   431dc:	dec00304 	addi	sp,sp,12
   431e0:	f800283a 	ret
   431e4:	80c00017 	ldw	r3,0(r16)
   431e8:	183ff926 	beq	r3,zero,431d0 <__alt_data_end+0xfffd2490>
   431ec:	88c00015 	stw	r3,0(r17)
   431f0:	003ff706 	br	431d0 <__alt_data_end+0xfffd2490>

000431f4 <_read_r>:
   431f4:	defffd04 	addi	sp,sp,-12
   431f8:	dc000015 	stw	r16,0(sp)
   431fc:	04000174 	movhi	r16,5
   43200:	dc400115 	stw	r17,4(sp)
   43204:	8423f504 	addi	r16,r16,-28716
   43208:	2023883a 	mov	r17,r4
   4320c:	2809883a 	mov	r4,r5
   43210:	300b883a 	mov	r5,r6
   43214:	380d883a 	mov	r6,r7
   43218:	dfc00215 	stw	ra,8(sp)
   4321c:	80000015 	stw	zero,0(r16)
   43220:	00438c00 	call	438c0 <read>
   43224:	00ffffc4 	movi	r3,-1
   43228:	10c00526 	beq	r2,r3,43240 <_read_r+0x4c>
   4322c:	dfc00217 	ldw	ra,8(sp)
   43230:	dc400117 	ldw	r17,4(sp)
   43234:	dc000017 	ldw	r16,0(sp)
   43238:	dec00304 	addi	sp,sp,12
   4323c:	f800283a 	ret
   43240:	80c00017 	ldw	r3,0(r16)
   43244:	183ff926 	beq	r3,zero,4322c <__alt_data_end+0xfffd24ec>
   43248:	88c00015 	stw	r3,0(r17)
   4324c:	003ff706 	br	4322c <__alt_data_end+0xfffd24ec>

00043250 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43250:	defffe04 	addi	sp,sp,-8
   43254:	dfc00115 	stw	ra,4(sp)
   43258:	df000015 	stw	fp,0(sp)
   4325c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43260:	00800134 	movhi	r2,4
   43264:	109d5204 	addi	r2,r2,30024
   43268:	10800017 	ldw	r2,0(r2)
   4326c:	10000526 	beq	r2,zero,43284 <alt_get_errno+0x34>
   43270:	00800134 	movhi	r2,4
   43274:	109d5204 	addi	r2,r2,30024
   43278:	10800017 	ldw	r2,0(r2)
   4327c:	103ee83a 	callr	r2
   43280:	00000206 	br	4328c <alt_get_errno+0x3c>
   43284:	00800174 	movhi	r2,5
   43288:	10a3f504 	addi	r2,r2,-28716
}
   4328c:	e037883a 	mov	sp,fp
   43290:	dfc00117 	ldw	ra,4(sp)
   43294:	df000017 	ldw	fp,0(sp)
   43298:	dec00204 	addi	sp,sp,8
   4329c:	f800283a 	ret

000432a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   432a0:	defffb04 	addi	sp,sp,-20
   432a4:	dfc00415 	stw	ra,16(sp)
   432a8:	df000315 	stw	fp,12(sp)
   432ac:	df000304 	addi	fp,sp,12
   432b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   432b4:	e0bfff17 	ldw	r2,-4(fp)
   432b8:	10000816 	blt	r2,zero,432dc <close+0x3c>
   432bc:	e13fff17 	ldw	r4,-4(fp)
   432c0:	01400304 	movi	r5,12
   432c4:	00407080 	call	40708 <__mulsi3>
   432c8:	1007883a 	mov	r3,r2
   432cc:	00800134 	movhi	r2,4
   432d0:	1098d104 	addi	r2,r2,25412
   432d4:	1885883a 	add	r2,r3,r2
   432d8:	00000106 	br	432e0 <close+0x40>
   432dc:	0005883a 	mov	r2,zero
   432e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   432e4:	e0bffd17 	ldw	r2,-12(fp)
   432e8:	10001926 	beq	r2,zero,43350 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   432ec:	e0bffd17 	ldw	r2,-12(fp)
   432f0:	10800017 	ldw	r2,0(r2)
   432f4:	10800417 	ldw	r2,16(r2)
   432f8:	10000626 	beq	r2,zero,43314 <close+0x74>
   432fc:	e0bffd17 	ldw	r2,-12(fp)
   43300:	10800017 	ldw	r2,0(r2)
   43304:	10800417 	ldw	r2,16(r2)
   43308:	e13ffd17 	ldw	r4,-12(fp)
   4330c:	103ee83a 	callr	r2
   43310:	00000106 	br	43318 <close+0x78>
   43314:	0005883a 	mov	r2,zero
   43318:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4331c:	e13fff17 	ldw	r4,-4(fp)
   43320:	00439c40 	call	439c4 <alt_release_fd>
    if (rval < 0)
   43324:	e0bffe17 	ldw	r2,-8(fp)
   43328:	1000070e 	bge	r2,zero,43348 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4332c:	00432500 	call	43250 <alt_get_errno>
   43330:	1007883a 	mov	r3,r2
   43334:	e0bffe17 	ldw	r2,-8(fp)
   43338:	0085c83a 	sub	r2,zero,r2
   4333c:	18800015 	stw	r2,0(r3)
      return -1;
   43340:	00bfffc4 	movi	r2,-1
   43344:	00000706 	br	43364 <close+0xc4>
    }
    return 0;
   43348:	0005883a 	mov	r2,zero
   4334c:	00000506 	br	43364 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43350:	00432500 	call	43250 <alt_get_errno>
   43354:	1007883a 	mov	r3,r2
   43358:	00801444 	movi	r2,81
   4335c:	18800015 	stw	r2,0(r3)
    return -1;
   43360:	00bfffc4 	movi	r2,-1
  }
}
   43364:	e037883a 	mov	sp,fp
   43368:	dfc00117 	ldw	ra,4(sp)
   4336c:	df000017 	ldw	fp,0(sp)
   43370:	dec00204 	addi	sp,sp,8
   43374:	f800283a 	ret

00043378 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43378:	defffc04 	addi	sp,sp,-16
   4337c:	df000315 	stw	fp,12(sp)
   43380:	df000304 	addi	fp,sp,12
   43384:	e13ffd15 	stw	r4,-12(fp)
   43388:	e17ffe15 	stw	r5,-8(fp)
   4338c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43390:	e0bfff17 	ldw	r2,-4(fp)
}
   43394:	e037883a 	mov	sp,fp
   43398:	df000017 	ldw	fp,0(sp)
   4339c:	dec00104 	addi	sp,sp,4
   433a0:	f800283a 	ret

000433a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   433a4:	defffe04 	addi	sp,sp,-8
   433a8:	dfc00115 	stw	ra,4(sp)
   433ac:	df000015 	stw	fp,0(sp)
   433b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   433b4:	00800134 	movhi	r2,4
   433b8:	109d5204 	addi	r2,r2,30024
   433bc:	10800017 	ldw	r2,0(r2)
   433c0:	10000526 	beq	r2,zero,433d8 <alt_get_errno+0x34>
   433c4:	00800134 	movhi	r2,4
   433c8:	109d5204 	addi	r2,r2,30024
   433cc:	10800017 	ldw	r2,0(r2)
   433d0:	103ee83a 	callr	r2
   433d4:	00000206 	br	433e0 <alt_get_errno+0x3c>
   433d8:	00800174 	movhi	r2,5
   433dc:	10a3f504 	addi	r2,r2,-28716
}
   433e0:	e037883a 	mov	sp,fp
   433e4:	dfc00117 	ldw	ra,4(sp)
   433e8:	df000017 	ldw	fp,0(sp)
   433ec:	dec00204 	addi	sp,sp,8
   433f0:	f800283a 	ret

000433f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   433f4:	defffb04 	addi	sp,sp,-20
   433f8:	dfc00415 	stw	ra,16(sp)
   433fc:	df000315 	stw	fp,12(sp)
   43400:	df000304 	addi	fp,sp,12
   43404:	e13ffe15 	stw	r4,-8(fp)
   43408:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4340c:	e0bffe17 	ldw	r2,-8(fp)
   43410:	10000816 	blt	r2,zero,43434 <fstat+0x40>
   43414:	e13ffe17 	ldw	r4,-8(fp)
   43418:	01400304 	movi	r5,12
   4341c:	00407080 	call	40708 <__mulsi3>
   43420:	1007883a 	mov	r3,r2
   43424:	00800134 	movhi	r2,4
   43428:	1098d104 	addi	r2,r2,25412
   4342c:	1885883a 	add	r2,r3,r2
   43430:	00000106 	br	43438 <fstat+0x44>
   43434:	0005883a 	mov	r2,zero
   43438:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4343c:	e0bffd17 	ldw	r2,-12(fp)
   43440:	10001026 	beq	r2,zero,43484 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43444:	e0bffd17 	ldw	r2,-12(fp)
   43448:	10800017 	ldw	r2,0(r2)
   4344c:	10800817 	ldw	r2,32(r2)
   43450:	10000726 	beq	r2,zero,43470 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   43454:	e0bffd17 	ldw	r2,-12(fp)
   43458:	10800017 	ldw	r2,0(r2)
   4345c:	10800817 	ldw	r2,32(r2)
   43460:	e13ffd17 	ldw	r4,-12(fp)
   43464:	e17fff17 	ldw	r5,-4(fp)
   43468:	103ee83a 	callr	r2
   4346c:	00000a06 	br	43498 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43470:	e0bfff17 	ldw	r2,-4(fp)
   43474:	00c80004 	movi	r3,8192
   43478:	10c00115 	stw	r3,4(r2)
      return 0;
   4347c:	0005883a 	mov	r2,zero
   43480:	00000506 	br	43498 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43484:	00433a40 	call	433a4 <alt_get_errno>
   43488:	1007883a 	mov	r3,r2
   4348c:	00801444 	movi	r2,81
   43490:	18800015 	stw	r2,0(r3)
    return -1;
   43494:	00bfffc4 	movi	r2,-1
  }
}
   43498:	e037883a 	mov	sp,fp
   4349c:	dfc00117 	ldw	ra,4(sp)
   434a0:	df000017 	ldw	fp,0(sp)
   434a4:	dec00204 	addi	sp,sp,8
   434a8:	f800283a 	ret

000434ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   434ac:	defffe04 	addi	sp,sp,-8
   434b0:	dfc00115 	stw	ra,4(sp)
   434b4:	df000015 	stw	fp,0(sp)
   434b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   434bc:	00800134 	movhi	r2,4
   434c0:	109d5204 	addi	r2,r2,30024
   434c4:	10800017 	ldw	r2,0(r2)
   434c8:	10000526 	beq	r2,zero,434e0 <alt_get_errno+0x34>
   434cc:	00800134 	movhi	r2,4
   434d0:	109d5204 	addi	r2,r2,30024
   434d4:	10800017 	ldw	r2,0(r2)
   434d8:	103ee83a 	callr	r2
   434dc:	00000206 	br	434e8 <alt_get_errno+0x3c>
   434e0:	00800174 	movhi	r2,5
   434e4:	10a3f504 	addi	r2,r2,-28716
}
   434e8:	e037883a 	mov	sp,fp
   434ec:	dfc00117 	ldw	ra,4(sp)
   434f0:	df000017 	ldw	fp,0(sp)
   434f4:	dec00204 	addi	sp,sp,8
   434f8:	f800283a 	ret

000434fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   434fc:	deffed04 	addi	sp,sp,-76
   43500:	dfc01215 	stw	ra,72(sp)
   43504:	df001115 	stw	fp,68(sp)
   43508:	df001104 	addi	fp,sp,68
   4350c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43510:	e0bfff17 	ldw	r2,-4(fp)
   43514:	10000816 	blt	r2,zero,43538 <isatty+0x3c>
   43518:	e13fff17 	ldw	r4,-4(fp)
   4351c:	01400304 	movi	r5,12
   43520:	00407080 	call	40708 <__mulsi3>
   43524:	1007883a 	mov	r3,r2
   43528:	00800134 	movhi	r2,4
   4352c:	1098d104 	addi	r2,r2,25412
   43530:	1885883a 	add	r2,r3,r2
   43534:	00000106 	br	4353c <isatty+0x40>
   43538:	0005883a 	mov	r2,zero
   4353c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43540:	e0bfef17 	ldw	r2,-68(fp)
   43544:	10000e26 	beq	r2,zero,43580 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43548:	e0bfef17 	ldw	r2,-68(fp)
   4354c:	10800017 	ldw	r2,0(r2)
   43550:	10800817 	ldw	r2,32(r2)
   43554:	1000021e 	bne	r2,zero,43560 <isatty+0x64>
    {
      return 1;
   43558:	00800044 	movi	r2,1
   4355c:	00000d06 	br	43594 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43560:	e0bff004 	addi	r2,fp,-64
   43564:	e13fff17 	ldw	r4,-4(fp)
   43568:	100b883a 	mov	r5,r2
   4356c:	00433f40 	call	433f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43570:	e0bff117 	ldw	r2,-60(fp)
   43574:	10880020 	cmpeqi	r2,r2,8192
   43578:	10803fcc 	andi	r2,r2,255
   4357c:	00000506 	br	43594 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43580:	00434ac0 	call	434ac <alt_get_errno>
   43584:	1007883a 	mov	r3,r2
   43588:	00801444 	movi	r2,81
   4358c:	18800015 	stw	r2,0(r3)
    return 0;
   43590:	0005883a 	mov	r2,zero
  }
}
   43594:	e037883a 	mov	sp,fp
   43598:	dfc00117 	ldw	ra,4(sp)
   4359c:	df000017 	ldw	fp,0(sp)
   435a0:	dec00204 	addi	sp,sp,8
   435a4:	f800283a 	ret

000435a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   435a8:	defffc04 	addi	sp,sp,-16
   435ac:	df000315 	stw	fp,12(sp)
   435b0:	df000304 	addi	fp,sp,12
   435b4:	e13ffd15 	stw	r4,-12(fp)
   435b8:	e17ffe15 	stw	r5,-8(fp)
   435bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   435c0:	e0fffe17 	ldw	r3,-8(fp)
   435c4:	e0bffd17 	ldw	r2,-12(fp)
   435c8:	18800c26 	beq	r3,r2,435fc <alt_load_section+0x54>
  {
    while( to != end )
   435cc:	00000806 	br	435f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   435d0:	e0bffe17 	ldw	r2,-8(fp)
   435d4:	10c00104 	addi	r3,r2,4
   435d8:	e0fffe15 	stw	r3,-8(fp)
   435dc:	e0fffd17 	ldw	r3,-12(fp)
   435e0:	19000104 	addi	r4,r3,4
   435e4:	e13ffd15 	stw	r4,-12(fp)
   435e8:	18c00017 	ldw	r3,0(r3)
   435ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   435f0:	e0fffe17 	ldw	r3,-8(fp)
   435f4:	e0bfff17 	ldw	r2,-4(fp)
   435f8:	18bff51e 	bne	r3,r2,435d0 <__alt_data_end+0xfffd2890>
    {
      *to++ = *from++;
    }
  }
}
   435fc:	e037883a 	mov	sp,fp
   43600:	df000017 	ldw	fp,0(sp)
   43604:	dec00104 	addi	sp,sp,4
   43608:	f800283a 	ret

0004360c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4360c:	defffe04 	addi	sp,sp,-8
   43610:	dfc00115 	stw	ra,4(sp)
   43614:	df000015 	stw	fp,0(sp)
   43618:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4361c:	01000134 	movhi	r4,4
   43620:	211d5704 	addi	r4,r4,30044
   43624:	01400134 	movhi	r5,4
   43628:	2956bc04 	addi	r5,r5,23280
   4362c:	01800134 	movhi	r6,4
   43630:	319d5704 	addi	r6,r6,30044
   43634:	00435a80 	call	435a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43638:	01000134 	movhi	r4,4
   4363c:	21000804 	addi	r4,r4,32
   43640:	01400134 	movhi	r5,4
   43644:	29400804 	addi	r5,r5,32
   43648:	01800134 	movhi	r6,4
   4364c:	31806f04 	addi	r6,r6,444
   43650:	00435a80 	call	435a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43654:	01000134 	movhi	r4,4
   43658:	2116a504 	addi	r4,r4,23188
   4365c:	01400134 	movhi	r5,4
   43660:	2956a504 	addi	r5,r5,23188
   43664:	01800134 	movhi	r6,4
   43668:	3196bc04 	addi	r6,r6,23280
   4366c:	00435a80 	call	435a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43670:	0044a0c0 	call	44a0c <alt_dcache_flush_all>
  alt_icache_flush_all();
   43674:	0044bd40 	call	44bd4 <alt_icache_flush_all>
}
   43678:	e037883a 	mov	sp,fp
   4367c:	dfc00117 	ldw	ra,4(sp)
   43680:	df000017 	ldw	fp,0(sp)
   43684:	dec00204 	addi	sp,sp,8
   43688:	f800283a 	ret

0004368c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4368c:	defffe04 	addi	sp,sp,-8
   43690:	dfc00115 	stw	ra,4(sp)
   43694:	df000015 	stw	fp,0(sp)
   43698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4369c:	00800134 	movhi	r2,4
   436a0:	109d5204 	addi	r2,r2,30024
   436a4:	10800017 	ldw	r2,0(r2)
   436a8:	10000526 	beq	r2,zero,436c0 <alt_get_errno+0x34>
   436ac:	00800134 	movhi	r2,4
   436b0:	109d5204 	addi	r2,r2,30024
   436b4:	10800017 	ldw	r2,0(r2)
   436b8:	103ee83a 	callr	r2
   436bc:	00000206 	br	436c8 <alt_get_errno+0x3c>
   436c0:	00800174 	movhi	r2,5
   436c4:	10a3f504 	addi	r2,r2,-28716
}
   436c8:	e037883a 	mov	sp,fp
   436cc:	dfc00117 	ldw	ra,4(sp)
   436d0:	df000017 	ldw	fp,0(sp)
   436d4:	dec00204 	addi	sp,sp,8
   436d8:	f800283a 	ret

000436dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   436dc:	defff904 	addi	sp,sp,-28
   436e0:	dfc00615 	stw	ra,24(sp)
   436e4:	df000515 	stw	fp,20(sp)
   436e8:	df000504 	addi	fp,sp,20
   436ec:	e13ffd15 	stw	r4,-12(fp)
   436f0:	e17ffe15 	stw	r5,-8(fp)
   436f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   436f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   436fc:	e0bffd17 	ldw	r2,-12(fp)
   43700:	10000816 	blt	r2,zero,43724 <lseek+0x48>
   43704:	e13ffd17 	ldw	r4,-12(fp)
   43708:	01400304 	movi	r5,12
   4370c:	00407080 	call	40708 <__mulsi3>
   43710:	1007883a 	mov	r3,r2
   43714:	00800134 	movhi	r2,4
   43718:	1098d104 	addi	r2,r2,25412
   4371c:	1885883a 	add	r2,r3,r2
   43720:	00000106 	br	43728 <lseek+0x4c>
   43724:	0005883a 	mov	r2,zero
   43728:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4372c:	e0bffc17 	ldw	r2,-16(fp)
   43730:	10001026 	beq	r2,zero,43774 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43734:	e0bffc17 	ldw	r2,-16(fp)
   43738:	10800017 	ldw	r2,0(r2)
   4373c:	10800717 	ldw	r2,28(r2)
   43740:	10000926 	beq	r2,zero,43768 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43744:	e0bffc17 	ldw	r2,-16(fp)
   43748:	10800017 	ldw	r2,0(r2)
   4374c:	10800717 	ldw	r2,28(r2)
   43750:	e13ffc17 	ldw	r4,-16(fp)
   43754:	e17ffe17 	ldw	r5,-8(fp)
   43758:	e1bfff17 	ldw	r6,-4(fp)
   4375c:	103ee83a 	callr	r2
   43760:	e0bffb15 	stw	r2,-20(fp)
   43764:	00000506 	br	4377c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43768:	00bfde84 	movi	r2,-134
   4376c:	e0bffb15 	stw	r2,-20(fp)
   43770:	00000206 	br	4377c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43774:	00bfebc4 	movi	r2,-81
   43778:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4377c:	e0bffb17 	ldw	r2,-20(fp)
   43780:	1000070e 	bge	r2,zero,437a0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43784:	004368c0 	call	4368c <alt_get_errno>
   43788:	1007883a 	mov	r3,r2
   4378c:	e0bffb17 	ldw	r2,-20(fp)
   43790:	0085c83a 	sub	r2,zero,r2
   43794:	18800015 	stw	r2,0(r3)
    rc = -1;
   43798:	00bfffc4 	movi	r2,-1
   4379c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   437a0:	e0bffb17 	ldw	r2,-20(fp)
}
   437a4:	e037883a 	mov	sp,fp
   437a8:	dfc00117 	ldw	ra,4(sp)
   437ac:	df000017 	ldw	fp,0(sp)
   437b0:	dec00204 	addi	sp,sp,8
   437b4:	f800283a 	ret

000437b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   437b8:	defffd04 	addi	sp,sp,-12
   437bc:	dfc00215 	stw	ra,8(sp)
   437c0:	df000115 	stw	fp,4(sp)
   437c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   437c8:	0009883a 	mov	r4,zero
   437cc:	0043cac0 	call	43cac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   437d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   437d4:	0043ce00 	call	43ce0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   437d8:	01000134 	movhi	r4,4
   437dc:	2116b204 	addi	r4,r4,23240
   437e0:	01400134 	movhi	r5,4
   437e4:	2956b204 	addi	r5,r5,23240
   437e8:	01800134 	movhi	r6,4
   437ec:	3196b204 	addi	r6,r6,23240
   437f0:	0044fa00 	call	44fa0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   437f4:	0044b1c0 	call	44b1c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   437f8:	01000134 	movhi	r4,4
   437fc:	2112de04 	addi	r4,r4,19320
   43800:	00456f00 	call	456f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43804:	d126ad17 	ldw	r4,-25932(gp)
   43808:	d0e6ae17 	ldw	r3,-25928(gp)
   4380c:	d0a6af17 	ldw	r2,-25924(gp)
   43810:	180b883a 	mov	r5,r3
   43814:	100d883a 	mov	r6,r2
   43818:	00405b40 	call	405b4 <main>
   4381c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43820:	01000044 	movi	r4,1
   43824:	00432a00 	call	432a0 <close>
  exit (result);
   43828:	e13fff17 	ldw	r4,-4(fp)
   4382c:	00457040 	call	45704 <exit>

00043830 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43830:	defffe04 	addi	sp,sp,-8
   43834:	df000115 	stw	fp,4(sp)
   43838:	df000104 	addi	fp,sp,4
   4383c:	e13fff15 	stw	r4,-4(fp)
}
   43840:	e037883a 	mov	sp,fp
   43844:	df000017 	ldw	fp,0(sp)
   43848:	dec00104 	addi	sp,sp,4
   4384c:	f800283a 	ret

00043850 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43850:	defffe04 	addi	sp,sp,-8
   43854:	df000115 	stw	fp,4(sp)
   43858:	df000104 	addi	fp,sp,4
   4385c:	e13fff15 	stw	r4,-4(fp)
}
   43860:	e037883a 	mov	sp,fp
   43864:	df000017 	ldw	fp,0(sp)
   43868:	dec00104 	addi	sp,sp,4
   4386c:	f800283a 	ret

00043870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43870:	defffe04 	addi	sp,sp,-8
   43874:	dfc00115 	stw	ra,4(sp)
   43878:	df000015 	stw	fp,0(sp)
   4387c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43880:	00800134 	movhi	r2,4
   43884:	109d5204 	addi	r2,r2,30024
   43888:	10800017 	ldw	r2,0(r2)
   4388c:	10000526 	beq	r2,zero,438a4 <alt_get_errno+0x34>
   43890:	00800134 	movhi	r2,4
   43894:	109d5204 	addi	r2,r2,30024
   43898:	10800017 	ldw	r2,0(r2)
   4389c:	103ee83a 	callr	r2
   438a0:	00000206 	br	438ac <alt_get_errno+0x3c>
   438a4:	00800174 	movhi	r2,5
   438a8:	10a3f504 	addi	r2,r2,-28716
}
   438ac:	e037883a 	mov	sp,fp
   438b0:	dfc00117 	ldw	ra,4(sp)
   438b4:	df000017 	ldw	fp,0(sp)
   438b8:	dec00204 	addi	sp,sp,8
   438bc:	f800283a 	ret

000438c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   438c0:	defff904 	addi	sp,sp,-28
   438c4:	dfc00615 	stw	ra,24(sp)
   438c8:	df000515 	stw	fp,20(sp)
   438cc:	df000504 	addi	fp,sp,20
   438d0:	e13ffd15 	stw	r4,-12(fp)
   438d4:	e17ffe15 	stw	r5,-8(fp)
   438d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   438dc:	e0bffd17 	ldw	r2,-12(fp)
   438e0:	10000816 	blt	r2,zero,43904 <read+0x44>
   438e4:	e13ffd17 	ldw	r4,-12(fp)
   438e8:	01400304 	movi	r5,12
   438ec:	00407080 	call	40708 <__mulsi3>
   438f0:	1007883a 	mov	r3,r2
   438f4:	00800134 	movhi	r2,4
   438f8:	1098d104 	addi	r2,r2,25412
   438fc:	1885883a 	add	r2,r3,r2
   43900:	00000106 	br	43908 <read+0x48>
   43904:	0005883a 	mov	r2,zero
   43908:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4390c:	e0bffb17 	ldw	r2,-20(fp)
   43910:	10002226 	beq	r2,zero,4399c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43914:	e0bffb17 	ldw	r2,-20(fp)
   43918:	10800217 	ldw	r2,8(r2)
   4391c:	108000cc 	andi	r2,r2,3
   43920:	10800060 	cmpeqi	r2,r2,1
   43924:	1000181e 	bne	r2,zero,43988 <read+0xc8>
        (fd->dev->read))
   43928:	e0bffb17 	ldw	r2,-20(fp)
   4392c:	10800017 	ldw	r2,0(r2)
   43930:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43934:	10001426 	beq	r2,zero,43988 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43938:	e0bffb17 	ldw	r2,-20(fp)
   4393c:	10800017 	ldw	r2,0(r2)
   43940:	10800517 	ldw	r2,20(r2)
   43944:	e0ffff17 	ldw	r3,-4(fp)
   43948:	e13ffb17 	ldw	r4,-20(fp)
   4394c:	e17ffe17 	ldw	r5,-8(fp)
   43950:	180d883a 	mov	r6,r3
   43954:	103ee83a 	callr	r2
   43958:	e0bffc15 	stw	r2,-16(fp)
   4395c:	e0bffc17 	ldw	r2,-16(fp)
   43960:	1000070e 	bge	r2,zero,43980 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43964:	00438700 	call	43870 <alt_get_errno>
   43968:	1007883a 	mov	r3,r2
   4396c:	e0bffc17 	ldw	r2,-16(fp)
   43970:	0085c83a 	sub	r2,zero,r2
   43974:	18800015 	stw	r2,0(r3)
          return -1;
   43978:	00bfffc4 	movi	r2,-1
   4397c:	00000c06 	br	439b0 <read+0xf0>
        }
        return rval;
   43980:	e0bffc17 	ldw	r2,-16(fp)
   43984:	00000a06 	br	439b0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43988:	00438700 	call	43870 <alt_get_errno>
   4398c:	1007883a 	mov	r3,r2
   43990:	00800344 	movi	r2,13
   43994:	18800015 	stw	r2,0(r3)
   43998:	00000406 	br	439ac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4399c:	00438700 	call	43870 <alt_get_errno>
   439a0:	1007883a 	mov	r3,r2
   439a4:	00801444 	movi	r2,81
   439a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   439ac:	00bfffc4 	movi	r2,-1
}
   439b0:	e037883a 	mov	sp,fp
   439b4:	dfc00117 	ldw	ra,4(sp)
   439b8:	df000017 	ldw	fp,0(sp)
   439bc:	dec00204 	addi	sp,sp,8
   439c0:	f800283a 	ret

000439c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   439c4:	defffc04 	addi	sp,sp,-16
   439c8:	dfc00315 	stw	ra,12(sp)
   439cc:	df000215 	stw	fp,8(sp)
   439d0:	dc000115 	stw	r16,4(sp)
   439d4:	df000204 	addi	fp,sp,8
   439d8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   439dc:	e0bffe17 	ldw	r2,-8(fp)
   439e0:	108000d0 	cmplti	r2,r2,3
   439e4:	1000111e 	bne	r2,zero,43a2c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   439e8:	04000134 	movhi	r16,4
   439ec:	8418d104 	addi	r16,r16,25412
   439f0:	e0bffe17 	ldw	r2,-8(fp)
   439f4:	1009883a 	mov	r4,r2
   439f8:	01400304 	movi	r5,12
   439fc:	00407080 	call	40708 <__mulsi3>
   43a00:	8085883a 	add	r2,r16,r2
   43a04:	10800204 	addi	r2,r2,8
   43a08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43a0c:	04000134 	movhi	r16,4
   43a10:	8418d104 	addi	r16,r16,25412
   43a14:	e0bffe17 	ldw	r2,-8(fp)
   43a18:	1009883a 	mov	r4,r2
   43a1c:	01400304 	movi	r5,12
   43a20:	00407080 	call	40708 <__mulsi3>
   43a24:	8085883a 	add	r2,r16,r2
   43a28:	10000015 	stw	zero,0(r2)
  }
}
   43a2c:	e6ffff04 	addi	sp,fp,-4
   43a30:	dfc00217 	ldw	ra,8(sp)
   43a34:	df000117 	ldw	fp,4(sp)
   43a38:	dc000017 	ldw	r16,0(sp)
   43a3c:	dec00304 	addi	sp,sp,12
   43a40:	f800283a 	ret

00043a44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43a44:	defff904 	addi	sp,sp,-28
   43a48:	df000615 	stw	fp,24(sp)
   43a4c:	df000604 	addi	fp,sp,24
   43a50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43a54:	0005303a 	rdctl	r2,status
   43a58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43a5c:	e0fffc17 	ldw	r3,-16(fp)
   43a60:	00bfff84 	movi	r2,-2
   43a64:	1884703a 	and	r2,r3,r2
   43a68:	1001703a 	wrctl	status,r2
  
  return context;
   43a6c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43a70:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43a74:	d0a00a17 	ldw	r2,-32728(gp)
   43a78:	10c000c4 	addi	r3,r2,3
   43a7c:	00bfff04 	movi	r2,-4
   43a80:	1884703a 	and	r2,r3,r2
   43a84:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43a88:	d0e00a17 	ldw	r3,-32728(gp)
   43a8c:	e0bfff17 	ldw	r2,-4(fp)
   43a90:	1887883a 	add	r3,r3,r2
   43a94:	008001f4 	movhi	r2,7
   43a98:	10835004 	addi	r2,r2,3392
   43a9c:	10c0062e 	bgeu	r2,r3,43ab8 <sbrk+0x74>
   43aa0:	e0bffa17 	ldw	r2,-24(fp)
   43aa4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43aa8:	e0bffd17 	ldw	r2,-12(fp)
   43aac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43ab0:	00bfffc4 	movi	r2,-1
   43ab4:	00000b06 	br	43ae4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43ab8:	d0a00a17 	ldw	r2,-32728(gp)
   43abc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   43ac0:	d0e00a17 	ldw	r3,-32728(gp)
   43ac4:	e0bfff17 	ldw	r2,-4(fp)
   43ac8:	1885883a 	add	r2,r3,r2
   43acc:	d0a00a15 	stw	r2,-32728(gp)
   43ad0:	e0bffa17 	ldw	r2,-24(fp)
   43ad4:	e0bffe15 	stw	r2,-8(fp)
   43ad8:	e0bffe17 	ldw	r2,-8(fp)
   43adc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43ae0:	e0bffb17 	ldw	r2,-20(fp)
} 
   43ae4:	e037883a 	mov	sp,fp
   43ae8:	df000017 	ldw	fp,0(sp)
   43aec:	dec00104 	addi	sp,sp,4
   43af0:	f800283a 	ret

00043af4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   43af4:	defffd04 	addi	sp,sp,-12
   43af8:	dfc00215 	stw	ra,8(sp)
   43afc:	df000115 	stw	fp,4(sp)
   43b00:	df000104 	addi	fp,sp,4
   43b04:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   43b08:	e13fff17 	ldw	r4,-4(fp)
   43b0c:	00448b40 	call	448b4 <alt_busy_sleep>
}
   43b10:	e037883a 	mov	sp,fp
   43b14:	dfc00117 	ldw	ra,4(sp)
   43b18:	df000017 	ldw	fp,0(sp)
   43b1c:	dec00204 	addi	sp,sp,8
   43b20:	f800283a 	ret

00043b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43b24:	defffe04 	addi	sp,sp,-8
   43b28:	dfc00115 	stw	ra,4(sp)
   43b2c:	df000015 	stw	fp,0(sp)
   43b30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43b34:	00800134 	movhi	r2,4
   43b38:	109d5204 	addi	r2,r2,30024
   43b3c:	10800017 	ldw	r2,0(r2)
   43b40:	10000526 	beq	r2,zero,43b58 <alt_get_errno+0x34>
   43b44:	00800134 	movhi	r2,4
   43b48:	109d5204 	addi	r2,r2,30024
   43b4c:	10800017 	ldw	r2,0(r2)
   43b50:	103ee83a 	callr	r2
   43b54:	00000206 	br	43b60 <alt_get_errno+0x3c>
   43b58:	00800174 	movhi	r2,5
   43b5c:	10a3f504 	addi	r2,r2,-28716
}
   43b60:	e037883a 	mov	sp,fp
   43b64:	dfc00117 	ldw	ra,4(sp)
   43b68:	df000017 	ldw	fp,0(sp)
   43b6c:	dec00204 	addi	sp,sp,8
   43b70:	f800283a 	ret

00043b74 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43b74:	defff904 	addi	sp,sp,-28
   43b78:	dfc00615 	stw	ra,24(sp)
   43b7c:	df000515 	stw	fp,20(sp)
   43b80:	df000504 	addi	fp,sp,20
   43b84:	e13ffd15 	stw	r4,-12(fp)
   43b88:	e17ffe15 	stw	r5,-8(fp)
   43b8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43b90:	e0bffd17 	ldw	r2,-12(fp)
   43b94:	10000816 	blt	r2,zero,43bb8 <write+0x44>
   43b98:	e13ffd17 	ldw	r4,-12(fp)
   43b9c:	01400304 	movi	r5,12
   43ba0:	00407080 	call	40708 <__mulsi3>
   43ba4:	1007883a 	mov	r3,r2
   43ba8:	00800134 	movhi	r2,4
   43bac:	1098d104 	addi	r2,r2,25412
   43bb0:	1885883a 	add	r2,r3,r2
   43bb4:	00000106 	br	43bbc <write+0x48>
   43bb8:	0005883a 	mov	r2,zero
   43bbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43bc0:	e0bffb17 	ldw	r2,-20(fp)
   43bc4:	10002126 	beq	r2,zero,43c4c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43bc8:	e0bffb17 	ldw	r2,-20(fp)
   43bcc:	10800217 	ldw	r2,8(r2)
   43bd0:	108000cc 	andi	r2,r2,3
   43bd4:	10001826 	beq	r2,zero,43c38 <write+0xc4>
   43bd8:	e0bffb17 	ldw	r2,-20(fp)
   43bdc:	10800017 	ldw	r2,0(r2)
   43be0:	10800617 	ldw	r2,24(r2)
   43be4:	10001426 	beq	r2,zero,43c38 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43be8:	e0bffb17 	ldw	r2,-20(fp)
   43bec:	10800017 	ldw	r2,0(r2)
   43bf0:	10800617 	ldw	r2,24(r2)
   43bf4:	e0ffff17 	ldw	r3,-4(fp)
   43bf8:	e13ffb17 	ldw	r4,-20(fp)
   43bfc:	e17ffe17 	ldw	r5,-8(fp)
   43c00:	180d883a 	mov	r6,r3
   43c04:	103ee83a 	callr	r2
   43c08:	e0bffc15 	stw	r2,-16(fp)
   43c0c:	e0bffc17 	ldw	r2,-16(fp)
   43c10:	1000070e 	bge	r2,zero,43c30 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43c14:	0043b240 	call	43b24 <alt_get_errno>
   43c18:	1007883a 	mov	r3,r2
   43c1c:	e0bffc17 	ldw	r2,-16(fp)
   43c20:	0085c83a 	sub	r2,zero,r2
   43c24:	18800015 	stw	r2,0(r3)
        return -1;
   43c28:	00bfffc4 	movi	r2,-1
   43c2c:	00000c06 	br	43c60 <write+0xec>
      }
      return rval;
   43c30:	e0bffc17 	ldw	r2,-16(fp)
   43c34:	00000a06 	br	43c60 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43c38:	0043b240 	call	43b24 <alt_get_errno>
   43c3c:	1007883a 	mov	r3,r2
   43c40:	00800344 	movi	r2,13
   43c44:	18800015 	stw	r2,0(r3)
   43c48:	00000406 	br	43c5c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43c4c:	0043b240 	call	43b24 <alt_get_errno>
   43c50:	1007883a 	mov	r3,r2
   43c54:	00801444 	movi	r2,81
   43c58:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43c5c:	00bfffc4 	movi	r2,-1
}
   43c60:	e037883a 	mov	sp,fp
   43c64:	dfc00117 	ldw	ra,4(sp)
   43c68:	df000017 	ldw	fp,0(sp)
   43c6c:	dec00204 	addi	sp,sp,8
   43c70:	f800283a 	ret

00043c74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43c74:	defffd04 	addi	sp,sp,-12
   43c78:	dfc00215 	stw	ra,8(sp)
   43c7c:	df000115 	stw	fp,4(sp)
   43c80:	df000104 	addi	fp,sp,4
   43c84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43c88:	e13fff17 	ldw	r4,-4(fp)
   43c8c:	01400134 	movhi	r5,4
   43c90:	295d4f04 	addi	r5,r5,30012
   43c94:	0044a780 	call	44a78 <alt_dev_llist_insert>
}
   43c98:	e037883a 	mov	sp,fp
   43c9c:	dfc00117 	ldw	ra,4(sp)
   43ca0:	df000017 	ldw	fp,0(sp)
   43ca4:	dec00204 	addi	sp,sp,8
   43ca8:	f800283a 	ret

00043cac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43cac:	defffd04 	addi	sp,sp,-12
   43cb0:	dfc00215 	stw	ra,8(sp)
   43cb4:	df000115 	stw	fp,4(sp)
   43cb8:	df000104 	addi	fp,sp,4
   43cbc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROC, nios2_proc);
   43cc0:	00454580 	call	45458 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43cc4:	00800044 	movi	r2,1
   43cc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43ccc:	e037883a 	mov	sp,fp
   43cd0:	dfc00117 	ldw	ra,4(sp)
   43cd4:	df000017 	ldw	fp,0(sp)
   43cd8:	dec00204 	addi	sp,sp,8
   43cdc:	f800283a 	ret

00043ce0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43ce0:	defffe04 	addi	sp,sp,-8
   43ce4:	dfc00115 	stw	ra,4(sp)
   43ce8:	df000015 	stw	fp,0(sp)
   43cec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43cf0:	01000134 	movhi	r4,4
   43cf4:	21193b04 	addi	r4,r4,25836
   43cf8:	000b883a 	mov	r5,zero
   43cfc:	000d883a 	mov	r6,zero
   43d00:	0043e8c0 	call	43e8c <altera_avalon_jtag_uart_init>
   43d04:	01000134 	movhi	r4,4
   43d08:	21193104 	addi	r4,r4,25796
   43d0c:	0043c740 	call	43c74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_1337, sysid_1337);
   43d10:	0001883a 	nop
}
   43d14:	e037883a 	mov	sp,fp
   43d18:	dfc00117 	ldw	ra,4(sp)
   43d1c:	df000017 	ldw	fp,0(sp)
   43d20:	dec00204 	addi	sp,sp,8
   43d24:	f800283a 	ret

00043d28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43d28:	defffa04 	addi	sp,sp,-24
   43d2c:	dfc00515 	stw	ra,20(sp)
   43d30:	df000415 	stw	fp,16(sp)
   43d34:	df000404 	addi	fp,sp,16
   43d38:	e13ffd15 	stw	r4,-12(fp)
   43d3c:	e17ffe15 	stw	r5,-8(fp)
   43d40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43d44:	e0bffd17 	ldw	r2,-12(fp)
   43d48:	10800017 	ldw	r2,0(r2)
   43d4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43d50:	e0bffc17 	ldw	r2,-16(fp)
   43d54:	10c00a04 	addi	r3,r2,40
   43d58:	e0bffd17 	ldw	r2,-12(fp)
   43d5c:	10800217 	ldw	r2,8(r2)
   43d60:	1809883a 	mov	r4,r3
   43d64:	e17ffe17 	ldw	r5,-8(fp)
   43d68:	e1bfff17 	ldw	r6,-4(fp)
   43d6c:	100f883a 	mov	r7,r2
   43d70:	00443500 	call	44350 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43d74:	e037883a 	mov	sp,fp
   43d78:	dfc00117 	ldw	ra,4(sp)
   43d7c:	df000017 	ldw	fp,0(sp)
   43d80:	dec00204 	addi	sp,sp,8
   43d84:	f800283a 	ret

00043d88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43d88:	defffa04 	addi	sp,sp,-24
   43d8c:	dfc00515 	stw	ra,20(sp)
   43d90:	df000415 	stw	fp,16(sp)
   43d94:	df000404 	addi	fp,sp,16
   43d98:	e13ffd15 	stw	r4,-12(fp)
   43d9c:	e17ffe15 	stw	r5,-8(fp)
   43da0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43da4:	e0bffd17 	ldw	r2,-12(fp)
   43da8:	10800017 	ldw	r2,0(r2)
   43dac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43db0:	e0bffc17 	ldw	r2,-16(fp)
   43db4:	10c00a04 	addi	r3,r2,40
   43db8:	e0bffd17 	ldw	r2,-12(fp)
   43dbc:	10800217 	ldw	r2,8(r2)
   43dc0:	1809883a 	mov	r4,r3
   43dc4:	e17ffe17 	ldw	r5,-8(fp)
   43dc8:	e1bfff17 	ldw	r6,-4(fp)
   43dcc:	100f883a 	mov	r7,r2
   43dd0:	004455c0 	call	4455c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43dd4:	e037883a 	mov	sp,fp
   43dd8:	dfc00117 	ldw	ra,4(sp)
   43ddc:	df000017 	ldw	fp,0(sp)
   43de0:	dec00204 	addi	sp,sp,8
   43de4:	f800283a 	ret

00043de8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43de8:	defffc04 	addi	sp,sp,-16
   43dec:	dfc00315 	stw	ra,12(sp)
   43df0:	df000215 	stw	fp,8(sp)
   43df4:	df000204 	addi	fp,sp,8
   43df8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43dfc:	e0bfff17 	ldw	r2,-4(fp)
   43e00:	10800017 	ldw	r2,0(r2)
   43e04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43e08:	e0bffe17 	ldw	r2,-8(fp)
   43e0c:	10c00a04 	addi	r3,r2,40
   43e10:	e0bfff17 	ldw	r2,-4(fp)
   43e14:	10800217 	ldw	r2,8(r2)
   43e18:	1809883a 	mov	r4,r3
   43e1c:	100b883a 	mov	r5,r2
   43e20:	00441fc0 	call	441fc <altera_avalon_jtag_uart_close>
}
   43e24:	e037883a 	mov	sp,fp
   43e28:	dfc00117 	ldw	ra,4(sp)
   43e2c:	df000017 	ldw	fp,0(sp)
   43e30:	dec00204 	addi	sp,sp,8
   43e34:	f800283a 	ret

00043e38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43e38:	defffa04 	addi	sp,sp,-24
   43e3c:	dfc00515 	stw	ra,20(sp)
   43e40:	df000415 	stw	fp,16(sp)
   43e44:	df000404 	addi	fp,sp,16
   43e48:	e13ffd15 	stw	r4,-12(fp)
   43e4c:	e17ffe15 	stw	r5,-8(fp)
   43e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43e54:	e0bffd17 	ldw	r2,-12(fp)
   43e58:	10800017 	ldw	r2,0(r2)
   43e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43e60:	e0bffc17 	ldw	r2,-16(fp)
   43e64:	10800a04 	addi	r2,r2,40
   43e68:	1009883a 	mov	r4,r2
   43e6c:	e17ffe17 	ldw	r5,-8(fp)
   43e70:	e1bfff17 	ldw	r6,-4(fp)
   43e74:	00442640 	call	44264 <altera_avalon_jtag_uart_ioctl>
}
   43e78:	e037883a 	mov	sp,fp
   43e7c:	dfc00117 	ldw	ra,4(sp)
   43e80:	df000017 	ldw	fp,0(sp)
   43e84:	dec00204 	addi	sp,sp,8
   43e88:	f800283a 	ret

00043e8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43e8c:	defffa04 	addi	sp,sp,-24
   43e90:	dfc00515 	stw	ra,20(sp)
   43e94:	df000415 	stw	fp,16(sp)
   43e98:	df000404 	addi	fp,sp,16
   43e9c:	e13ffd15 	stw	r4,-12(fp)
   43ea0:	e17ffe15 	stw	r5,-8(fp)
   43ea4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43ea8:	e0bffd17 	ldw	r2,-12(fp)
   43eac:	00c00044 	movi	r3,1
   43eb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43eb4:	e0bffd17 	ldw	r2,-12(fp)
   43eb8:	10800017 	ldw	r2,0(r2)
   43ebc:	10800104 	addi	r2,r2,4
   43ec0:	1007883a 	mov	r3,r2
   43ec4:	e0bffd17 	ldw	r2,-12(fp)
   43ec8:	10800817 	ldw	r2,32(r2)
   43ecc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43ed0:	e0fffe17 	ldw	r3,-8(fp)
   43ed4:	e0bfff17 	ldw	r2,-4(fp)
   43ed8:	d8000015 	stw	zero,0(sp)
   43edc:	1809883a 	mov	r4,r3
   43ee0:	100b883a 	mov	r5,r2
   43ee4:	01800134 	movhi	r6,4
   43ee8:	318fd404 	addi	r6,r6,16208
   43eec:	e1fffd17 	ldw	r7,-12(fp)
   43ef0:	0044bf00 	call	44bf0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43ef4:	e0bffd17 	ldw	r2,-12(fp)
   43ef8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43efc:	e0bffd17 	ldw	r2,-12(fp)
   43f00:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43f04:	00800174 	movhi	r2,5
   43f08:	10a3fa04 	addi	r2,r2,-28696
   43f0c:	10800017 	ldw	r2,0(r2)
   43f10:	1809883a 	mov	r4,r3
   43f14:	100b883a 	mov	r5,r2
   43f18:	01800134 	movhi	r6,4
   43f1c:	31905504 	addi	r6,r6,16724
   43f20:	e1fffd17 	ldw	r7,-12(fp)
   43f24:	00447740 	call	44774 <alt_alarm_start>
   43f28:	1000040e 	bge	r2,zero,43f3c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43f2c:	e0fffd17 	ldw	r3,-12(fp)
   43f30:	00a00034 	movhi	r2,32768
   43f34:	10bfffc4 	addi	r2,r2,-1
   43f38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43f3c:	e037883a 	mov	sp,fp
   43f40:	dfc00117 	ldw	ra,4(sp)
   43f44:	df000017 	ldw	fp,0(sp)
   43f48:	dec00204 	addi	sp,sp,8
   43f4c:	f800283a 	ret

00043f50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43f50:	defff804 	addi	sp,sp,-32
   43f54:	df000715 	stw	fp,28(sp)
   43f58:	df000704 	addi	fp,sp,28
   43f5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43f60:	e0bfff17 	ldw	r2,-4(fp)
   43f64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43f68:	e0bffb17 	ldw	r2,-20(fp)
   43f6c:	10800017 	ldw	r2,0(r2)
   43f70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f74:	e0bffc17 	ldw	r2,-16(fp)
   43f78:	10800104 	addi	r2,r2,4
   43f7c:	10800037 	ldwio	r2,0(r2)
   43f80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43f84:	e0bffd17 	ldw	r2,-12(fp)
   43f88:	1080c00c 	andi	r2,r2,768
   43f8c:	1000011e 	bne	r2,zero,43f94 <altera_avalon_jtag_uart_irq+0x44>
      break;
   43f90:	00006c06 	br	44144 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43f94:	e0bffd17 	ldw	r2,-12(fp)
   43f98:	1080400c 	andi	r2,r2,256
   43f9c:	10003426 	beq	r2,zero,44070 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43fa0:	00800074 	movhi	r2,1
   43fa4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43fa8:	e0bffb17 	ldw	r2,-20(fp)
   43fac:	10800a17 	ldw	r2,40(r2)
   43fb0:	10800044 	addi	r2,r2,1
   43fb4:	1081ffcc 	andi	r2,r2,2047
   43fb8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43fbc:	e0bffb17 	ldw	r2,-20(fp)
   43fc0:	10c00b17 	ldw	r3,44(r2)
   43fc4:	e0bffe17 	ldw	r2,-8(fp)
   43fc8:	1880011e 	bne	r3,r2,43fd0 <altera_avalon_jtag_uart_irq+0x80>
          break;
   43fcc:	00001606 	br	44028 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43fd0:	e0bffc17 	ldw	r2,-16(fp)
   43fd4:	10800037 	ldwio	r2,0(r2)
   43fd8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43fdc:	e0bff917 	ldw	r2,-28(fp)
   43fe0:	10a0000c 	andi	r2,r2,32768
   43fe4:	1000011e 	bne	r2,zero,43fec <altera_avalon_jtag_uart_irq+0x9c>
          break;
   43fe8:	00000f06 	br	44028 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43fec:	e0bffb17 	ldw	r2,-20(fp)
   43ff0:	10800a17 	ldw	r2,40(r2)
   43ff4:	e0fff917 	ldw	r3,-28(fp)
   43ff8:	1809883a 	mov	r4,r3
   43ffc:	e0fffb17 	ldw	r3,-20(fp)
   44000:	1885883a 	add	r2,r3,r2
   44004:	10800e04 	addi	r2,r2,56
   44008:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4400c:	e0bffb17 	ldw	r2,-20(fp)
   44010:	10800a17 	ldw	r2,40(r2)
   44014:	10800044 	addi	r2,r2,1
   44018:	10c1ffcc 	andi	r3,r2,2047
   4401c:	e0bffb17 	ldw	r2,-20(fp)
   44020:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   44024:	003fe006 	br	43fa8 <__alt_data_end+0xfffd3268>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   44028:	e0bff917 	ldw	r2,-28(fp)
   4402c:	10bfffec 	andhi	r2,r2,65535
   44030:	10000f26 	beq	r2,zero,44070 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44034:	e0bffb17 	ldw	r2,-20(fp)
   44038:	10c00817 	ldw	r3,32(r2)
   4403c:	00bfff84 	movi	r2,-2
   44040:	1886703a 	and	r3,r3,r2
   44044:	e0bffb17 	ldw	r2,-20(fp)
   44048:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4404c:	e0bffc17 	ldw	r2,-16(fp)
   44050:	10800104 	addi	r2,r2,4
   44054:	1007883a 	mov	r3,r2
   44058:	e0bffb17 	ldw	r2,-20(fp)
   4405c:	10800817 	ldw	r2,32(r2)
   44060:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44064:	e0bffc17 	ldw	r2,-16(fp)
   44068:	10800104 	addi	r2,r2,4
   4406c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   44070:	e0bffd17 	ldw	r2,-12(fp)
   44074:	1080800c 	andi	r2,r2,512
   44078:	10003126 	beq	r2,zero,44140 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4407c:	e0bffd17 	ldw	r2,-12(fp)
   44080:	1004d43a 	srli	r2,r2,16
   44084:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   44088:	00001406 	br	440dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4408c:	e0bffc17 	ldw	r2,-16(fp)
   44090:	e0fffb17 	ldw	r3,-20(fp)
   44094:	18c00d17 	ldw	r3,52(r3)
   44098:	e13ffb17 	ldw	r4,-20(fp)
   4409c:	20c7883a 	add	r3,r4,r3
   440a0:	18c20e04 	addi	r3,r3,2104
   440a4:	18c00003 	ldbu	r3,0(r3)
   440a8:	18c03fcc 	andi	r3,r3,255
   440ac:	18c0201c 	xori	r3,r3,128
   440b0:	18ffe004 	addi	r3,r3,-128
   440b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   440b8:	e0bffb17 	ldw	r2,-20(fp)
   440bc:	10800d17 	ldw	r2,52(r2)
   440c0:	10800044 	addi	r2,r2,1
   440c4:	10c1ffcc 	andi	r3,r2,2047
   440c8:	e0bffb17 	ldw	r2,-20(fp)
   440cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   440d0:	e0bffa17 	ldw	r2,-24(fp)
   440d4:	10bfffc4 	addi	r2,r2,-1
   440d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   440dc:	e0bffa17 	ldw	r2,-24(fp)
   440e0:	10000526 	beq	r2,zero,440f8 <altera_avalon_jtag_uart_irq+0x1a8>
   440e4:	e0bffb17 	ldw	r2,-20(fp)
   440e8:	10c00d17 	ldw	r3,52(r2)
   440ec:	e0bffb17 	ldw	r2,-20(fp)
   440f0:	10800c17 	ldw	r2,48(r2)
   440f4:	18bfe51e 	bne	r3,r2,4408c <__alt_data_end+0xfffd334c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   440f8:	e0bffa17 	ldw	r2,-24(fp)
   440fc:	10001026 	beq	r2,zero,44140 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44100:	e0bffb17 	ldw	r2,-20(fp)
   44104:	10c00817 	ldw	r3,32(r2)
   44108:	00bfff44 	movi	r2,-3
   4410c:	1886703a 	and	r3,r3,r2
   44110:	e0bffb17 	ldw	r2,-20(fp)
   44114:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44118:	e0bffb17 	ldw	r2,-20(fp)
   4411c:	10800017 	ldw	r2,0(r2)
   44120:	10800104 	addi	r2,r2,4
   44124:	1007883a 	mov	r3,r2
   44128:	e0bffb17 	ldw	r2,-20(fp)
   4412c:	10800817 	ldw	r2,32(r2)
   44130:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   44134:	e0bffc17 	ldw	r2,-16(fp)
   44138:	10800104 	addi	r2,r2,4
   4413c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44140:	003f8c06 	br	43f74 <__alt_data_end+0xfffd3234>
}
   44144:	e037883a 	mov	sp,fp
   44148:	df000017 	ldw	fp,0(sp)
   4414c:	dec00104 	addi	sp,sp,4
   44150:	f800283a 	ret

00044154 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44154:	defff804 	addi	sp,sp,-32
   44158:	df000715 	stw	fp,28(sp)
   4415c:	df000704 	addi	fp,sp,28
   44160:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44164:	e0bffb17 	ldw	r2,-20(fp)
   44168:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4416c:	e0bff917 	ldw	r2,-28(fp)
   44170:	10800017 	ldw	r2,0(r2)
   44174:	10800104 	addi	r2,r2,4
   44178:	10800037 	ldwio	r2,0(r2)
   4417c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44180:	e0bffa17 	ldw	r2,-24(fp)
   44184:	1081000c 	andi	r2,r2,1024
   44188:	10000b26 	beq	r2,zero,441b8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4418c:	e0bff917 	ldw	r2,-28(fp)
   44190:	10800017 	ldw	r2,0(r2)
   44194:	10800104 	addi	r2,r2,4
   44198:	1007883a 	mov	r3,r2
   4419c:	e0bff917 	ldw	r2,-28(fp)
   441a0:	10800817 	ldw	r2,32(r2)
   441a4:	10810014 	ori	r2,r2,1024
   441a8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   441ac:	e0bff917 	ldw	r2,-28(fp)
   441b0:	10000915 	stw	zero,36(r2)
   441b4:	00000a06 	br	441e0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   441b8:	e0bff917 	ldw	r2,-28(fp)
   441bc:	10c00917 	ldw	r3,36(r2)
   441c0:	00a00034 	movhi	r2,32768
   441c4:	10bfff04 	addi	r2,r2,-4
   441c8:	10c00536 	bltu	r2,r3,441e0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   441cc:	e0bff917 	ldw	r2,-28(fp)
   441d0:	10800917 	ldw	r2,36(r2)
   441d4:	10c00044 	addi	r3,r2,1
   441d8:	e0bff917 	ldw	r2,-28(fp)
   441dc:	10c00915 	stw	r3,36(r2)
   441e0:	00800174 	movhi	r2,5
   441e4:	10a3fa04 	addi	r2,r2,-28696
   441e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   441ec:	e037883a 	mov	sp,fp
   441f0:	df000017 	ldw	fp,0(sp)
   441f4:	dec00104 	addi	sp,sp,4
   441f8:	f800283a 	ret

000441fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   441fc:	defffd04 	addi	sp,sp,-12
   44200:	df000215 	stw	fp,8(sp)
   44204:	df000204 	addi	fp,sp,8
   44208:	e13ffe15 	stw	r4,-8(fp)
   4420c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44210:	00000506 	br	44228 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   44214:	e0bfff17 	ldw	r2,-4(fp)
   44218:	1090000c 	andi	r2,r2,16384
   4421c:	10000226 	beq	r2,zero,44228 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   44220:	00bffd44 	movi	r2,-11
   44224:	00000b06 	br	44254 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44228:	e0bffe17 	ldw	r2,-8(fp)
   4422c:	10c00d17 	ldw	r3,52(r2)
   44230:	e0bffe17 	ldw	r2,-8(fp)
   44234:	10800c17 	ldw	r2,48(r2)
   44238:	18800526 	beq	r3,r2,44250 <altera_avalon_jtag_uart_close+0x54>
   4423c:	e0bffe17 	ldw	r2,-8(fp)
   44240:	10c00917 	ldw	r3,36(r2)
   44244:	e0bffe17 	ldw	r2,-8(fp)
   44248:	10800117 	ldw	r2,4(r2)
   4424c:	18bff136 	bltu	r3,r2,44214 <__alt_data_end+0xfffd34d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44250:	0005883a 	mov	r2,zero
}
   44254:	e037883a 	mov	sp,fp
   44258:	df000017 	ldw	fp,0(sp)
   4425c:	dec00104 	addi	sp,sp,4
   44260:	f800283a 	ret

00044264 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   44264:	defffa04 	addi	sp,sp,-24
   44268:	df000515 	stw	fp,20(sp)
   4426c:	df000504 	addi	fp,sp,20
   44270:	e13ffd15 	stw	r4,-12(fp)
   44274:	e17ffe15 	stw	r5,-8(fp)
   44278:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4427c:	00bff9c4 	movi	r2,-25
   44280:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   44284:	e0bffe17 	ldw	r2,-8(fp)
   44288:	10da8060 	cmpeqi	r3,r2,27137
   4428c:	1800031e 	bne	r3,zero,4429c <altera_avalon_jtag_uart_ioctl+0x38>
   44290:	109a80a0 	cmpeqi	r2,r2,27138
   44294:	1000191e 	bne	r2,zero,442fc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   44298:	00002806 	br	4433c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4429c:	e0bffd17 	ldw	r2,-12(fp)
   442a0:	10c00117 	ldw	r3,4(r2)
   442a4:	00a00034 	movhi	r2,32768
   442a8:	10bfffc4 	addi	r2,r2,-1
   442ac:	18801226 	beq	r3,r2,442f8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   442b0:	e0bfff17 	ldw	r2,-4(fp)
   442b4:	10800017 	ldw	r2,0(r2)
   442b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   442bc:	e0bffc17 	ldw	r2,-16(fp)
   442c0:	10800090 	cmplti	r2,r2,2
   442c4:	1000061e 	bne	r2,zero,442e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   442c8:	e0fffc17 	ldw	r3,-16(fp)
   442cc:	00a00034 	movhi	r2,32768
   442d0:	10bfffc4 	addi	r2,r2,-1
   442d4:	18800226 	beq	r3,r2,442e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   442d8:	e0bffc17 	ldw	r2,-16(fp)
   442dc:	00000206 	br	442e8 <altera_avalon_jtag_uart_ioctl+0x84>
   442e0:	00a00034 	movhi	r2,32768
   442e4:	10bfff84 	addi	r2,r2,-2
   442e8:	e0fffd17 	ldw	r3,-12(fp)
   442ec:	18800115 	stw	r2,4(r3)
      rc = 0;
   442f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   442f4:	00001106 	br	4433c <altera_avalon_jtag_uart_ioctl+0xd8>
   442f8:	00001006 	br	4433c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   442fc:	e0bffd17 	ldw	r2,-12(fp)
   44300:	10c00117 	ldw	r3,4(r2)
   44304:	00a00034 	movhi	r2,32768
   44308:	10bfffc4 	addi	r2,r2,-1
   4430c:	18800a26 	beq	r3,r2,44338 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44310:	e0bffd17 	ldw	r2,-12(fp)
   44314:	10c00917 	ldw	r3,36(r2)
   44318:	e0bffd17 	ldw	r2,-12(fp)
   4431c:	10800117 	ldw	r2,4(r2)
   44320:	1885803a 	cmpltu	r2,r3,r2
   44324:	10c03fcc 	andi	r3,r2,255
   44328:	e0bfff17 	ldw	r2,-4(fp)
   4432c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44330:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44334:	00000006 	br	44338 <altera_avalon_jtag_uart_ioctl+0xd4>
   44338:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4433c:	e0bffb17 	ldw	r2,-20(fp)
}
   44340:	e037883a 	mov	sp,fp
   44344:	df000017 	ldw	fp,0(sp)
   44348:	dec00104 	addi	sp,sp,4
   4434c:	f800283a 	ret

00044350 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44350:	defff304 	addi	sp,sp,-52
   44354:	dfc00c15 	stw	ra,48(sp)
   44358:	df000b15 	stw	fp,44(sp)
   4435c:	df000b04 	addi	fp,sp,44
   44360:	e13ffc15 	stw	r4,-16(fp)
   44364:	e17ffd15 	stw	r5,-12(fp)
   44368:	e1bffe15 	stw	r6,-8(fp)
   4436c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44370:	e0bffd17 	ldw	r2,-12(fp)
   44374:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44378:	00004906 	br	444a0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4437c:	e0bffc17 	ldw	r2,-16(fp)
   44380:	10800a17 	ldw	r2,40(r2)
   44384:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44388:	e0bffc17 	ldw	r2,-16(fp)
   4438c:	10800b17 	ldw	r2,44(r2)
   44390:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44394:	e0fff717 	ldw	r3,-36(fp)
   44398:	e0bff817 	ldw	r2,-32(fp)
   4439c:	18800536 	bltu	r3,r2,443b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   443a0:	e0fff717 	ldw	r3,-36(fp)
   443a4:	e0bff817 	ldw	r2,-32(fp)
   443a8:	1885c83a 	sub	r2,r3,r2
   443ac:	e0bff615 	stw	r2,-40(fp)
   443b0:	00000406 	br	443c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   443b4:	00c20004 	movi	r3,2048
   443b8:	e0bff817 	ldw	r2,-32(fp)
   443bc:	1885c83a 	sub	r2,r3,r2
   443c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   443c4:	e0bff617 	ldw	r2,-40(fp)
   443c8:	1000011e 	bne	r2,zero,443d0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   443cc:	00001d06 	br	44444 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   443d0:	e0fffe17 	ldw	r3,-8(fp)
   443d4:	e0bff617 	ldw	r2,-40(fp)
   443d8:	1880022e 	bgeu	r3,r2,443e4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   443dc:	e0bffe17 	ldw	r2,-8(fp)
   443e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   443e4:	e0bff817 	ldw	r2,-32(fp)
   443e8:	10800e04 	addi	r2,r2,56
   443ec:	e0fffc17 	ldw	r3,-16(fp)
   443f0:	1885883a 	add	r2,r3,r2
   443f4:	e13ff517 	ldw	r4,-44(fp)
   443f8:	100b883a 	mov	r5,r2
   443fc:	e1bff617 	ldw	r6,-40(fp)
   44400:	00415c80 	call	415c8 <memcpy>
      ptr   += n;
   44404:	e0fff517 	ldw	r3,-44(fp)
   44408:	e0bff617 	ldw	r2,-40(fp)
   4440c:	1885883a 	add	r2,r3,r2
   44410:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   44414:	e0fffe17 	ldw	r3,-8(fp)
   44418:	e0bff617 	ldw	r2,-40(fp)
   4441c:	1885c83a 	sub	r2,r3,r2
   44420:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44424:	e0fff817 	ldw	r3,-32(fp)
   44428:	e0bff617 	ldw	r2,-40(fp)
   4442c:	1885883a 	add	r2,r3,r2
   44430:	10c1ffcc 	andi	r3,r2,2047
   44434:	e0bffc17 	ldw	r2,-16(fp)
   44438:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4443c:	e0bffe17 	ldw	r2,-8(fp)
   44440:	00bfce16 	blt	zero,r2,4437c <__alt_data_end+0xfffd363c>

    /* If we read any data then return it */
    if (ptr != buffer)
   44444:	e0fff517 	ldw	r3,-44(fp)
   44448:	e0bffd17 	ldw	r2,-12(fp)
   4444c:	18800126 	beq	r3,r2,44454 <altera_avalon_jtag_uart_read+0x104>
      break;
   44450:	00001506 	br	444a8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44454:	e0bfff17 	ldw	r2,-4(fp)
   44458:	1090000c 	andi	r2,r2,16384
   4445c:	10000126 	beq	r2,zero,44464 <altera_avalon_jtag_uart_read+0x114>
      break;
   44460:	00001106 	br	444a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44464:	0001883a 	nop
   44468:	e0bffc17 	ldw	r2,-16(fp)
   4446c:	10c00a17 	ldw	r3,40(r2)
   44470:	e0bff717 	ldw	r2,-36(fp)
   44474:	1880051e 	bne	r3,r2,4448c <altera_avalon_jtag_uart_read+0x13c>
   44478:	e0bffc17 	ldw	r2,-16(fp)
   4447c:	10c00917 	ldw	r3,36(r2)
   44480:	e0bffc17 	ldw	r2,-16(fp)
   44484:	10800117 	ldw	r2,4(r2)
   44488:	18bff736 	bltu	r3,r2,44468 <__alt_data_end+0xfffd3728>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4448c:	e0bffc17 	ldw	r2,-16(fp)
   44490:	10c00a17 	ldw	r3,40(r2)
   44494:	e0bff717 	ldw	r2,-36(fp)
   44498:	1880011e 	bne	r3,r2,444a0 <altera_avalon_jtag_uart_read+0x150>
      break;
   4449c:	00000206 	br	444a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   444a0:	e0bffe17 	ldw	r2,-8(fp)
   444a4:	00bfb516 	blt	zero,r2,4437c <__alt_data_end+0xfffd363c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   444a8:	e0fff517 	ldw	r3,-44(fp)
   444ac:	e0bffd17 	ldw	r2,-12(fp)
   444b0:	18801826 	beq	r3,r2,44514 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   444b4:	0005303a 	rdctl	r2,status
   444b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   444bc:	e0fffa17 	ldw	r3,-24(fp)
   444c0:	00bfff84 	movi	r2,-2
   444c4:	1884703a 	and	r2,r3,r2
   444c8:	1001703a 	wrctl	status,r2
  
  return context;
   444cc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   444d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   444d4:	e0bffc17 	ldw	r2,-16(fp)
   444d8:	10800817 	ldw	r2,32(r2)
   444dc:	10c00054 	ori	r3,r2,1
   444e0:	e0bffc17 	ldw	r2,-16(fp)
   444e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   444e8:	e0bffc17 	ldw	r2,-16(fp)
   444ec:	10800017 	ldw	r2,0(r2)
   444f0:	10800104 	addi	r2,r2,4
   444f4:	1007883a 	mov	r3,r2
   444f8:	e0bffc17 	ldw	r2,-16(fp)
   444fc:	10800817 	ldw	r2,32(r2)
   44500:	18800035 	stwio	r2,0(r3)
   44504:	e0bff917 	ldw	r2,-28(fp)
   44508:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4450c:	e0bffb17 	ldw	r2,-20(fp)
   44510:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44514:	e0fff517 	ldw	r3,-44(fp)
   44518:	e0bffd17 	ldw	r2,-12(fp)
   4451c:	18800426 	beq	r3,r2,44530 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   44520:	e0fff517 	ldw	r3,-44(fp)
   44524:	e0bffd17 	ldw	r2,-12(fp)
   44528:	1885c83a 	sub	r2,r3,r2
   4452c:	00000606 	br	44548 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   44530:	e0bfff17 	ldw	r2,-4(fp)
   44534:	1090000c 	andi	r2,r2,16384
   44538:	10000226 	beq	r2,zero,44544 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   4453c:	00bffd44 	movi	r2,-11
   44540:	00000106 	br	44548 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   44544:	00bffec4 	movi	r2,-5
}
   44548:	e037883a 	mov	sp,fp
   4454c:	dfc00117 	ldw	ra,4(sp)
   44550:	df000017 	ldw	fp,0(sp)
   44554:	dec00204 	addi	sp,sp,8
   44558:	f800283a 	ret

0004455c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4455c:	defff304 	addi	sp,sp,-52
   44560:	dfc00c15 	stw	ra,48(sp)
   44564:	df000b15 	stw	fp,44(sp)
   44568:	df000b04 	addi	fp,sp,44
   4456c:	e13ffc15 	stw	r4,-16(fp)
   44570:	e17ffd15 	stw	r5,-12(fp)
   44574:	e1bffe15 	stw	r6,-8(fp)
   44578:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4457c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44580:	e0bffd17 	ldw	r2,-12(fp)
   44584:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44588:	00003806 	br	4466c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4458c:	e0bffc17 	ldw	r2,-16(fp)
   44590:	10800c17 	ldw	r2,48(r2)
   44594:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44598:	e0bffc17 	ldw	r2,-16(fp)
   4459c:	10800d17 	ldw	r2,52(r2)
   445a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   445a4:	e0fff817 	ldw	r3,-32(fp)
   445a8:	e0bff517 	ldw	r2,-44(fp)
   445ac:	1880062e 	bgeu	r3,r2,445c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   445b0:	e0fff517 	ldw	r3,-44(fp)
   445b4:	e0bff817 	ldw	r2,-32(fp)
   445b8:	1885c83a 	sub	r2,r3,r2
   445bc:	10bfffc4 	addi	r2,r2,-1
   445c0:	e0bff615 	stw	r2,-40(fp)
   445c4:	00000b06 	br	445f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   445c8:	e0bff517 	ldw	r2,-44(fp)
   445cc:	10000526 	beq	r2,zero,445e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   445d0:	00c20004 	movi	r3,2048
   445d4:	e0bff817 	ldw	r2,-32(fp)
   445d8:	1885c83a 	sub	r2,r3,r2
   445dc:	e0bff615 	stw	r2,-40(fp)
   445e0:	00000406 	br	445f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   445e4:	00c1ffc4 	movi	r3,2047
   445e8:	e0bff817 	ldw	r2,-32(fp)
   445ec:	1885c83a 	sub	r2,r3,r2
   445f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   445f4:	e0bff617 	ldw	r2,-40(fp)
   445f8:	1000011e 	bne	r2,zero,44600 <altera_avalon_jtag_uart_write+0xa4>
        break;
   445fc:	00001d06 	br	44674 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   44600:	e0fffe17 	ldw	r3,-8(fp)
   44604:	e0bff617 	ldw	r2,-40(fp)
   44608:	1880022e 	bgeu	r3,r2,44614 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   4460c:	e0bffe17 	ldw	r2,-8(fp)
   44610:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44614:	e0bff817 	ldw	r2,-32(fp)
   44618:	10820e04 	addi	r2,r2,2104
   4461c:	e0fffc17 	ldw	r3,-16(fp)
   44620:	1885883a 	add	r2,r3,r2
   44624:	1009883a 	mov	r4,r2
   44628:	e17ffd17 	ldw	r5,-12(fp)
   4462c:	e1bff617 	ldw	r6,-40(fp)
   44630:	00415c80 	call	415c8 <memcpy>
      ptr   += n;
   44634:	e0fffd17 	ldw	r3,-12(fp)
   44638:	e0bff617 	ldw	r2,-40(fp)
   4463c:	1885883a 	add	r2,r3,r2
   44640:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   44644:	e0fffe17 	ldw	r3,-8(fp)
   44648:	e0bff617 	ldw	r2,-40(fp)
   4464c:	1885c83a 	sub	r2,r3,r2
   44650:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44654:	e0fff817 	ldw	r3,-32(fp)
   44658:	e0bff617 	ldw	r2,-40(fp)
   4465c:	1885883a 	add	r2,r3,r2
   44660:	10c1ffcc 	andi	r3,r2,2047
   44664:	e0bffc17 	ldw	r2,-16(fp)
   44668:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4466c:	e0bffe17 	ldw	r2,-8(fp)
   44670:	00bfc616 	blt	zero,r2,4458c <__alt_data_end+0xfffd384c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44674:	0005303a 	rdctl	r2,status
   44678:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4467c:	e0fffa17 	ldw	r3,-24(fp)
   44680:	00bfff84 	movi	r2,-2
   44684:	1884703a 	and	r2,r3,r2
   44688:	1001703a 	wrctl	status,r2
  
  return context;
   4468c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44690:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44694:	e0bffc17 	ldw	r2,-16(fp)
   44698:	10800817 	ldw	r2,32(r2)
   4469c:	10c00094 	ori	r3,r2,2
   446a0:	e0bffc17 	ldw	r2,-16(fp)
   446a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   446a8:	e0bffc17 	ldw	r2,-16(fp)
   446ac:	10800017 	ldw	r2,0(r2)
   446b0:	10800104 	addi	r2,r2,4
   446b4:	1007883a 	mov	r3,r2
   446b8:	e0bffc17 	ldw	r2,-16(fp)
   446bc:	10800817 	ldw	r2,32(r2)
   446c0:	18800035 	stwio	r2,0(r3)
   446c4:	e0bff917 	ldw	r2,-28(fp)
   446c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   446cc:	e0bffb17 	ldw	r2,-20(fp)
   446d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   446d4:	e0bffe17 	ldw	r2,-8(fp)
   446d8:	0080120e 	bge	zero,r2,44724 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   446dc:	e0bfff17 	ldw	r2,-4(fp)
   446e0:	1090000c 	andi	r2,r2,16384
   446e4:	10000126 	beq	r2,zero,446ec <altera_avalon_jtag_uart_write+0x190>
        break;
   446e8:	00001006 	br	4472c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   446ec:	0001883a 	nop
   446f0:	e0bffc17 	ldw	r2,-16(fp)
   446f4:	10c00d17 	ldw	r3,52(r2)
   446f8:	e0bff517 	ldw	r2,-44(fp)
   446fc:	1880051e 	bne	r3,r2,44714 <altera_avalon_jtag_uart_write+0x1b8>
   44700:	e0bffc17 	ldw	r2,-16(fp)
   44704:	10c00917 	ldw	r3,36(r2)
   44708:	e0bffc17 	ldw	r2,-16(fp)
   4470c:	10800117 	ldw	r2,4(r2)
   44710:	18bff736 	bltu	r3,r2,446f0 <__alt_data_end+0xfffd39b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44714:	e0bffc17 	ldw	r2,-16(fp)
   44718:	10800917 	ldw	r2,36(r2)
   4471c:	10000126 	beq	r2,zero,44724 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   44720:	00000206 	br	4472c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   44724:	e0bffe17 	ldw	r2,-8(fp)
   44728:	00bf9716 	blt	zero,r2,44588 <__alt_data_end+0xfffd3848>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4472c:	e0fffd17 	ldw	r3,-12(fp)
   44730:	e0bff717 	ldw	r2,-36(fp)
   44734:	18800426 	beq	r3,r2,44748 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   44738:	e0fffd17 	ldw	r3,-12(fp)
   4473c:	e0bff717 	ldw	r2,-36(fp)
   44740:	1885c83a 	sub	r2,r3,r2
   44744:	00000606 	br	44760 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   44748:	e0bfff17 	ldw	r2,-4(fp)
   4474c:	1090000c 	andi	r2,r2,16384
   44750:	10000226 	beq	r2,zero,4475c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   44754:	00bffd44 	movi	r2,-11
   44758:	00000106 	br	44760 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4475c:	00bffec4 	movi	r2,-5
}
   44760:	e037883a 	mov	sp,fp
   44764:	dfc00117 	ldw	ra,4(sp)
   44768:	df000017 	ldw	fp,0(sp)
   4476c:	dec00204 	addi	sp,sp,8
   44770:	f800283a 	ret

00044774 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44774:	defff504 	addi	sp,sp,-44
   44778:	df000a15 	stw	fp,40(sp)
   4477c:	df000a04 	addi	fp,sp,40
   44780:	e13ffc15 	stw	r4,-16(fp)
   44784:	e17ffd15 	stw	r5,-12(fp)
   44788:	e1bffe15 	stw	r6,-8(fp)
   4478c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44790:	e03ff615 	stw	zero,-40(fp)
   44794:	00800174 	movhi	r2,5
   44798:	10a3fa04 	addi	r2,r2,-28696
   4479c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   447a0:	10003f26 	beq	r2,zero,448a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   447a4:	e0bffc17 	ldw	r2,-16(fp)
   447a8:	10003b26 	beq	r2,zero,44898 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   447ac:	e0bffc17 	ldw	r2,-16(fp)
   447b0:	e0fffe17 	ldw	r3,-8(fp)
   447b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   447b8:	e0bffc17 	ldw	r2,-16(fp)
   447bc:	e0ffff17 	ldw	r3,-4(fp)
   447c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   447c4:	0005303a 	rdctl	r2,status
   447c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   447cc:	e0fff817 	ldw	r3,-32(fp)
   447d0:	00bfff84 	movi	r2,-2
   447d4:	1884703a 	and	r2,r3,r2
   447d8:	1001703a 	wrctl	status,r2
  
  return context;
   447dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   447e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   447e4:	00800174 	movhi	r2,5
   447e8:	10a3fb04 	addi	r2,r2,-28692
   447ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   447f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   447f4:	e0fffd17 	ldw	r3,-12(fp)
   447f8:	e0bff617 	ldw	r2,-40(fp)
   447fc:	1885883a 	add	r2,r3,r2
   44800:	10c00044 	addi	r3,r2,1
   44804:	e0bffc17 	ldw	r2,-16(fp)
   44808:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4480c:	e0bffc17 	ldw	r2,-16(fp)
   44810:	10c00217 	ldw	r3,8(r2)
   44814:	e0bff617 	ldw	r2,-40(fp)
   44818:	1880042e 	bgeu	r3,r2,4482c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   4481c:	e0bffc17 	ldw	r2,-16(fp)
   44820:	00c00044 	movi	r3,1
   44824:	10c00405 	stb	r3,16(r2)
   44828:	00000206 	br	44834 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   4482c:	e0bffc17 	ldw	r2,-16(fp)
   44830:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   44834:	e0fffc17 	ldw	r3,-16(fp)
   44838:	00800134 	movhi	r2,4
   4483c:	109d5504 	addi	r2,r2,30036
   44840:	e0bff915 	stw	r2,-28(fp)
   44844:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44848:	e0bffa17 	ldw	r2,-24(fp)
   4484c:	e0fff917 	ldw	r3,-28(fp)
   44850:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44854:	e0bff917 	ldw	r2,-28(fp)
   44858:	10c00017 	ldw	r3,0(r2)
   4485c:	e0bffa17 	ldw	r2,-24(fp)
   44860:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44864:	e0bff917 	ldw	r2,-28(fp)
   44868:	10800017 	ldw	r2,0(r2)
   4486c:	e0fffa17 	ldw	r3,-24(fp)
   44870:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44874:	e0bff917 	ldw	r2,-28(fp)
   44878:	e0fffa17 	ldw	r3,-24(fp)
   4487c:	10c00015 	stw	r3,0(r2)
   44880:	e0bff717 	ldw	r2,-36(fp)
   44884:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44888:	e0bffb17 	ldw	r2,-20(fp)
   4488c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44890:	0005883a 	mov	r2,zero
   44894:	00000306 	br	448a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   44898:	00bffa84 	movi	r2,-22
   4489c:	00000106 	br	448a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   448a0:	00bfde84 	movi	r2,-134
  }
}
   448a4:	e037883a 	mov	sp,fp
   448a8:	df000017 	ldw	fp,0(sp)
   448ac:	dec00104 	addi	sp,sp,4
   448b0:	f800283a 	ret

000448b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   448b4:	defffa04 	addi	sp,sp,-24
   448b8:	dfc00515 	stw	ra,20(sp)
   448bc:	df000415 	stw	fp,16(sp)
   448c0:	df000404 	addi	fp,sp,16
   448c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   448c8:	00800244 	movi	r2,9
   448cc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   448d0:	e13ffd17 	ldw	r4,-12(fp)
   448d4:	014003f4 	movhi	r5,15
   448d8:	29509004 	addi	r5,r5,16960
   448dc:	00407080 	call	40708 <__mulsi3>
   448e0:	0100bef4 	movhi	r4,763
   448e4:	213c2004 	addi	r4,r4,-3968
   448e8:	100b883a 	mov	r5,r2
   448ec:	00406f80 	call	406f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   448f0:	01200034 	movhi	r4,32768
   448f4:	213fffc4 	addi	r4,r4,-1
   448f8:	100b883a 	mov	r5,r2
   448fc:	00406f80 	call	406f8 <__udivsi3>
   44900:	e13fff17 	ldw	r4,-4(fp)
   44904:	100b883a 	mov	r5,r2
   44908:	00406f80 	call	406f8 <__udivsi3>
   4490c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   44910:	e0bffe17 	ldw	r2,-8(fp)
   44914:	10002a26 	beq	r2,zero,449c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   44918:	e03ffc15 	stw	zero,-16(fp)
   4491c:	00001706 	br	4497c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   44920:	00a00034 	movhi	r2,32768
   44924:	10bfffc4 	addi	r2,r2,-1
   44928:	10bfffc4 	addi	r2,r2,-1
   4492c:	103ffe1e 	bne	r2,zero,44928 <__alt_data_end+0xfffd3be8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   44930:	e13ffd17 	ldw	r4,-12(fp)
   44934:	014003f4 	movhi	r5,15
   44938:	29509004 	addi	r5,r5,16960
   4493c:	00407080 	call	40708 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   44940:	0100bef4 	movhi	r4,763
   44944:	213c2004 	addi	r4,r4,-3968
   44948:	100b883a 	mov	r5,r2
   4494c:	00406f80 	call	406f8 <__udivsi3>
   44950:	01200034 	movhi	r4,32768
   44954:	213fffc4 	addi	r4,r4,-1
   44958:	100b883a 	mov	r5,r2
   4495c:	00406f80 	call	406f8 <__udivsi3>
   44960:	1007883a 	mov	r3,r2
   44964:	e0bfff17 	ldw	r2,-4(fp)
   44968:	10c5c83a 	sub	r2,r2,r3
   4496c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   44970:	e0bffc17 	ldw	r2,-16(fp)
   44974:	10800044 	addi	r2,r2,1
   44978:	e0bffc15 	stw	r2,-16(fp)
   4497c:	e0fffc17 	ldw	r3,-16(fp)
   44980:	e0bffe17 	ldw	r2,-8(fp)
   44984:	18bfe616 	blt	r3,r2,44920 <__alt_data_end+0xfffd3be0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   44988:	e13ffd17 	ldw	r4,-12(fp)
   4498c:	014003f4 	movhi	r5,15
   44990:	29509004 	addi	r5,r5,16960
   44994:	00407080 	call	40708 <__mulsi3>
   44998:	0100bef4 	movhi	r4,763
   4499c:	213c2004 	addi	r4,r4,-3968
   449a0:	100b883a 	mov	r5,r2
   449a4:	00406f80 	call	406f8 <__udivsi3>
   449a8:	1009883a 	mov	r4,r2
   449ac:	e17fff17 	ldw	r5,-4(fp)
   449b0:	00407080 	call	40708 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   449b4:	10bfffc4 	addi	r2,r2,-1
   449b8:	103ffe1e 	bne	r2,zero,449b4 <__alt_data_end+0xfffd3c74>
   449bc:	00000d06 	br	449f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   449c0:	e13ffd17 	ldw	r4,-12(fp)
   449c4:	014003f4 	movhi	r5,15
   449c8:	29509004 	addi	r5,r5,16960
   449cc:	00407080 	call	40708 <__mulsi3>
   449d0:	0100bef4 	movhi	r4,763
   449d4:	213c2004 	addi	r4,r4,-3968
   449d8:	100b883a 	mov	r5,r2
   449dc:	00406f80 	call	406f8 <__udivsi3>
   449e0:	1009883a 	mov	r4,r2
   449e4:	e17fff17 	ldw	r5,-4(fp)
   449e8:	00407080 	call	40708 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   449ec:	10bfffc4 	addi	r2,r2,-1
   449f0:	00bffe16 	blt	zero,r2,449ec <__alt_data_end+0xfffd3cac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   449f4:	0005883a 	mov	r2,zero
}
   449f8:	e037883a 	mov	sp,fp
   449fc:	dfc00117 	ldw	ra,4(sp)
   44a00:	df000017 	ldw	fp,0(sp)
   44a04:	dec00204 	addi	sp,sp,8
   44a08:	f800283a 	ret

00044a0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44a0c:	deffff04 	addi	sp,sp,-4
   44a10:	df000015 	stw	fp,0(sp)
   44a14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44a18:	e037883a 	mov	sp,fp
   44a1c:	df000017 	ldw	fp,0(sp)
   44a20:	dec00104 	addi	sp,sp,4
   44a24:	f800283a 	ret

00044a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44a28:	defffe04 	addi	sp,sp,-8
   44a2c:	dfc00115 	stw	ra,4(sp)
   44a30:	df000015 	stw	fp,0(sp)
   44a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44a38:	00800134 	movhi	r2,4
   44a3c:	109d5204 	addi	r2,r2,30024
   44a40:	10800017 	ldw	r2,0(r2)
   44a44:	10000526 	beq	r2,zero,44a5c <alt_get_errno+0x34>
   44a48:	00800134 	movhi	r2,4
   44a4c:	109d5204 	addi	r2,r2,30024
   44a50:	10800017 	ldw	r2,0(r2)
   44a54:	103ee83a 	callr	r2
   44a58:	00000206 	br	44a64 <alt_get_errno+0x3c>
   44a5c:	00800174 	movhi	r2,5
   44a60:	10a3f504 	addi	r2,r2,-28716
}
   44a64:	e037883a 	mov	sp,fp
   44a68:	dfc00117 	ldw	ra,4(sp)
   44a6c:	df000017 	ldw	fp,0(sp)
   44a70:	dec00204 	addi	sp,sp,8
   44a74:	f800283a 	ret

00044a78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44a78:	defffa04 	addi	sp,sp,-24
   44a7c:	dfc00515 	stw	ra,20(sp)
   44a80:	df000415 	stw	fp,16(sp)
   44a84:	df000404 	addi	fp,sp,16
   44a88:	e13ffe15 	stw	r4,-8(fp)
   44a8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44a90:	e0bffe17 	ldw	r2,-8(fp)
   44a94:	10000326 	beq	r2,zero,44aa4 <alt_dev_llist_insert+0x2c>
   44a98:	e0bffe17 	ldw	r2,-8(fp)
   44a9c:	10800217 	ldw	r2,8(r2)
   44aa0:	1000061e 	bne	r2,zero,44abc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44aa4:	0044a280 	call	44a28 <alt_get_errno>
   44aa8:	1007883a 	mov	r3,r2
   44aac:	00800584 	movi	r2,22
   44ab0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44ab4:	00bffa84 	movi	r2,-22
   44ab8:	00001306 	br	44b08 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44abc:	e0bffe17 	ldw	r2,-8(fp)
   44ac0:	e0ffff17 	ldw	r3,-4(fp)
   44ac4:	e0fffc15 	stw	r3,-16(fp)
   44ac8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44acc:	e0bffd17 	ldw	r2,-12(fp)
   44ad0:	e0fffc17 	ldw	r3,-16(fp)
   44ad4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44ad8:	e0bffc17 	ldw	r2,-16(fp)
   44adc:	10c00017 	ldw	r3,0(r2)
   44ae0:	e0bffd17 	ldw	r2,-12(fp)
   44ae4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44ae8:	e0bffc17 	ldw	r2,-16(fp)
   44aec:	10800017 	ldw	r2,0(r2)
   44af0:	e0fffd17 	ldw	r3,-12(fp)
   44af4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44af8:	e0bffc17 	ldw	r2,-16(fp)
   44afc:	e0fffd17 	ldw	r3,-12(fp)
   44b00:	10c00015 	stw	r3,0(r2)

  return 0;  
   44b04:	0005883a 	mov	r2,zero
}
   44b08:	e037883a 	mov	sp,fp
   44b0c:	dfc00117 	ldw	ra,4(sp)
   44b10:	df000017 	ldw	fp,0(sp)
   44b14:	dec00204 	addi	sp,sp,8
   44b18:	f800283a 	ret

00044b1c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44b1c:	defffd04 	addi	sp,sp,-12
   44b20:	dfc00215 	stw	ra,8(sp)
   44b24:	df000115 	stw	fp,4(sp)
   44b28:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44b2c:	00800134 	movhi	r2,4
   44b30:	1096a404 	addi	r2,r2,23184
   44b34:	e0bfff15 	stw	r2,-4(fp)
   44b38:	00000606 	br	44b54 <_do_ctors+0x38>
        (*ctor) (); 
   44b3c:	e0bfff17 	ldw	r2,-4(fp)
   44b40:	10800017 	ldw	r2,0(r2)
   44b44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44b48:	e0bfff17 	ldw	r2,-4(fp)
   44b4c:	10bfff04 	addi	r2,r2,-4
   44b50:	e0bfff15 	stw	r2,-4(fp)
   44b54:	e0ffff17 	ldw	r3,-4(fp)
   44b58:	00800134 	movhi	r2,4
   44b5c:	1096a504 	addi	r2,r2,23188
   44b60:	18bff62e 	bgeu	r3,r2,44b3c <__alt_data_end+0xfffd3dfc>
        (*ctor) (); 
}
   44b64:	e037883a 	mov	sp,fp
   44b68:	dfc00117 	ldw	ra,4(sp)
   44b6c:	df000017 	ldw	fp,0(sp)
   44b70:	dec00204 	addi	sp,sp,8
   44b74:	f800283a 	ret

00044b78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44b78:	defffd04 	addi	sp,sp,-12
   44b7c:	dfc00215 	stw	ra,8(sp)
   44b80:	df000115 	stw	fp,4(sp)
   44b84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44b88:	00800134 	movhi	r2,4
   44b8c:	1096a404 	addi	r2,r2,23184
   44b90:	e0bfff15 	stw	r2,-4(fp)
   44b94:	00000606 	br	44bb0 <_do_dtors+0x38>
        (*dtor) (); 
   44b98:	e0bfff17 	ldw	r2,-4(fp)
   44b9c:	10800017 	ldw	r2,0(r2)
   44ba0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44ba4:	e0bfff17 	ldw	r2,-4(fp)
   44ba8:	10bfff04 	addi	r2,r2,-4
   44bac:	e0bfff15 	stw	r2,-4(fp)
   44bb0:	e0ffff17 	ldw	r3,-4(fp)
   44bb4:	00800134 	movhi	r2,4
   44bb8:	1096a504 	addi	r2,r2,23188
   44bbc:	18bff62e 	bgeu	r3,r2,44b98 <__alt_data_end+0xfffd3e58>
        (*dtor) (); 
}
   44bc0:	e037883a 	mov	sp,fp
   44bc4:	dfc00117 	ldw	ra,4(sp)
   44bc8:	df000017 	ldw	fp,0(sp)
   44bcc:	dec00204 	addi	sp,sp,8
   44bd0:	f800283a 	ret

00044bd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44bd4:	deffff04 	addi	sp,sp,-4
   44bd8:	df000015 	stw	fp,0(sp)
   44bdc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44be0:	e037883a 	mov	sp,fp
   44be4:	df000017 	ldw	fp,0(sp)
   44be8:	dec00104 	addi	sp,sp,4
   44bec:	f800283a 	ret

00044bf0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44bf0:	defff904 	addi	sp,sp,-28
   44bf4:	dfc00615 	stw	ra,24(sp)
   44bf8:	df000515 	stw	fp,20(sp)
   44bfc:	df000504 	addi	fp,sp,20
   44c00:	e13ffc15 	stw	r4,-16(fp)
   44c04:	e17ffd15 	stw	r5,-12(fp)
   44c08:	e1bffe15 	stw	r6,-8(fp)
   44c0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44c10:	e0800217 	ldw	r2,8(fp)
   44c14:	d8800015 	stw	r2,0(sp)
   44c18:	e13ffc17 	ldw	r4,-16(fp)
   44c1c:	e17ffd17 	ldw	r5,-12(fp)
   44c20:	e1bffe17 	ldw	r6,-8(fp)
   44c24:	e1ffff17 	ldw	r7,-4(fp)
   44c28:	0044dd00 	call	44dd0 <alt_iic_isr_register>
}  
   44c2c:	e037883a 	mov	sp,fp
   44c30:	dfc00117 	ldw	ra,4(sp)
   44c34:	df000017 	ldw	fp,0(sp)
   44c38:	dec00204 	addi	sp,sp,8
   44c3c:	f800283a 	ret

00044c40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44c40:	defff904 	addi	sp,sp,-28
   44c44:	df000615 	stw	fp,24(sp)
   44c48:	df000604 	addi	fp,sp,24
   44c4c:	e13ffe15 	stw	r4,-8(fp)
   44c50:	e17fff15 	stw	r5,-4(fp)
   44c54:	e0bfff17 	ldw	r2,-4(fp)
   44c58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44c5c:	0005303a 	rdctl	r2,status
   44c60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44c64:	e0fffb17 	ldw	r3,-20(fp)
   44c68:	00bfff84 	movi	r2,-2
   44c6c:	1884703a 	and	r2,r3,r2
   44c70:	1001703a 	wrctl	status,r2
  
  return context;
   44c74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44c78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   44c7c:	e0bffa17 	ldw	r2,-24(fp)
   44c80:	00c00044 	movi	r3,1
   44c84:	1884983a 	sll	r2,r3,r2
   44c88:	1007883a 	mov	r3,r2
   44c8c:	00800174 	movhi	r2,5
   44c90:	10a3f904 	addi	r2,r2,-28700
   44c94:	10800017 	ldw	r2,0(r2)
   44c98:	1886b03a 	or	r3,r3,r2
   44c9c:	00800174 	movhi	r2,5
   44ca0:	10a3f904 	addi	r2,r2,-28700
   44ca4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44ca8:	00800174 	movhi	r2,5
   44cac:	10a3f904 	addi	r2,r2,-28700
   44cb0:	10800017 	ldw	r2,0(r2)
   44cb4:	100170fa 	wrctl	ienable,r2
   44cb8:	e0bffc17 	ldw	r2,-16(fp)
   44cbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44cc0:	e0bffd17 	ldw	r2,-12(fp)
   44cc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44cc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44ccc:	0001883a 	nop
}
   44cd0:	e037883a 	mov	sp,fp
   44cd4:	df000017 	ldw	fp,0(sp)
   44cd8:	dec00104 	addi	sp,sp,4
   44cdc:	f800283a 	ret

00044ce0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44ce0:	defff904 	addi	sp,sp,-28
   44ce4:	df000615 	stw	fp,24(sp)
   44ce8:	df000604 	addi	fp,sp,24
   44cec:	e13ffe15 	stw	r4,-8(fp)
   44cf0:	e17fff15 	stw	r5,-4(fp)
   44cf4:	e0bfff17 	ldw	r2,-4(fp)
   44cf8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44cfc:	0005303a 	rdctl	r2,status
   44d00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44d04:	e0fffb17 	ldw	r3,-20(fp)
   44d08:	00bfff84 	movi	r2,-2
   44d0c:	1884703a 	and	r2,r3,r2
   44d10:	1001703a 	wrctl	status,r2
  
  return context;
   44d14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44d18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   44d1c:	e0bffa17 	ldw	r2,-24(fp)
   44d20:	00c00044 	movi	r3,1
   44d24:	1884983a 	sll	r2,r3,r2
   44d28:	0084303a 	nor	r2,zero,r2
   44d2c:	1007883a 	mov	r3,r2
   44d30:	00800174 	movhi	r2,5
   44d34:	10a3f904 	addi	r2,r2,-28700
   44d38:	10800017 	ldw	r2,0(r2)
   44d3c:	1886703a 	and	r3,r3,r2
   44d40:	00800174 	movhi	r2,5
   44d44:	10a3f904 	addi	r2,r2,-28700
   44d48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44d4c:	00800174 	movhi	r2,5
   44d50:	10a3f904 	addi	r2,r2,-28700
   44d54:	10800017 	ldw	r2,0(r2)
   44d58:	100170fa 	wrctl	ienable,r2
   44d5c:	e0bffc17 	ldw	r2,-16(fp)
   44d60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d64:	e0bffd17 	ldw	r2,-12(fp)
   44d68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44d6c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   44d70:	0001883a 	nop
}
   44d74:	e037883a 	mov	sp,fp
   44d78:	df000017 	ldw	fp,0(sp)
   44d7c:	dec00104 	addi	sp,sp,4
   44d80:	f800283a 	ret

00044d84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   44d84:	defffc04 	addi	sp,sp,-16
   44d88:	df000315 	stw	fp,12(sp)
   44d8c:	df000304 	addi	fp,sp,12
   44d90:	e13ffe15 	stw	r4,-8(fp)
   44d94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   44d98:	000530fa 	rdctl	r2,ienable
   44d9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44da0:	e0bfff17 	ldw	r2,-4(fp)
   44da4:	00c00044 	movi	r3,1
   44da8:	1884983a 	sll	r2,r3,r2
   44dac:	1007883a 	mov	r3,r2
   44db0:	e0bffd17 	ldw	r2,-12(fp)
   44db4:	1884703a 	and	r2,r3,r2
   44db8:	1004c03a 	cmpne	r2,r2,zero
   44dbc:	10803fcc 	andi	r2,r2,255
}
   44dc0:	e037883a 	mov	sp,fp
   44dc4:	df000017 	ldw	fp,0(sp)
   44dc8:	dec00104 	addi	sp,sp,4
   44dcc:	f800283a 	ret

00044dd0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44dd0:	defff504 	addi	sp,sp,-44
   44dd4:	dfc00a15 	stw	ra,40(sp)
   44dd8:	df000915 	stw	fp,36(sp)
   44ddc:	df000904 	addi	fp,sp,36
   44de0:	e13ffc15 	stw	r4,-16(fp)
   44de4:	e17ffd15 	stw	r5,-12(fp)
   44de8:	e1bffe15 	stw	r6,-8(fp)
   44dec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44df0:	00bffa84 	movi	r2,-22
   44df4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44df8:	e0bffd17 	ldw	r2,-12(fp)
   44dfc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44e00:	e0bff817 	ldw	r2,-32(fp)
   44e04:	10800808 	cmpgei	r2,r2,32
   44e08:	1000271e 	bne	r2,zero,44ea8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44e0c:	0005303a 	rdctl	r2,status
   44e10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e14:	e0fffa17 	ldw	r3,-24(fp)
   44e18:	00bfff84 	movi	r2,-2
   44e1c:	1884703a 	and	r2,r3,r2
   44e20:	1001703a 	wrctl	status,r2
  
  return context;
   44e24:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44e28:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   44e2c:	00800174 	movhi	r2,5
   44e30:	10a40604 	addi	r2,r2,-28648
   44e34:	e0fff817 	ldw	r3,-32(fp)
   44e38:	180690fa 	slli	r3,r3,3
   44e3c:	10c5883a 	add	r2,r2,r3
   44e40:	e0fffe17 	ldw	r3,-8(fp)
   44e44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   44e48:	00800174 	movhi	r2,5
   44e4c:	10a40604 	addi	r2,r2,-28648
   44e50:	e0fff817 	ldw	r3,-32(fp)
   44e54:	180690fa 	slli	r3,r3,3
   44e58:	10c5883a 	add	r2,r2,r3
   44e5c:	10800104 	addi	r2,r2,4
   44e60:	e0ffff17 	ldw	r3,-4(fp)
   44e64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44e68:	e0bffe17 	ldw	r2,-8(fp)
   44e6c:	10000526 	beq	r2,zero,44e84 <alt_iic_isr_register+0xb4>
   44e70:	e0bff817 	ldw	r2,-32(fp)
   44e74:	e13ffc17 	ldw	r4,-16(fp)
   44e78:	100b883a 	mov	r5,r2
   44e7c:	0044c400 	call	44c40 <alt_ic_irq_enable>
   44e80:	00000406 	br	44e94 <alt_iic_isr_register+0xc4>
   44e84:	e0bff817 	ldw	r2,-32(fp)
   44e88:	e13ffc17 	ldw	r4,-16(fp)
   44e8c:	100b883a 	mov	r5,r2
   44e90:	0044ce00 	call	44ce0 <alt_ic_irq_disable>
   44e94:	e0bff715 	stw	r2,-36(fp)
   44e98:	e0bff917 	ldw	r2,-28(fp)
   44e9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44ea0:	e0bffb17 	ldw	r2,-20(fp)
   44ea4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44ea8:	e0bff717 	ldw	r2,-36(fp)
}
   44eac:	e037883a 	mov	sp,fp
   44eb0:	dfc00117 	ldw	ra,4(sp)
   44eb4:	df000017 	ldw	fp,0(sp)
   44eb8:	dec00204 	addi	sp,sp,8
   44ebc:	f800283a 	ret

00044ec0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44ec0:	defff804 	addi	sp,sp,-32
   44ec4:	dfc00715 	stw	ra,28(sp)
   44ec8:	df000615 	stw	fp,24(sp)
   44ecc:	dc000515 	stw	r16,20(sp)
   44ed0:	df000604 	addi	fp,sp,24
   44ed4:	e13ffb15 	stw	r4,-20(fp)
   44ed8:	e17ffc15 	stw	r5,-16(fp)
   44edc:	e1bffd15 	stw	r6,-12(fp)
   44ee0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   44ee4:	e13ffc17 	ldw	r4,-16(fp)
   44ee8:	e17ffd17 	ldw	r5,-12(fp)
   44eec:	e1bffe17 	ldw	r6,-8(fp)
   44ef0:	004515c0 	call	4515c <open>
   44ef4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   44ef8:	e0bffa17 	ldw	r2,-24(fp)
   44efc:	10002216 	blt	r2,zero,44f88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   44f00:	04000134 	movhi	r16,4
   44f04:	8418d104 	addi	r16,r16,25412
   44f08:	e0bffa17 	ldw	r2,-24(fp)
   44f0c:	1009883a 	mov	r4,r2
   44f10:	01400304 	movi	r5,12
   44f14:	00407080 	call	40708 <__mulsi3>
   44f18:	8085883a 	add	r2,r16,r2
   44f1c:	10c00017 	ldw	r3,0(r2)
   44f20:	e0bffb17 	ldw	r2,-20(fp)
   44f24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44f28:	04000134 	movhi	r16,4
   44f2c:	8418d104 	addi	r16,r16,25412
   44f30:	e0bffa17 	ldw	r2,-24(fp)
   44f34:	1009883a 	mov	r4,r2
   44f38:	01400304 	movi	r5,12
   44f3c:	00407080 	call	40708 <__mulsi3>
   44f40:	8085883a 	add	r2,r16,r2
   44f44:	10800104 	addi	r2,r2,4
   44f48:	10c00017 	ldw	r3,0(r2)
   44f4c:	e0bffb17 	ldw	r2,-20(fp)
   44f50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44f54:	04000134 	movhi	r16,4
   44f58:	8418d104 	addi	r16,r16,25412
   44f5c:	e0bffa17 	ldw	r2,-24(fp)
   44f60:	1009883a 	mov	r4,r2
   44f64:	01400304 	movi	r5,12
   44f68:	00407080 	call	40708 <__mulsi3>
   44f6c:	8085883a 	add	r2,r16,r2
   44f70:	10800204 	addi	r2,r2,8
   44f74:	10c00017 	ldw	r3,0(r2)
   44f78:	e0bffb17 	ldw	r2,-20(fp)
   44f7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44f80:	e13ffa17 	ldw	r4,-24(fp)
   44f84:	00439c40 	call	439c4 <alt_release_fd>
  }
} 
   44f88:	e6ffff04 	addi	sp,fp,-4
   44f8c:	dfc00217 	ldw	ra,8(sp)
   44f90:	df000117 	ldw	fp,4(sp)
   44f94:	dc000017 	ldw	r16,0(sp)
   44f98:	dec00304 	addi	sp,sp,12
   44f9c:	f800283a 	ret

00044fa0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44fa0:	defffb04 	addi	sp,sp,-20
   44fa4:	dfc00415 	stw	ra,16(sp)
   44fa8:	df000315 	stw	fp,12(sp)
   44fac:	df000304 	addi	fp,sp,12
   44fb0:	e13ffd15 	stw	r4,-12(fp)
   44fb4:	e17ffe15 	stw	r5,-8(fp)
   44fb8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44fbc:	01000134 	movhi	r4,4
   44fc0:	2118d404 	addi	r4,r4,25424
   44fc4:	e17ffd17 	ldw	r5,-12(fp)
   44fc8:	01800044 	movi	r6,1
   44fcc:	01c07fc4 	movi	r7,511
   44fd0:	0044ec00 	call	44ec0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44fd4:	01000134 	movhi	r4,4
   44fd8:	2118d104 	addi	r4,r4,25412
   44fdc:	e17ffe17 	ldw	r5,-8(fp)
   44fe0:	000d883a 	mov	r6,zero
   44fe4:	01c07fc4 	movi	r7,511
   44fe8:	0044ec00 	call	44ec0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44fec:	01000134 	movhi	r4,4
   44ff0:	2118d704 	addi	r4,r4,25436
   44ff4:	e17fff17 	ldw	r5,-4(fp)
   44ff8:	01800044 	movi	r6,1
   44ffc:	01c07fc4 	movi	r7,511
   45000:	0044ec00 	call	44ec0 <alt_open_fd>
}  
   45004:	e037883a 	mov	sp,fp
   45008:	dfc00117 	ldw	ra,4(sp)
   4500c:	df000017 	ldw	fp,0(sp)
   45010:	dec00204 	addi	sp,sp,8
   45014:	f800283a 	ret

00045018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45018:	defffe04 	addi	sp,sp,-8
   4501c:	dfc00115 	stw	ra,4(sp)
   45020:	df000015 	stw	fp,0(sp)
   45024:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45028:	00800134 	movhi	r2,4
   4502c:	109d5204 	addi	r2,r2,30024
   45030:	10800017 	ldw	r2,0(r2)
   45034:	10000526 	beq	r2,zero,4504c <alt_get_errno+0x34>
   45038:	00800134 	movhi	r2,4
   4503c:	109d5204 	addi	r2,r2,30024
   45040:	10800017 	ldw	r2,0(r2)
   45044:	103ee83a 	callr	r2
   45048:	00000206 	br	45054 <alt_get_errno+0x3c>
   4504c:	00800174 	movhi	r2,5
   45050:	10a3f504 	addi	r2,r2,-28716
}
   45054:	e037883a 	mov	sp,fp
   45058:	dfc00117 	ldw	ra,4(sp)
   4505c:	df000017 	ldw	fp,0(sp)
   45060:	dec00204 	addi	sp,sp,8
   45064:	f800283a 	ret

00045068 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45068:	defffb04 	addi	sp,sp,-20
   4506c:	dfc00415 	stw	ra,16(sp)
   45070:	df000315 	stw	fp,12(sp)
   45074:	dc000215 	stw	r16,8(sp)
   45078:	df000304 	addi	fp,sp,12
   4507c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45080:	e0bffe17 	ldw	r2,-8(fp)
   45084:	10800217 	ldw	r2,8(r2)
   45088:	10d00034 	orhi	r3,r2,16384
   4508c:	e0bffe17 	ldw	r2,-8(fp)
   45090:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45094:	e03ffd15 	stw	zero,-12(fp)
   45098:	00002306 	br	45128 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4509c:	04000134 	movhi	r16,4
   450a0:	8418d104 	addi	r16,r16,25412
   450a4:	e0bffd17 	ldw	r2,-12(fp)
   450a8:	1009883a 	mov	r4,r2
   450ac:	01400304 	movi	r5,12
   450b0:	00407080 	call	40708 <__mulsi3>
   450b4:	8085883a 	add	r2,r16,r2
   450b8:	10c00017 	ldw	r3,0(r2)
   450bc:	e0bffe17 	ldw	r2,-8(fp)
   450c0:	10800017 	ldw	r2,0(r2)
   450c4:	1880151e 	bne	r3,r2,4511c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   450c8:	04000134 	movhi	r16,4
   450cc:	8418d104 	addi	r16,r16,25412
   450d0:	e0bffd17 	ldw	r2,-12(fp)
   450d4:	1009883a 	mov	r4,r2
   450d8:	01400304 	movi	r5,12
   450dc:	00407080 	call	40708 <__mulsi3>
   450e0:	8085883a 	add	r2,r16,r2
   450e4:	10800204 	addi	r2,r2,8
   450e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   450ec:	10000b0e 	bge	r2,zero,4511c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   450f0:	e13ffd17 	ldw	r4,-12(fp)
   450f4:	01400304 	movi	r5,12
   450f8:	00407080 	call	40708 <__mulsi3>
   450fc:	1007883a 	mov	r3,r2
   45100:	00800134 	movhi	r2,4
   45104:	1098d104 	addi	r2,r2,25412
   45108:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4510c:	e0bffe17 	ldw	r2,-8(fp)
   45110:	18800226 	beq	r3,r2,4511c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45114:	00bffcc4 	movi	r2,-13
   45118:	00000a06 	br	45144 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4511c:	e0bffd17 	ldw	r2,-12(fp)
   45120:	10800044 	addi	r2,r2,1
   45124:	e0bffd15 	stw	r2,-12(fp)
   45128:	00800134 	movhi	r2,4
   4512c:	109d5104 	addi	r2,r2,30020
   45130:	10800017 	ldw	r2,0(r2)
   45134:	1007883a 	mov	r3,r2
   45138:	e0bffd17 	ldw	r2,-12(fp)
   4513c:	18bfd72e 	bgeu	r3,r2,4509c <__alt_data_end+0xfffd435c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   45140:	0005883a 	mov	r2,zero
}
   45144:	e6ffff04 	addi	sp,fp,-4
   45148:	dfc00217 	ldw	ra,8(sp)
   4514c:	df000117 	ldw	fp,4(sp)
   45150:	dc000017 	ldw	r16,0(sp)
   45154:	dec00304 	addi	sp,sp,12
   45158:	f800283a 	ret

0004515c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4515c:	defff604 	addi	sp,sp,-40
   45160:	dfc00915 	stw	ra,36(sp)
   45164:	df000815 	stw	fp,32(sp)
   45168:	df000804 	addi	fp,sp,32
   4516c:	e13ffd15 	stw	r4,-12(fp)
   45170:	e17ffe15 	stw	r5,-8(fp)
   45174:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45178:	00bfffc4 	movi	r2,-1
   4517c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45180:	00bffb44 	movi	r2,-19
   45184:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45188:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4518c:	e13ffd17 	ldw	r4,-12(fp)
   45190:	01400134 	movhi	r5,4
   45194:	295d4f04 	addi	r5,r5,30012
   45198:	00454780 	call	45478 <alt_find_dev>
   4519c:	e0bff815 	stw	r2,-32(fp)
   451a0:	e0bff817 	ldw	r2,-32(fp)
   451a4:	1000051e 	bne	r2,zero,451bc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   451a8:	e13ffd17 	ldw	r4,-12(fp)
   451ac:	00455080 	call	45508 <alt_find_file>
   451b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   451b4:	00800044 	movi	r2,1
   451b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   451bc:	e0bff817 	ldw	r2,-32(fp)
   451c0:	10002b26 	beq	r2,zero,45270 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   451c4:	e13ff817 	ldw	r4,-32(fp)
   451c8:	004561c0 	call	4561c <alt_get_fd>
   451cc:	e0bff915 	stw	r2,-28(fp)
   451d0:	e0bff917 	ldw	r2,-28(fp)
   451d4:	1000030e 	bge	r2,zero,451e4 <open+0x88>
    {
      status = index;
   451d8:	e0bff917 	ldw	r2,-28(fp)
   451dc:	e0bffa15 	stw	r2,-24(fp)
   451e0:	00002506 	br	45278 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   451e4:	e13ff917 	ldw	r4,-28(fp)
   451e8:	01400304 	movi	r5,12
   451ec:	00407080 	call	40708 <__mulsi3>
   451f0:	1007883a 	mov	r3,r2
   451f4:	00800134 	movhi	r2,4
   451f8:	1098d104 	addi	r2,r2,25412
   451fc:	1885883a 	add	r2,r3,r2
   45200:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45204:	e0fffe17 	ldw	r3,-8(fp)
   45208:	00900034 	movhi	r2,16384
   4520c:	10bfffc4 	addi	r2,r2,-1
   45210:	1886703a 	and	r3,r3,r2
   45214:	e0bffc17 	ldw	r2,-16(fp)
   45218:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4521c:	e0bffb17 	ldw	r2,-20(fp)
   45220:	1000051e 	bne	r2,zero,45238 <open+0xdc>
   45224:	e13ffc17 	ldw	r4,-16(fp)
   45228:	00450680 	call	45068 <alt_file_locked>
   4522c:	e0bffa15 	stw	r2,-24(fp)
   45230:	e0bffa17 	ldw	r2,-24(fp)
   45234:	10001016 	blt	r2,zero,45278 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45238:	e0bff817 	ldw	r2,-32(fp)
   4523c:	10800317 	ldw	r2,12(r2)
   45240:	10000826 	beq	r2,zero,45264 <open+0x108>
   45244:	e0bff817 	ldw	r2,-32(fp)
   45248:	10800317 	ldw	r2,12(r2)
   4524c:	e13ffc17 	ldw	r4,-16(fp)
   45250:	e17ffd17 	ldw	r5,-12(fp)
   45254:	e1bffe17 	ldw	r6,-8(fp)
   45258:	e1ffff17 	ldw	r7,-4(fp)
   4525c:	103ee83a 	callr	r2
   45260:	00000106 	br	45268 <open+0x10c>
   45264:	0005883a 	mov	r2,zero
   45268:	e0bffa15 	stw	r2,-24(fp)
   4526c:	00000206 	br	45278 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45270:	00bffb44 	movi	r2,-19
   45274:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45278:	e0bffa17 	ldw	r2,-24(fp)
   4527c:	1000090e 	bge	r2,zero,452a4 <open+0x148>
  {
    alt_release_fd (index);  
   45280:	e13ff917 	ldw	r4,-28(fp)
   45284:	00439c40 	call	439c4 <alt_release_fd>
    ALT_ERRNO = -status;
   45288:	00450180 	call	45018 <alt_get_errno>
   4528c:	1007883a 	mov	r3,r2
   45290:	e0bffa17 	ldw	r2,-24(fp)
   45294:	0085c83a 	sub	r2,zero,r2
   45298:	18800015 	stw	r2,0(r3)
    return -1;
   4529c:	00bfffc4 	movi	r2,-1
   452a0:	00000106 	br	452a8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   452a4:	e0bff917 	ldw	r2,-28(fp)
}
   452a8:	e037883a 	mov	sp,fp
   452ac:	dfc00117 	ldw	ra,4(sp)
   452b0:	df000017 	ldw	fp,0(sp)
   452b4:	dec00204 	addi	sp,sp,8
   452b8:	f800283a 	ret

000452bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   452bc:	defffa04 	addi	sp,sp,-24
   452c0:	df000515 	stw	fp,20(sp)
   452c4:	df000504 	addi	fp,sp,20
   452c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   452cc:	0005303a 	rdctl	r2,status
   452d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   452d4:	e0fffc17 	ldw	r3,-16(fp)
   452d8:	00bfff84 	movi	r2,-2
   452dc:	1884703a 	and	r2,r3,r2
   452e0:	1001703a 	wrctl	status,r2
  
  return context;
   452e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   452e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   452ec:	e0bfff17 	ldw	r2,-4(fp)
   452f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   452f4:	e0bffd17 	ldw	r2,-12(fp)
   452f8:	10800017 	ldw	r2,0(r2)
   452fc:	e0fffd17 	ldw	r3,-12(fp)
   45300:	18c00117 	ldw	r3,4(r3)
   45304:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   45308:	e0bffd17 	ldw	r2,-12(fp)
   4530c:	10800117 	ldw	r2,4(r2)
   45310:	e0fffd17 	ldw	r3,-12(fp)
   45314:	18c00017 	ldw	r3,0(r3)
   45318:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4531c:	e0bffd17 	ldw	r2,-12(fp)
   45320:	e0fffd17 	ldw	r3,-12(fp)
   45324:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   45328:	e0bffd17 	ldw	r2,-12(fp)
   4532c:	e0fffd17 	ldw	r3,-12(fp)
   45330:	10c00015 	stw	r3,0(r2)
   45334:	e0bffb17 	ldw	r2,-20(fp)
   45338:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4533c:	e0bffe17 	ldw	r2,-8(fp)
   45340:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   45344:	e037883a 	mov	sp,fp
   45348:	df000017 	ldw	fp,0(sp)
   4534c:	dec00104 	addi	sp,sp,4
   45350:	f800283a 	ret

00045354 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   45354:	defffb04 	addi	sp,sp,-20
   45358:	dfc00415 	stw	ra,16(sp)
   4535c:	df000315 	stw	fp,12(sp)
   45360:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45364:	d0a00c17 	ldw	r2,-32720(gp)
   45368:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4536c:	d0a6b217 	ldw	r2,-25912(gp)
   45370:	10800044 	addi	r2,r2,1
   45374:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45378:	00002e06 	br	45434 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4537c:	e0bffd17 	ldw	r2,-12(fp)
   45380:	10800017 	ldw	r2,0(r2)
   45384:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45388:	e0bffd17 	ldw	r2,-12(fp)
   4538c:	10800403 	ldbu	r2,16(r2)
   45390:	10803fcc 	andi	r2,r2,255
   45394:	10000426 	beq	r2,zero,453a8 <alt_tick+0x54>
   45398:	d0a6b217 	ldw	r2,-25912(gp)
   4539c:	1000021e 	bne	r2,zero,453a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   453a0:	e0bffd17 	ldw	r2,-12(fp)
   453a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   453a8:	e0bffd17 	ldw	r2,-12(fp)
   453ac:	10800217 	ldw	r2,8(r2)
   453b0:	d0e6b217 	ldw	r3,-25912(gp)
   453b4:	18801d36 	bltu	r3,r2,4542c <alt_tick+0xd8>
   453b8:	e0bffd17 	ldw	r2,-12(fp)
   453bc:	10800403 	ldbu	r2,16(r2)
   453c0:	10803fcc 	andi	r2,r2,255
   453c4:	1000191e 	bne	r2,zero,4542c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   453c8:	e0bffd17 	ldw	r2,-12(fp)
   453cc:	10800317 	ldw	r2,12(r2)
   453d0:	e0fffd17 	ldw	r3,-12(fp)
   453d4:	18c00517 	ldw	r3,20(r3)
   453d8:	1809883a 	mov	r4,r3
   453dc:	103ee83a 	callr	r2
   453e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   453e4:	e0bfff17 	ldw	r2,-4(fp)
   453e8:	1000031e 	bne	r2,zero,453f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   453ec:	e13ffd17 	ldw	r4,-12(fp)
   453f0:	00452bc0 	call	452bc <alt_alarm_stop>
   453f4:	00000d06 	br	4542c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   453f8:	e0bffd17 	ldw	r2,-12(fp)
   453fc:	10c00217 	ldw	r3,8(r2)
   45400:	e0bfff17 	ldw	r2,-4(fp)
   45404:	1887883a 	add	r3,r3,r2
   45408:	e0bffd17 	ldw	r2,-12(fp)
   4540c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   45410:	e0bffd17 	ldw	r2,-12(fp)
   45414:	10c00217 	ldw	r3,8(r2)
   45418:	d0a6b217 	ldw	r2,-25912(gp)
   4541c:	1880032e 	bgeu	r3,r2,4542c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   45420:	e0bffd17 	ldw	r2,-12(fp)
   45424:	00c00044 	movi	r3,1
   45428:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4542c:	e0bffe17 	ldw	r2,-8(fp)
   45430:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45434:	e0fffd17 	ldw	r3,-12(fp)
   45438:	d0a00c04 	addi	r2,gp,-32720
   4543c:	18bfcf1e 	bne	r3,r2,4537c <__alt_data_end+0xfffd463c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45440:	0001883a 	nop
}
   45444:	e037883a 	mov	sp,fp
   45448:	dfc00117 	ldw	ra,4(sp)
   4544c:	df000017 	ldw	fp,0(sp)
   45450:	dec00204 	addi	sp,sp,8
   45454:	f800283a 	ret

00045458 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   45458:	deffff04 	addi	sp,sp,-4
   4545c:	df000015 	stw	fp,0(sp)
   45460:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45464:	000170fa 	wrctl	ienable,zero
}
   45468:	e037883a 	mov	sp,fp
   4546c:	df000017 	ldw	fp,0(sp)
   45470:	dec00104 	addi	sp,sp,4
   45474:	f800283a 	ret

00045478 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45478:	defffa04 	addi	sp,sp,-24
   4547c:	dfc00515 	stw	ra,20(sp)
   45480:	df000415 	stw	fp,16(sp)
   45484:	df000404 	addi	fp,sp,16
   45488:	e13ffe15 	stw	r4,-8(fp)
   4548c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45490:	e0bfff17 	ldw	r2,-4(fp)
   45494:	10800017 	ldw	r2,0(r2)
   45498:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4549c:	e13ffe17 	ldw	r4,-8(fp)
   454a0:	00407fc0 	call	407fc <strlen>
   454a4:	10800044 	addi	r2,r2,1
   454a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   454ac:	00000d06 	br	454e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   454b0:	e0bffc17 	ldw	r2,-16(fp)
   454b4:	10c00217 	ldw	r3,8(r2)
   454b8:	e0bffd17 	ldw	r2,-12(fp)
   454bc:	1809883a 	mov	r4,r3
   454c0:	e17ffe17 	ldw	r5,-8(fp)
   454c4:	100d883a 	mov	r6,r2
   454c8:	004573c0 	call	4573c <memcmp>
   454cc:	1000021e 	bne	r2,zero,454d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   454d0:	e0bffc17 	ldw	r2,-16(fp)
   454d4:	00000706 	br	454f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   454d8:	e0bffc17 	ldw	r2,-16(fp)
   454dc:	10800017 	ldw	r2,0(r2)
   454e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   454e4:	e0fffc17 	ldw	r3,-16(fp)
   454e8:	e0bfff17 	ldw	r2,-4(fp)
   454ec:	18bff01e 	bne	r3,r2,454b0 <__alt_data_end+0xfffd4770>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   454f0:	0005883a 	mov	r2,zero
}
   454f4:	e037883a 	mov	sp,fp
   454f8:	dfc00117 	ldw	ra,4(sp)
   454fc:	df000017 	ldw	fp,0(sp)
   45500:	dec00204 	addi	sp,sp,8
   45504:	f800283a 	ret

00045508 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   45508:	defffb04 	addi	sp,sp,-20
   4550c:	dfc00415 	stw	ra,16(sp)
   45510:	df000315 	stw	fp,12(sp)
   45514:	df000304 	addi	fp,sp,12
   45518:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4551c:	00800134 	movhi	r2,4
   45520:	109d4d04 	addi	r2,r2,30004
   45524:	10800017 	ldw	r2,0(r2)
   45528:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4552c:	00003106 	br	455f4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   45530:	e0bffd17 	ldw	r2,-12(fp)
   45534:	10800217 	ldw	r2,8(r2)
   45538:	1009883a 	mov	r4,r2
   4553c:	00407fc0 	call	407fc <strlen>
   45540:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45544:	e0bffd17 	ldw	r2,-12(fp)
   45548:	10c00217 	ldw	r3,8(r2)
   4554c:	e0bffe17 	ldw	r2,-8(fp)
   45550:	10bfffc4 	addi	r2,r2,-1
   45554:	1885883a 	add	r2,r3,r2
   45558:	10800003 	ldbu	r2,0(r2)
   4555c:	10803fcc 	andi	r2,r2,255
   45560:	1080201c 	xori	r2,r2,128
   45564:	10bfe004 	addi	r2,r2,-128
   45568:	10800bd8 	cmpnei	r2,r2,47
   4556c:	1000031e 	bne	r2,zero,4557c <alt_find_file+0x74>
    {
      len -= 1;
   45570:	e0bffe17 	ldw	r2,-8(fp)
   45574:	10bfffc4 	addi	r2,r2,-1
   45578:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4557c:	e0bffe17 	ldw	r2,-8(fp)
   45580:	e0ffff17 	ldw	r3,-4(fp)
   45584:	1885883a 	add	r2,r3,r2
   45588:	10800003 	ldbu	r2,0(r2)
   4558c:	10803fcc 	andi	r2,r2,255
   45590:	1080201c 	xori	r2,r2,128
   45594:	10bfe004 	addi	r2,r2,-128
   45598:	10800be0 	cmpeqi	r2,r2,47
   4559c:	1000081e 	bne	r2,zero,455c0 <alt_find_file+0xb8>
   455a0:	e0bffe17 	ldw	r2,-8(fp)
   455a4:	e0ffff17 	ldw	r3,-4(fp)
   455a8:	1885883a 	add	r2,r3,r2
   455ac:	10800003 	ldbu	r2,0(r2)
   455b0:	10803fcc 	andi	r2,r2,255
   455b4:	1080201c 	xori	r2,r2,128
   455b8:	10bfe004 	addi	r2,r2,-128
   455bc:	10000a1e 	bne	r2,zero,455e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   455c0:	e0bffd17 	ldw	r2,-12(fp)
   455c4:	10c00217 	ldw	r3,8(r2)
   455c8:	e0bffe17 	ldw	r2,-8(fp)
   455cc:	1809883a 	mov	r4,r3
   455d0:	e17fff17 	ldw	r5,-4(fp)
   455d4:	100d883a 	mov	r6,r2
   455d8:	004573c0 	call	4573c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   455dc:	1000021e 	bne	r2,zero,455e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   455e0:	e0bffd17 	ldw	r2,-12(fp)
   455e4:	00000806 	br	45608 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   455e8:	e0bffd17 	ldw	r2,-12(fp)
   455ec:	10800017 	ldw	r2,0(r2)
   455f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   455f4:	e0fffd17 	ldw	r3,-12(fp)
   455f8:	00800134 	movhi	r2,4
   455fc:	109d4d04 	addi	r2,r2,30004
   45600:	18bfcb1e 	bne	r3,r2,45530 <__alt_data_end+0xfffd47f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45604:	0005883a 	mov	r2,zero
}
   45608:	e037883a 	mov	sp,fp
   4560c:	dfc00117 	ldw	ra,4(sp)
   45610:	df000017 	ldw	fp,0(sp)
   45614:	dec00204 	addi	sp,sp,8
   45618:	f800283a 	ret

0004561c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4561c:	defffa04 	addi	sp,sp,-24
   45620:	dfc00515 	stw	ra,20(sp)
   45624:	df000415 	stw	fp,16(sp)
   45628:	dc000315 	stw	r16,12(sp)
   4562c:	df000404 	addi	fp,sp,16
   45630:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   45634:	00bffa04 	movi	r2,-24
   45638:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4563c:	e03ffc15 	stw	zero,-16(fp)
   45640:	00002106 	br	456c8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   45644:	04000134 	movhi	r16,4
   45648:	8418d104 	addi	r16,r16,25412
   4564c:	e0bffc17 	ldw	r2,-16(fp)
   45650:	1009883a 	mov	r4,r2
   45654:	01400304 	movi	r5,12
   45658:	00407080 	call	40708 <__mulsi3>
   4565c:	8085883a 	add	r2,r16,r2
   45660:	10800017 	ldw	r2,0(r2)
   45664:	1000151e 	bne	r2,zero,456bc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   45668:	04000134 	movhi	r16,4
   4566c:	8418d104 	addi	r16,r16,25412
   45670:	e0bffc17 	ldw	r2,-16(fp)
   45674:	1009883a 	mov	r4,r2
   45678:	01400304 	movi	r5,12
   4567c:	00407080 	call	40708 <__mulsi3>
   45680:	8085883a 	add	r2,r16,r2
   45684:	e0fffe17 	ldw	r3,-8(fp)
   45688:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4568c:	00800134 	movhi	r2,4
   45690:	109d5104 	addi	r2,r2,30020
   45694:	10c00017 	ldw	r3,0(r2)
   45698:	e0bffc17 	ldw	r2,-16(fp)
   4569c:	1880040e 	bge	r3,r2,456b0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   456a0:	00800134 	movhi	r2,4
   456a4:	109d5104 	addi	r2,r2,30020
   456a8:	e0fffc17 	ldw	r3,-16(fp)
   456ac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   456b0:	e0bffc17 	ldw	r2,-16(fp)
   456b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   456b8:	00000606 	br	456d4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   456bc:	e0bffc17 	ldw	r2,-16(fp)
   456c0:	10800044 	addi	r2,r2,1
   456c4:	e0bffc15 	stw	r2,-16(fp)
   456c8:	e0bffc17 	ldw	r2,-16(fp)
   456cc:	10800810 	cmplti	r2,r2,32
   456d0:	103fdc1e 	bne	r2,zero,45644 <__alt_data_end+0xfffd4904>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   456d4:	e0bffd17 	ldw	r2,-12(fp)
}
   456d8:	e6ffff04 	addi	sp,fp,-4
   456dc:	dfc00217 	ldw	ra,8(sp)
   456e0:	df000117 	ldw	fp,4(sp)
   456e4:	dc000017 	ldw	r16,0(sp)
   456e8:	dec00304 	addi	sp,sp,12
   456ec:	f800283a 	ret

000456f0 <atexit>:
   456f0:	200b883a 	mov	r5,r4
   456f4:	000d883a 	mov	r6,zero
   456f8:	0009883a 	mov	r4,zero
   456fc:	000f883a 	mov	r7,zero
   45700:	00457b81 	jmpi	457b8 <__register_exitproc>

00045704 <exit>:
   45704:	defffe04 	addi	sp,sp,-8
   45708:	000b883a 	mov	r5,zero
   4570c:	dc000015 	stw	r16,0(sp)
   45710:	dfc00115 	stw	ra,4(sp)
   45714:	2021883a 	mov	r16,r4
   45718:	00458cc0 	call	458cc <__call_exitprocs>
   4571c:	00800134 	movhi	r2,4
   45720:	109d4904 	addi	r2,r2,29988
   45724:	11000017 	ldw	r4,0(r2)
   45728:	20800f17 	ldw	r2,60(r4)
   4572c:	10000126 	beq	r2,zero,45734 <exit+0x30>
   45730:	103ee83a 	callr	r2
   45734:	8009883a 	mov	r4,r16
   45738:	0045a600 	call	45a60 <_exit>

0004573c <memcmp>:
   4573c:	01c000c4 	movi	r7,3
   45740:	3980192e 	bgeu	r7,r6,457a8 <memcmp+0x6c>
   45744:	2144b03a 	or	r2,r4,r5
   45748:	11c4703a 	and	r2,r2,r7
   4574c:	10000f26 	beq	r2,zero,4578c <memcmp+0x50>
   45750:	20800003 	ldbu	r2,0(r4)
   45754:	28c00003 	ldbu	r3,0(r5)
   45758:	10c0151e 	bne	r2,r3,457b0 <memcmp+0x74>
   4575c:	31bfff84 	addi	r6,r6,-2
   45760:	01ffffc4 	movi	r7,-1
   45764:	00000406 	br	45778 <memcmp+0x3c>
   45768:	20800003 	ldbu	r2,0(r4)
   4576c:	28c00003 	ldbu	r3,0(r5)
   45770:	31bfffc4 	addi	r6,r6,-1
   45774:	10c00e1e 	bne	r2,r3,457b0 <memcmp+0x74>
   45778:	21000044 	addi	r4,r4,1
   4577c:	29400044 	addi	r5,r5,1
   45780:	31fff91e 	bne	r6,r7,45768 <__alt_data_end+0xfffd4a28>
   45784:	0005883a 	mov	r2,zero
   45788:	f800283a 	ret
   4578c:	20c00017 	ldw	r3,0(r4)
   45790:	28800017 	ldw	r2,0(r5)
   45794:	1880041e 	bne	r3,r2,457a8 <memcmp+0x6c>
   45798:	31bfff04 	addi	r6,r6,-4
   4579c:	21000104 	addi	r4,r4,4
   457a0:	29400104 	addi	r5,r5,4
   457a4:	39bff936 	bltu	r7,r6,4578c <__alt_data_end+0xfffd4a4c>
   457a8:	303fe91e 	bne	r6,zero,45750 <__alt_data_end+0xfffd4a10>
   457ac:	003ff506 	br	45784 <__alt_data_end+0xfffd4a44>
   457b0:	10c5c83a 	sub	r2,r2,r3
   457b4:	f800283a 	ret

000457b8 <__register_exitproc>:
   457b8:	00800134 	movhi	r2,4
   457bc:	defffa04 	addi	sp,sp,-24
   457c0:	109d4904 	addi	r2,r2,29988
   457c4:	dc000315 	stw	r16,12(sp)
   457c8:	14000017 	ldw	r16,0(r2)
   457cc:	dc400415 	stw	r17,16(sp)
   457d0:	dfc00515 	stw	ra,20(sp)
   457d4:	80805217 	ldw	r2,328(r16)
   457d8:	2023883a 	mov	r17,r4
   457dc:	10003626 	beq	r2,zero,458b8 <__register_exitproc+0x100>
   457e0:	10c00117 	ldw	r3,4(r2)
   457e4:	010007c4 	movi	r4,31
   457e8:	20c00e16 	blt	r4,r3,45824 <__register_exitproc+0x6c>
   457ec:	1a400044 	addi	r9,r3,1
   457f0:	8800211e 	bne	r17,zero,45878 <__register_exitproc+0xc0>
   457f4:	18c00084 	addi	r3,r3,2
   457f8:	18c7883a 	add	r3,r3,r3
   457fc:	18c7883a 	add	r3,r3,r3
   45800:	12400115 	stw	r9,4(r2)
   45804:	10c7883a 	add	r3,r2,r3
   45808:	19400015 	stw	r5,0(r3)
   4580c:	0005883a 	mov	r2,zero
   45810:	dfc00517 	ldw	ra,20(sp)
   45814:	dc400417 	ldw	r17,16(sp)
   45818:	dc000317 	ldw	r16,12(sp)
   4581c:	dec00604 	addi	sp,sp,24
   45820:	f800283a 	ret
   45824:	00800034 	movhi	r2,0
   45828:	10800004 	addi	r2,r2,0
   4582c:	10002526 	beq	r2,zero,458c4 <__register_exitproc+0x10c>
   45830:	01006404 	movi	r4,400
   45834:	d9400015 	stw	r5,0(sp)
   45838:	d9800115 	stw	r6,4(sp)
   4583c:	d9c00215 	stw	r7,8(sp)
   45840:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   45844:	d9400017 	ldw	r5,0(sp)
   45848:	d9800117 	ldw	r6,4(sp)
   4584c:	d9c00217 	ldw	r7,8(sp)
   45850:	10001c26 	beq	r2,zero,458c4 <__register_exitproc+0x10c>
   45854:	80c05217 	ldw	r3,328(r16)
   45858:	10000115 	stw	zero,4(r2)
   4585c:	02400044 	movi	r9,1
   45860:	10c00015 	stw	r3,0(r2)
   45864:	80805215 	stw	r2,328(r16)
   45868:	10006215 	stw	zero,392(r2)
   4586c:	10006315 	stw	zero,396(r2)
   45870:	0007883a 	mov	r3,zero
   45874:	883fdf26 	beq	r17,zero,457f4 <__alt_data_end+0xfffd4ab4>
   45878:	18d1883a 	add	r8,r3,r3
   4587c:	4211883a 	add	r8,r8,r8
   45880:	1211883a 	add	r8,r2,r8
   45884:	41802215 	stw	r6,136(r8)
   45888:	01000044 	movi	r4,1
   4588c:	11806217 	ldw	r6,392(r2)
   45890:	20c8983a 	sll	r4,r4,r3
   45894:	310cb03a 	or	r6,r6,r4
   45898:	11806215 	stw	r6,392(r2)
   4589c:	41c04215 	stw	r7,264(r8)
   458a0:	01800084 	movi	r6,2
   458a4:	89bfd31e 	bne	r17,r6,457f4 <__alt_data_end+0xfffd4ab4>
   458a8:	11806317 	ldw	r6,396(r2)
   458ac:	3108b03a 	or	r4,r6,r4
   458b0:	11006315 	stw	r4,396(r2)
   458b4:	003fcf06 	br	457f4 <__alt_data_end+0xfffd4ab4>
   458b8:	80805304 	addi	r2,r16,332
   458bc:	80805215 	stw	r2,328(r16)
   458c0:	003fc706 	br	457e0 <__alt_data_end+0xfffd4aa0>
   458c4:	00bfffc4 	movi	r2,-1
   458c8:	003fd106 	br	45810 <__alt_data_end+0xfffd4ad0>

000458cc <__call_exitprocs>:
   458cc:	00800134 	movhi	r2,4
   458d0:	109d4904 	addi	r2,r2,29988
   458d4:	10800017 	ldw	r2,0(r2)
   458d8:	defff404 	addi	sp,sp,-48
   458dc:	dd800815 	stw	r22,32(sp)
   458e0:	d8800015 	stw	r2,0(sp)
   458e4:	10805204 	addi	r2,r2,328
   458e8:	dd000615 	stw	r20,24(sp)
   458ec:	dc800415 	stw	r18,16(sp)
   458f0:	dfc00b15 	stw	ra,44(sp)
   458f4:	df000a15 	stw	fp,40(sp)
   458f8:	ddc00915 	stw	r23,36(sp)
   458fc:	dd400715 	stw	r21,28(sp)
   45900:	dcc00515 	stw	r19,20(sp)
   45904:	dc400315 	stw	r17,12(sp)
   45908:	dc000215 	stw	r16,8(sp)
   4590c:	2025883a 	mov	r18,r4
   45910:	2829883a 	mov	r20,r5
   45914:	d8800115 	stw	r2,4(sp)
   45918:	05bfffc4 	movi	r22,-1
   4591c:	d8800017 	ldw	r2,0(sp)
   45920:	14c05217 	ldw	r19,328(r2)
   45924:	98001d26 	beq	r19,zero,4599c <__call_exitprocs+0xd0>
   45928:	dd400117 	ldw	r21,4(sp)
   4592c:	98800117 	ldw	r2,4(r19)
   45930:	173fffc4 	addi	fp,r2,-1
   45934:	e0000d16 	blt	fp,zero,4596c <__call_exitprocs+0xa0>
   45938:	14000044 	addi	r16,r2,1
   4593c:	8421883a 	add	r16,r16,r16
   45940:	8421883a 	add	r16,r16,r16
   45944:	84402004 	addi	r17,r16,128
   45948:	9c63883a 	add	r17,r19,r17
   4594c:	9c21883a 	add	r16,r19,r16
   45950:	a0001e26 	beq	r20,zero,459cc <__call_exitprocs+0x100>
   45954:	80804017 	ldw	r2,256(r16)
   45958:	15001c26 	beq	r2,r20,459cc <__call_exitprocs+0x100>
   4595c:	e73fffc4 	addi	fp,fp,-1
   45960:	843fff04 	addi	r16,r16,-4
   45964:	8c7fff04 	addi	r17,r17,-4
   45968:	e5bff91e 	bne	fp,r22,45950 <__alt_data_end+0xfffd4c10>
   4596c:	00800034 	movhi	r2,0
   45970:	10800004 	addi	r2,r2,0
   45974:	10000926 	beq	r2,zero,4599c <__call_exitprocs+0xd0>
   45978:	98800117 	ldw	r2,4(r19)
   4597c:	1000311e 	bne	r2,zero,45a44 <__call_exitprocs+0x178>
   45980:	98800017 	ldw	r2,0(r19)
   45984:	10003426 	beq	r2,zero,45a58 <__call_exitprocs+0x18c>
   45988:	9809883a 	mov	r4,r19
   4598c:	a8800015 	stw	r2,0(r21)
   45990:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   45994:	acc00017 	ldw	r19,0(r21)
   45998:	983fe41e 	bne	r19,zero,4592c <__alt_data_end+0xfffd4bec>
   4599c:	dfc00b17 	ldw	ra,44(sp)
   459a0:	df000a17 	ldw	fp,40(sp)
   459a4:	ddc00917 	ldw	r23,36(sp)
   459a8:	dd800817 	ldw	r22,32(sp)
   459ac:	dd400717 	ldw	r21,28(sp)
   459b0:	dd000617 	ldw	r20,24(sp)
   459b4:	dcc00517 	ldw	r19,20(sp)
   459b8:	dc800417 	ldw	r18,16(sp)
   459bc:	dc400317 	ldw	r17,12(sp)
   459c0:	dc000217 	ldw	r16,8(sp)
   459c4:	dec00c04 	addi	sp,sp,48
   459c8:	f800283a 	ret
   459cc:	98800117 	ldw	r2,4(r19)
   459d0:	80c00017 	ldw	r3,0(r16)
   459d4:	10bfffc4 	addi	r2,r2,-1
   459d8:	17001526 	beq	r2,fp,45a30 <__call_exitprocs+0x164>
   459dc:	80000015 	stw	zero,0(r16)
   459e0:	183fde26 	beq	r3,zero,4595c <__alt_data_end+0xfffd4c1c>
   459e4:	00800044 	movi	r2,1
   459e8:	1708983a 	sll	r4,r2,fp
   459ec:	98806217 	ldw	r2,392(r19)
   459f0:	9dc00117 	ldw	r23,4(r19)
   459f4:	2084703a 	and	r2,r4,r2
   459f8:	1000061e 	bne	r2,zero,45a14 <__call_exitprocs+0x148>
   459fc:	183ee83a 	callr	r3
   45a00:	98800117 	ldw	r2,4(r19)
   45a04:	15ffc51e 	bne	r2,r23,4591c <__alt_data_end+0xfffd4bdc>
   45a08:	a8800017 	ldw	r2,0(r21)
   45a0c:	14ffd326 	beq	r2,r19,4595c <__alt_data_end+0xfffd4c1c>
   45a10:	003fc206 	br	4591c <__alt_data_end+0xfffd4bdc>
   45a14:	98806317 	ldw	r2,396(r19)
   45a18:	2084703a 	and	r2,r4,r2
   45a1c:	1000061e 	bne	r2,zero,45a38 <__call_exitprocs+0x16c>
   45a20:	89400017 	ldw	r5,0(r17)
   45a24:	9009883a 	mov	r4,r18
   45a28:	183ee83a 	callr	r3
   45a2c:	003ff406 	br	45a00 <__alt_data_end+0xfffd4cc0>
   45a30:	9f000115 	stw	fp,4(r19)
   45a34:	003fea06 	br	459e0 <__alt_data_end+0xfffd4ca0>
   45a38:	89000017 	ldw	r4,0(r17)
   45a3c:	183ee83a 	callr	r3
   45a40:	003fef06 	br	45a00 <__alt_data_end+0xfffd4cc0>
   45a44:	98800017 	ldw	r2,0(r19)
   45a48:	982b883a 	mov	r21,r19
   45a4c:	1027883a 	mov	r19,r2
   45a50:	983fb61e 	bne	r19,zero,4592c <__alt_data_end+0xfffd4bec>
   45a54:	003fd106 	br	4599c <__alt_data_end+0xfffd4c5c>
   45a58:	0005883a 	mov	r2,zero
   45a5c:	003ffa06 	br	45a48 <__alt_data_end+0xfffd4d08>

00045a60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45a60:	defffd04 	addi	sp,sp,-12
   45a64:	df000215 	stw	fp,8(sp)
   45a68:	df000204 	addi	fp,sp,8
   45a6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45a70:	0001883a 	nop
   45a74:	e0bfff17 	ldw	r2,-4(fp)
   45a78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45a7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45a80:	10000226 	beq	r2,zero,45a8c <_exit+0x2c>
    ALT_SIM_FAIL();
   45a84:	002af070 	cmpltui	zero,zero,43969
   45a88:	00000106 	br	45a90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45a8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45a90:	003fff06 	br	45a90 <__alt_data_end+0xfffd4d50>
