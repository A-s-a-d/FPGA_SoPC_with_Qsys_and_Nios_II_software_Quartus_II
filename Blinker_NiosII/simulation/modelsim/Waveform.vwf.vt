// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/11/2025 22:54:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Blinker_Schema
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Blinker_Schema_vlg_sample_tst(
	clock_27Mhz,
	clock_50Mhz,
	PIN,
	pin_name1,
	pin_name2,
	pin_name3,
	pin_name4,
	reset,
	sel,
	sampler_tx
);
input  clock_27Mhz;
input  clock_50Mhz;
input [1:0] PIN;
input  pin_name1;
input  pin_name2;
input  pin_name3;
input  pin_name4;
input  reset;
input [1:0] sel;
output sampler_tx;

reg sample;
time current_time;
always @(clock_27Mhz or clock_50Mhz or PIN or pin_name1 or pin_name2 or pin_name3 or pin_name4 or reset or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Blinker_Schema_vlg_check_tst (
	7seg_1,
	7seg_2,
	7seg_3,
	7seg_4,
	LED,
	OUT,
	sampler_rx
);
input [7:0] 7seg_1;
input [7:0] 7seg_2;
input [7:0] 7seg_3;
input [7:0] 7seg_4;
input [7:0] LED;
input  OUT;
input sampler_rx;

reg [7:0] 7seg_1_expected;
reg [7:0] 7seg_2_expected;
reg [7:0] 7seg_3_expected;
reg [7:0] 7seg_4_expected;
reg [7:0] LED_expected;
reg  OUT_expected;

reg [7:0] 7seg_1_prev;
reg [7:0] 7seg_2_prev;
reg [7:0] 7seg_3_prev;
reg [7:0] 7seg_4_prev;
reg [7:0] LED_prev;
reg  OUT_prev;

reg  OUT_expected_prev;

reg  last_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	7seg_1_prev = 7seg_1;
	7seg_2_prev = 7seg_2;
	7seg_3_prev = 7seg_3;
	7seg_4_prev = 7seg_4;
	LED_prev = LED;
	OUT_prev = OUT;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_expected_prev = OUT_expected;
end



// expected OUT
initial
begin
	OUT_expected = 1'bX;
end 
// generate trigger
always @(7seg_1_expected or 7seg_1 or 7seg_2_expected or 7seg_2 or 7seg_3_expected or 7seg_3 or 7seg_4_expected or 7seg_4 or LED_expected or LED or OUT_expected or OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 7seg_1 = %b | expected 7seg_2 = %b | expected 7seg_3 = %b | expected 7seg_4 = %b | expected LED = %b | expected OUT = %b | ",7seg_1_expected_prev,7seg_2_expected_prev,7seg_3_expected_prev,7seg_4_expected_prev,LED_expected_prev,OUT_expected_prev);
	$display("| real 7seg_1 = %b | real 7seg_2 = %b | real 7seg_3 = %b | real 7seg_4 = %b | real LED = %b | real OUT = %b | ",7seg_1_prev,7seg_2_prev,7seg_3_prev,7seg_4_prev,LED_prev,OUT_prev);
`endif
	if (
		( OUT_expected_prev !== 1'bx ) && ( OUT_prev !== OUT_expected_prev )
		&& ((OUT_expected_prev !== last_OUT_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_exp = OUT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Blinker_Schema_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_27Mhz;
reg clock_50Mhz;
reg [1:0] PIN;
reg pin_name1;
reg pin_name2;
reg pin_name3;
reg pin_name4;
reg reset;
reg [1:0] sel;
// wires                                               
wire [7:0] 7seg_1;
wire [7:0] 7seg_2;
wire [7:0] 7seg_3;
wire [7:0] 7seg_4;
wire [7:0] LED;
wire OUT;

wire sampler;                             

// assign statements (if any)                          
Blinker_Schema i1 (
// port map - connection between master ports and signals/registers   
	.\7seg_1 (7seg_1),
	.\7seg_2 (7seg_2),
	.\7seg_3 (7seg_3),
	.\7seg_4 (7seg_4),
	.clock_27Mhz(clock_27Mhz),
	.clock_50Mhz(clock_50Mhz),
	.LED(LED),
	.OUT(OUT),
	.PIN(PIN),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.reset(reset),
	.sel(sel)
);

// pin_name1
initial
begin
	pin_name1 = 1'b1;
	# 2500;
	repeat(99)
	begin
		pin_name1 = 1'b0;
		pin_name1 = #5000 1'b1;
		# 5000;
	end
	pin_name1 = 1'b0;
	pin_name1 = #5000 1'b1;
end 

// pin_name2
initial
begin
	pin_name2 = 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #25000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #25000 1'b0;
	pin_name2 = #20000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #25000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #20000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #35000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #25000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #20000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #15000 1'b0;
	pin_name2 = #10000 1'b1;
	pin_name2 = #5000 1'b0;
	pin_name2 = #5000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #20000 1'b1;
	pin_name2 = #10000 1'b0;
	pin_name2 = #15000 1'b1;
	pin_name2 = #5000 1'b0;
end 

// pin_name3
initial
begin
	pin_name3 = 1'b1;
	# 2500;
	repeat(199)
	begin
		pin_name3 = 1'b0;
		pin_name3 = #2500 1'b1;
		# 2500;
	end
	pin_name3 = 1'b0;
end 

// pin_name4
initial
begin
	pin_name4 = 1'b0;
	pin_name4 = #500 1'b1;
	# 4000;
	repeat(124)
	begin
		pin_name4 = 1'b0;
		pin_name4 = #4000 1'b1;
		# 4000;
	end
	pin_name4 = 1'b0;
end 
// PIN[ 1 ]
always
begin
	PIN[1] = 1'b0;
	PIN[1] = #25000 1'b1;
	#25000;
end 
// PIN[ 0 ]
initial
begin
	PIN[0] = 1'b1;
	# 12500;
	repeat(19)
	begin
		PIN[0] = 1'b0;
		PIN[0] = #25000 1'b1;
		# 25000;
	end
	PIN[0] = 1'b0;
	PIN[0] = #25000 1'b1;
end 

Blinker_Schema_vlg_sample_tst tb_sample (
	.clock_27Mhz(clock_27Mhz),
	.clock_50Mhz(clock_50Mhz),
	.PIN(PIN),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.reset(reset),
	.sel(sel),
	.sampler_tx(sampler)
);

Blinker_Schema_vlg_check_tst tb_out(
	.7seg_1(7seg_1),
	.7seg_2(7seg_2),
	.7seg_3(7seg_3),
	.7seg_4(7seg_4),
	.LED(LED),
	.OUT(OUT),
	.sampler_rx(sampler)
);
endmodule

